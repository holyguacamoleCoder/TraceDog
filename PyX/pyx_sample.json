[
    {
        "id":"pyx_0",
        "nl":"Write a solution to the following coding problem:\nYou are tasked with creating a Python function that processes a list of dictionaries representing users' data. The function should filter out users based on specific criteria and return a list of dictionaries containing only the relevant user information. Each user dictionary contains 'name', 'age', 'gender', and 'location' keys. The function should filter users based on the following conditions:\n1. Include users who are at least 18 years old.\n2. Include users who are female.\n3. Include users who are located in 'Europe'.\n\nWrite a function `filter_users(users_data)` that takes a list of user dictionaries as input and returns a filtered list of user dictionaries based on the specified conditions.\n\nExample input:\n```python\nusers_data = [\n    {'name': 'Alice', 'age': 25, 'gender': 'female', 'location': 'Europe'},\n    {'name': 'Bob', 'age': 30, 'gender': 'male', 'location': 'Asia'},\n    {'name': 'Charlie', 'age': 20, 'gender': 'male', 'location': 'Europe'},\n    {'name': 'Diana', 'age': 22, 'gender': 'female', 'location': 'North America'}\n]\n```\n\nExpected output:\n```python\nfiltered_users = [\n    {'name': 'Alice', 'age': 25, 'gender': 'female', 'location': 'Europe'},\n    {'name': 'Charlie', 'age': 20, 'gender': 'male', 'location': 'Europe'}\n]\n```",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\ndef filter_users(users_data):\n    filtered_users = []\n    \n    for user in users_data:\n        if user['age'] >= 18 and user['gender'] == 'female' and user['location'] == 'Europe':\n            filtered_users.append(user)\n    \n    return filtered_users\n```\n"
    },
    {
        "id":"pyx_1",
        "nl":"Write a solution to the following coding problem:\nYou are given a list of integers representing the scores of students in a class. Your task is to write a Python function that returns the top three unique scores in descending order. If there are fewer than three unique scores, return all unique scores in descending order.\n\nFunction signature: `def top_three_scores(scores: List[int]) -> List[int]:`\n\n**Input:**\n- A list of integers `scores` (1 <= len(scores) <= 10^4) representing the scores of students in the class. Each score is an integer between 0 and 100.\n\n**Output:**\n- Return a list of integers representing the top three unique scores in descending order.\n\n**Example:**\n```\nInput: scores = [85, 92, 78, 85, 92, 100, 78, 90]\nOutput: [100, 92, 90]\n\nInput: scores = [75, 75, 75, 75, 75]\nOutput: [75]\n```",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\nfrom typing import List\n\ndef top_three_scores(scores: List[int]) -> List[int]:\n    # Step 1: Get unique scores\n    unique_scores = set(scores)\n    \n    # Step 2: Sort the unique scores in descending order\n    sorted_scores = sorted(unique_scores, reverse=True)\n    \n    # Step 3: Return the top three scores or fewer if not enough unique scores\n    return sorted_scores[:3]\n```\n"
    },
    {
        "id":"pyx_2",
        "nl":"Write a solution to the following coding problem:\nYou are tasked with creating a Python decorator that logs the time taken for a function to execute. The decorator should print the function name and the time taken in milliseconds. Your goal is to implement the `@timed_execution` decorator and apply it to the given functions `get_deviceDisk`, `get_rack`, `get_racks`, `get_idc`, and `get_idcs`.\n\nDesign the `@timed_execution` decorator to calculate and print the time taken for a function to execute in milliseconds. Apply this decorator to the provided functions.",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\nimport time\nfrom functools import wraps\n\ndef timed_execution(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        start_time = time.time()  # Record start time\n        try:\n            result = func(*args, **kwargs)  # Call the function\n        finally:\n            end_time = time.time()  # Record end time\n            duration_ms = (end_time - start_time) * 1000  # Convert to milliseconds\n            print(f\"Function '{func.__name__}' executed in {duration_ms:.2f} ms\")\n        return result  # Return the result of the function call\n    return wrapper\n\n@timed_execution\ndef get_deviceDisk():\n    # Simulate a function that takes some time to execute\n    time.sleep(0.1)  # Sleep for 100 milliseconds\n\n@timed_execution\ndef get_rack():\n    time.sleep(0.2)  # Sleep for 200 milliseconds\n\n@timed_execution\ndef get_racks():\n    time.sleep(0.15)  # Sleep for 150 milliseconds\n\n@timed_execution\ndef get_idc():\n    time.sleep(0.25)  # Sleep for 250 milliseconds\n\n@timed_execution\ndef get_idcs():\n    time.sleep(0.3)  # Sleep for 300 milliseconds\n```\n"
    },
    {
        "id":"pyx_3",
        "nl":"Write a solution to the following coding problem:\nYou are tasked with implementing a function that processes a given query to retrieve user data and their relationships. The function should construct a query using a query builder, execute it using a session, and then validate the result against an expected structure. The query should select specific fields for a user and their friends, and the result should match a predefined format.\n\nYou need to create a Python function that follows these requirements:\n- Function Signature: `def process_user_query(query_builder, session, user_cls)`\n- The function should use the `query_builder` to construct a query that selects user data and their friends.\n- The constructed query should be executed using the provided `session`.\n- The result of the query execution should be validated to match the following structure:\n    ```\n    {\n        'data': {\n            'relationships': {\n                'all_friends': {'data': [{'id': '2', 'type': 'users'}]}\n            },\n            'id': '1',\n            'type': 'users'\n        }\n    }\n    ```\n- If the result matches the expected structure, the function should return `True`; otherwise, it should return `False`.",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\ndef process_user_query(query_builder, session, user_cls):\n    # Step 1: Build the query using the query_builder\n    query = query_builder.select(user_cls).join('friends').where(user_cls.id == '1')\n    \n    # Step 2: Execute the constructed query using the session\n    result = session.execute(query)\n\n    # Step 3: Capture the result (Assuming it returns a dictionary)\n    # Here we assume the result is a single dictionary representing the user and their friends.\n    if not result:\n        return False\n\n    # Step 4: Validate the result structure\n    expected_structure = {\n        'data': {\n            'relationships': {\n                'all_friends': {'data': [{'id': '2', 'type': 'users'}]}\n            },\n            'id': '1',\n            'type': 'users'\n        }\n    }\n\n    # Check if the result matches the expected structure\n    return result == expected_structure\n```\n"
    },
    {
        "id":"pyx_4",
        "nl":"Write a solution to the following coding problem:\nYou are tasked with creating a Python function that takes a list of tuples representing categories and their corresponding weights, and returns the category with the highest total weight. Each category can have multiple entries in the list, and the weights for each category need to be summed up to determine the highest weighted category.\n\nExample:\n```python\ncategories = [\n    ('Inteligencja logiczno-matematyczna', 5),\n    ('Inteligencja lingwistyczna', 3),\n    ('Inteligencja muzyczna', 7),\n    ('Inteligencja interpersonalna', 4),\n    ('Inteligencja muzyczna', 2),\n    ('Inteligencja logiczno-matematyczna', 3),\n    ('Inteligencja interpersonalna', 6),\n    ('Inteligencja fizyczno-kinestetyczna', 8)\n]\n\n# Expected output: 'Inteligencja fizyczno-kinestetyczna' (total weight: 8)\n```",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\ndef highest_weighted_category(categories):\n    if not categories:  # Handle empty list\n        return None\n    \n    weights = {}\n    \n    # Accumulate weights for each category\n    for category, weight in categories:\n        if category in weights:\n            weights[category] += weight\n        else:\n            weights[category] = weight\n    \n    # Find the category with the highest total weight\n    max_category = max(weights, key=weights.get)\n    \n    return max_category\n```\n"
    },
    {
        "id":"pyx_5",
        "nl":"Write a solution to the following coding problem:\nYou are tasked with implementing a function that converts a given set of bits into a target value based on a specific algorithm. The function should also include a verification mechanism to ensure that the target value meets certain criteria.\n\nGiven the following code snippet as inspiration:\n- Two blocks, `block_2` and `block_3`, are provided with their respective hash, bits, and timestamp values.\n- There is a function `get_target()` that takes in parameters and returns bits and target values.\n- There are functions `bits_to_target()` and `verify_target()` that are mentioned but not defined.\n\nYour task is to:\n1. Implement the `get_target()` function that calculates the target value based on the provided bits and other parameters.\n2. Implement the `verify_target()` function that verifies if the target value meets specific criteria.",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\ndef bits_to_target(bits):\n    # The first byte is the exponent, the rest are the coefficient\n    exponent = bits >> 24\n    coefficient = bits & 0x007fffff  # Extract the last 3 bytes\n    # Calculate target value\n    target = coefficient * (256 ** (exponent - 3))\n    return target\n\ndef get_target(bits):\n    # Get the target value from the bits\n    target = bits_to_target(bits)\n    return target\n\ndef verify_target(target):\n    # Verify that the target meets certain criteria\n    if target <= 0:  # Target must be positive\n        return False\n    # Additional criteria can be implemented here\n    return True\n```\n"
    },
    {
        "id":"pyx_6",
        "nl":"Write a solution to the following coding problem:\nYou are tasked with implementing a function that calculates the nth Fibonacci number using a memoization technique. The provided code snippet serves as a starting point, where a dictionary `known` is used to store previously calculated Fibonacci numbers. The `fib(n)` function recursively calculates the Fibonacci number for a given input `n` and stores intermediate results in the `known` dictionary to avoid redundant calculations.\n\nYour task is to complete the implementation by writing the missing part of the code that calculates the nth Fibonacci number using memoization.",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\ndef fib(n, known={}):\n    if n in known:\n        return known[n]\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    # Calculate the Fibonacci number recursively and store it in known\n    known[n] = fib(n - 1, known) + fib(n - 2, known)\n    return known[n]\n```\n"
    },
    {
        "id":"pyx_7",
        "nl":"Write a solution to the following coding problem:\nYou are tasked with creating a Python function that takes a list of tuples representing migrations in a Django project and returns a dictionary mapping each model name to a list of fields added in that model during the migrations. Each tuple in the input list represents a migration operation, and the model name can be extracted from the `model_name` attribute. The fields added to a model are represented by the `field` attribute in the migration operation.\n\nWrite a function `extract_fields_added(migrations)` that takes the list of migration tuples as input and returns a dictionary where keys are model names and values are lists of fields added to that model.\n\nExample:\n```python\nmigrations = [\n    ('resposta', 'materia'),\n    ('pergunta', 'opcao_resposta'),\n    ('resposta', 'data_resposta'),\n    ('pergunta', 'texto_pergunta'),\n]\n\nextract_fields_added(migrations)\n```\n\nExpected Output:\n```python\n{\n    'resposta': ['materia', 'data_resposta'],\n    'pergunta': ['opcao_resposta', 'texto_pergunta']\n}\n```",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\ndef extract_fields_added(migrations):\n    fields_dict = {}\n    \n    for model, field in migrations:\n        if model not in fields_dict:\n            fields_dict[model] = []\n        if field not in fields_dict[model]:  # Avoid duplicates\n            fields_dict[model].append(field)\n    \n    return fields_dict\n```\n"
    },
    {
        "id":"pyx_8",
        "nl":"Write a solution to the following coding problem:\nYou are tasked with creating a function that processes a JSON file by loading its contents and applying a converter function to the loaded data. The function should take a filename and a converter function as input parameters. The converter function will be applied to the loaded JSON data, and the processed result should be returned.\n\nYou need to implement a function `process_json_file(filename, converter)` that reads the content of the JSON file specified by the filename, loads it as a dictionary, applies the provided converter function to the data, and returns the processed result.",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\nimport json\n\ndef process_json_file(filename, converter):\n    try:\n        with open(filename, 'r') as file:\n            data = json.load(file)  # Load JSON data\n        return converter(data)  # Apply the converter function\n    except FileNotFoundError:\n        print(f\"Error: The file '{filename}' was not found.\")\n        return None\n    except json.JSONDecodeError:\n        print(f\"Error: The file '{filename}' does not contain valid JSON.\")\n        return None\n```\n"
    },
    {
        "id":"pyx_9",
        "nl":"Write a solution to the following coding problem:\nYou are given a list of integers. Write a function in Python that takes this list as input and returns the sum of all the even numbers in the list.\n\nExample:\nInput: [1, 2, 3, 4, 5, 6]\nOutput: 12 (2 + 4 + 6 = 12)",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\ndef sum_of_even_numbers(nums):\n    even_sum = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\n```\n"
    },
    {
        "id":"pyx_10",
        "nl":"Write a solution to the following coding problem:\nYou are tasked with implementing a function that processes a list of model checkpoints and performs specific operations on them. The function should restore the latest model checkpoint, update the epoch number, and save the current model checkpoint. Additionally, the function should measure the time taken for these operations using a timer.\n\nGiven the code snippet as inspiration, create a Python function that accomplishes the tasks described above. You can assume the existence of necessary functions like `get_ordered_ckpts`, `Timer`, and appropriate TensorFlow operations.",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\nimport time\n\n# Placeholder functions for the purposes of this example\ndef get_ordered_ckpts(ckpt_list):\n    return sorted(ckpt_list)\n\nclass Timer:\n    def __init__(self):\n        self.start_time = None\n        self.end_time = None\n\n    def start(self):\n        self.start_time = time.time()\n\n    def stop(self):\n        self.end_time = time.time()\n        return self.end_time - self.start_time\n\n# Placeholder function to simulate model restoration\ndef restore_model(checkpoint):\n    print(f\"Restoring model from {checkpoint}\")\n\n# Placeholder function to simulate saving the current model checkpoint\ndef save_model(epoch):\n    print(f\"Saving model at epoch {epoch}\")\n\ndef process_checkpoints(checkpoint_list, current_epoch):\n    # Get ordered checkpoints\n    ordered_ckpts = get_ordered_ckpts(checkpoint_list)\n\n    # Handle empty checkpoint list\n    if not ordered_ckpts:\n        print(\"No checkpoints available to restore.\")\n        return\n\n    # Start timing\n    timer = Timer()\n    timer.start()\n\n    # Restore the latest checkpoint\n    latest_checkpoint = ordered_ckpts[-1]\n    restore_model(latest_checkpoint)\n\n    # Update the epoch number\n    updated_epoch = current_epoch + 1\n\n    # Save the current model checkpoint\n    save_model(updated_epoch)\n\n    # Stop timing and print the duration\n    duration = timer.stop()\n    print(f\"Time taken for operations: {duration:.4f} seconds\")\n```\n"
    },
    {
        "id":"pyx_11",
        "nl":"Write a solution to the following coding problem:\nYou are tasked with implementing a function that calculates the accuracy of a machine learning model's predictions. The function takes in the predicted class and the true class for a set of test images and returns the overall accuracy as a percentage. The function should be able to handle multiple test images and their corresponding true classes.\n\nYou are given the following code snippet as inspiration:\n```\ntarget_size = (299, 299) #fixed size for InceptionV3 architecture\nprint('loading model')\nmodel = load_model(model)\nprint('model loading')\nprint('Starting prediction model')\npred_class, true_class = make_prediction(test_dir,test_ann_dir,target_size,model,specific_img)\n```",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\ndef calculate_accuracy(predicted, true):\n    # Check if either list is empty\n    if not predicted or not true:\n        return 0.0\n    \n    # Ensure both lists have the same length\n    if len(predicted) != len(true):\n        raise ValueError(\"The lengths of predicted and true classes must be the same.\")\n    \n    # Count correct predictions\n    correct_predictions = sum(p == t for p, t in zip(predicted, true))\n    \n    # Calculate accuracy\n    accuracy = (correct_predictions \/ len(predicted)) * 100\n    \n    return round(accuracy, 2)\n```\n"
    },
    {
        "id":"pyx_12",
        "nl":"Write a solution to the following coding problem:\nYou are tasked with creating a Python function that takes a list of tuples representing database migrations and returns the final state of the database schema after applying these migrations. Each tuple in the list contains the name of the model being modified, the name of the field being altered, and the new field properties.\n\nExample input:\n```python\nmigrations = [\n    ('supplies_request', 'suppliesrequest', 'provider', {'field_type': 'CharField', 'max_length': 255, 'verbose_name': 'Proveedor'}),\n    ('supplies_request', 'suppliesrequest', 'quantity', {'field_type': 'IntegerField', 'default': 0}),\n]\n```\n\nThe function should process these migrations sequentially and return the final state of the database schema as a dictionary where the keys are model names and the values are dictionaries representing the fields of each model.",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\ndef apply_migrations(migrations):\n    schema = {}\n    \n    for model_name, field_name, new_field_name, field_properties in migrations:\n        if model_name not in schema:\n            schema[model_name] = {}\n        \n        # Update or add the field with its properties\n        schema[model_name][new_field_name] = field_properties\n    \n    return schema\n```\n"
    },
    {
        "id":"pyx_13",
        "nl":"Write a solution to the following coding problem:\nYou are given an array of integers `d` of length `n` and an integer `k`. Your task is to find the maximum sum of any contiguous subarray of `d` that contains exactly `k` distinct elements. In other words, you need to find the maximum sum of a subarray that has exactly `k` unique elements.\n\nFor example, given `d = [1, 2, 3, 1, 2, 3, 4]` and `k = 2`, the subarray `[1, 2, 3, 1, 2]` has the maximum sum of `9` among all subarrays with exactly `2` distinct elements.\n\nWrite a function `max_sum_subarray_k_distinct(d: List[int], k: int) -> int` that takes in the array `d` and the integer `k` and returns the maximum sum of a subarray that contains exactly `k` distinct elements.",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\nfrom typing import List\nfrom collections import defaultdict\n\ndef max_sum_subarray_k_distinct(d: List[int], k: int) -> int:\n    n = len(d)\n    if k <= 0 or n == 0:\n        return 0\n\n    start = 0\n    current_sum = 0\n    max_sum = float('-inf')\n    freq_map = defaultdict(int)\n\n    for end in range(n):\n        current_sum += d[end]\n        freq_map[d[end]] += 1\n\n        # When we have more than k distinct elements, contract from the start\n        while len(freq_map) > k:\n            freq_map[d[start]] -= 1\n            if freq_map[d[start]] == 0:\n                del freq_map[d[start]]\n            current_sum -= d[start]\n            start += 1\n\n        # If we have exactly k distinct elements, we check the max sum\n        if len(freq_map) == k:\n            max_sum = max(max_sum, current_sum)\n\n    return max_sum if max_sum != float('-inf') else 0\n```\n"
    },
    {
        "id":"pyx_14",
        "nl":"Write a solution to the following coding problem:\nYou are tasked with implementing a function that validates the file extension of a given list of filenames. The function should check if each filename ends with a specific extension and return a list of boolean values indicating the validity of the extension for each filename.\n\nSpecifically, you need to create a function `validate_file_extensions(filenames, extension)` where:\n- `filenames` is a list of strings representing filenames.\n- `extension` is a string representing the desired file extension to check for.\n\nThe function should return a list of boolean values, where each boolean value corresponds to whether the respective filename in the input list ends with the specified extension.\n\nFor example, given `filenames = [\"file1.txt\", \"file2.csv\", \"file3.fastq.gz\"]` and `extension = \"fastq.gz\"`, the function should return `[False, False, True]`.",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\ndef validate_file_extensions(filenames, extension):\n    # Initialize an empty list to hold the results\n    results = []\n    \n    # Loop through each filename\n    for filename in filenames:\n        # Check if the filename ends with the specified extension\n        results.append(filename.endswith(extension))\n        \n    return results\n```\n"
    },
    {
        "id":"pyx_15",
        "nl":"Write a solution to the following coding problem:\nYou are tasked with implementing a class method `commit(cls)` that commits the current class and any classes that depend on it. The method should be overridden by subclasses if committing the class also commits other classes automatically. In such cases, the method should return an iterable of all committed classes.\n\nYour task is to create a base class `BaseClass` with the `commit(cls)` method as described above. Then, create a subclass `SubClass` that overrides the `commit(cls)` method to commit both `SubClass` and another class `DependentClass`. Finally, implement a function `commit_all_classes(cls)` that takes a class as input and commits all dependent classes without causing a recursion error.",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\nclass BaseClass:\n    @classmethod\n    def commit(cls):\n        return []\n\nclass DependentClass(BaseClass):\n    pass\n\nclass SubClass(BaseClass):\n    @classmethod\n    def commit(cls):\n        return [cls, DependentClass]\n\ndef commit_all_classes(cls, committed=None):\n    if committed is None:\n        committed = set()\n    \n    if cls in committed:\n        return committed\n    \n    # Commit the current class and record it\n    committed.add(cls)\n    \n    # Get classes that this class commits\n    committed_classes = cls.commit()\n    \n    # Recursively commit all dependent classes\n    for committed_class in committed_classes:\n        commit_all_classes(committed_class, committed)\n    \n    return committed\n```\n"
    },
    {
        "id":"pyx_16",
        "nl":"Write a solution to the following coding problem:\nYou are tasked with implementing a function that manages self-assignable roles in a Discord bot. The function `setupAddSelfrole` takes in parameters `plugin` (representing the bot plugin), `ctx` (context), `name` (name of the role), `role` (role object), and `roles` (dictionary of self-assignable roles). The function performs several checks before allowing a role to be added as a self-assignable role. It checks if the role or role name already exists in the self-assignable roles dictionary, if the role's position is lower than the bot's top role, and if the role is not the default role. If all checks pass, the role is added to the self-assignable roles dictionary and the updated dictionary is saved in the bot's database.\n\nYour task is to implement the `setupAddSelfrole` function in a way that adheres to the described logic and requirements.",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\ndef setupAddSelfrole(plugin, ctx, name, role, roles):\n    # Check if the role already exists by object or by name\n    if role in roles or name in roles:\n        return \"Role already exists in self-assignable roles.\"\n    \n    # Get the bot's top role (assuming plugin has a method to retrieve this)\n    bot_top_role = plugin.bot.top_role\n    \n    # Check if the role's position is lower than the bot's top role\n    if role.position >= bot_top_role.position:\n        return \"Role position is higher than or equal to the bot's top role.\"\n    \n    # Check if the role is the default role (usually the @everyone role)\n    if role.name == \"@everyone\":\n        return \"Cannot add the default role as self-assignable.\"\n    \n    # If all checks pass, add the role\n    roles[name] = role\n    \n    # Save the updated roles in the bot's database\n    # Assuming there's a method in the plugin to save roles\n    plugin.save_roles(roles)\n    \n    return \"Role added successfully.\"\n```\n"
    },
    {
        "id":"pyx_17",
        "nl":"Write a solution to the following coding problem:\nYou are tasked with implementing a Python function that parses command-line arguments for a script that processes files based on specified patterns. The function should handle different scenarios of specifying file patterns through command-line arguments.\n\nWrite a function `parse_args(args)` that takes a list of arguments `args` and returns an object with a `pattern` attribute that contains a list of file patterns specified in the arguments. The function should support the following command-line argument format:\n- Each file pattern is specified using the `--pattern` flag followed by the pattern itself.\n- The function should handle cases where multiple `--pattern` flags are provided, allowing for multiple file patterns to be specified.\n\nFor example, the function should behave as follows:\n- When no `--pattern` flag is provided, the function should default to `[\"*.md\"]`.\n- When a single `--pattern` flag is provided, the function should return a list containing that pattern.\n- When multiple `--pattern` flags are provided, the function should return a list containing all specified patterns in the order they were provided.",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\nclass ArgumentParserResult:\n    def __init__(self, patterns):\n        self.pattern = patterns\n\ndef parse_args(args):\n    patterns = []\n    i = 0\n    while i < len(args):\n        if args[i] == '--pattern':\n            if i + 1 < len(args):\n                # Add the pattern if the next argument exists\n                patterns.append(args[i + 1])\n                i += 1  # Skip the next argument as it's the pattern\n            else:\n                # Handle case where --pattern is provided without a pattern\n                raise ValueError(\"No pattern provided after '--pattern'\")\n        i += 1\n\n    # Default to [\"*.md\"] if no patterns were found\n    if not patterns:\n        patterns = [\"*.md\"]\n\n    return ArgumentParserResult(patterns)\n```\n"
    },
    {
        "id":"pyx_18",
        "nl":"Write a solution to the following coding problem:\nYou are tasked with implementing a data renaming utility function that handles renaming operations for either addresses or keys in a data store. The function should check if the old data identifier exists in the address book or key store, and based on the type of identifier, rename the corresponding entry to the new data identifier. If the renaming operation is successful, the function should return 0; otherwise, it should return 1.\n\nYou need to complete the implementation of the `rename_data` function by following the logic outlined in the code snippet provided earlier and handling the different scenarios appropriately.",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\ndef rename_data(data_store, old_identifier, new_identifier):\n    # Check if the old identifier exists\n    if old_identifier not in data_store:\n        return 1  # Old identifier not found\n    \n    # Check if the new identifier already exists\n    if new_identifier in data_store:\n        return 1  # Cannot rename to an existing identifier\n    \n    # Perform the renaming\n    data_store[new_identifier] = data_store.pop(old_identifier)  # Rename entry\n    return 0  # Success\n```\n"
    },
    {
        "id":"pyx_19",
        "nl":"Write a solution to the following coding problem:\nYou are tasked with implementing a function that finds the longest common prefix string amongst an array of strings. If there is no common prefix, the function should return an empty string.\n\nFor example, given the input `[\"flower\", \"flow\", \"flight\"]`, the function should return `\"fl\"`, as the longest common prefix is `\"fl\"`.\n\nImplement the function `longest_common_prefix(strs: List[str]) -> str` that takes a list of strings as input and returns the longest common prefix string.",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\nfrom typing import List\n\ndef longest_common_prefix(strs: List[str]) -> str:\n    if not strs:\n        return \"\"\n    \n    # Start with the prefix being the first string\n    prefix = strs[0]\n    \n    for i in range(1, len(strs)):\n        # Compare the prefix with the current string\n        while strs[i][:len(prefix)] != prefix:\n            # Reduce the prefix\n            prefix = prefix[:-1]\n            # If the prefix is empty, return immediately\n            if not prefix:\n                return \"\"\n    \n    return prefix\n```\n"
    },
    {
        "id":"pyx_20",
        "nl":"Write a solution to the following coding problem:\nYou are given a dataset `xx` containing features and their corresponding binary labels `y_actual`. Your task is to implement a function that calculates the accuracy of a binary classifier's predictions based on a given set of predicted labels `y_pred`. The accuracy is defined as the proportion of correct predictions made by the classifier.\n\nYou need to create a Python function `calculate_accuracy(y_actual, y_pred)` that takes in two numpy arrays:\n- `y_actual`: An array containing the true binary labels (0 or 1) for each data point.\n- `y_pred`: An array containing the predicted binary labels (0 or 1) for each data point.\n\nThe function should return the accuracy of the classifier's predictions as a floating-point number between 0 and 1.\n\nExample:\nFor `y_actual = np.array([1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1])` and `y_pred = np.array([1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])`, the accuracy should be calculated as follows:\n- Total data points: 12\n- Correct predictions: 9 (indices 0, 1, 2, 3, 4, 5, 10, 11)\n- Accuracy: 9\/12 = 0.75",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\nimport numpy as np\n\ndef calculate_accuracy(y_actual, y_pred):\n    # Check if the input arrays are of the same length\n    if len(y_actual) != len(y_pred):\n        raise ValueError(\"The length of y_actual and y_pred must be the same.\")\n    \n    # Handle the case of empty arrays\n    if len(y_actual) == 0:\n        return 0.0\n    \n    # Count correct predictions\n    correct_predictions = np.sum(y_actual == y_pred)\n    \n    # Calculate accuracy\n    accuracy = correct_predictions \/ len(y_actual)\n    return accuracy\n```\n"
    },
    {
        "id":"pyx_21",
        "nl":"Write a solution to the following coding problem:\nYou are tasked with creating a Python program that counts the spikes generated by each neuron based on spike records stored in a specific folder. The spike records are located in the '..\/result' folder, and each file in the folder represents the spike record for a neuron. Your program should read these spike records, count the spikes for each neuron, and then display the spike count for each neuron.",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\nimport os\n\ndef count_neuron_spikes(directory='..\/result'):\n    spike_counts = {}\n    \n    # Check if directory exists\n    if not os.path.exists(directory):\n        print(f\"Directory '{directory}' does not exist.\")\n        return spike_counts\n    \n    # Iterate over files in the directory\n    for filename in os.listdir(directory):\n        if filename.endswith('.txt'):  # assuming spike files have .txt extension\n            neuron_name = filename[:-4]  # remove the '.txt' suffix\n            try:\n                with open(os.path.join(directory, filename), 'r') as file:\n                    spikes = file.readlines()\n                    spike_counts[neuron_name] = len(spikes)\n            except Exception as e:\n                print(f\"Error reading file '{filename}': {e}\")\n                spike_counts[neuron_name] = 0  # count as 0 if there's an error\n\n    return spike_counts\n\n# Example of calling the function\nif __name__ == \"__main__\":\n    results = count_neuron_spikes()\n    for neuron, count in results.items():\n        print(f\"{neuron}: {count} spikes\")\n```\n"
    },
    {
        "id":"pyx_22",
        "nl":"Write a solution to the following coding problem:\nYou are required to implement a function that processes data related to anatomic zones, posture, solar zenith angle, and a model equation to calculate a specific value. The given code snippet hints at replacing anatomic zone names, looking up values from a table, calculating the minimal solar zenith angle, and applying a model equation to calculate a final result. Your task is to complete the missing parts and implement the necessary functions to achieve the desired outcome.\n\nYou need to:\n1. Implement a function to replace anatomic zone names using the provided dictionary `Anatomic_zone_synonyms`.\n2. Implement a function to lookup values from a table based on anatomic zone and posture.\n3. Implement a function to calculate the minimal solar zenith angle for a given date and latitude.\n4. Implement the `ER_Vernez_model_equation` function based on the provided equation to calculate the ER value.",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\nimport math\nfrom datetime import datetime\n\n# Synonym dictionary for anatomical zones\nAnatomic_zone_synonyms = {\n    \"zone1\": \"Anatomic Zone 1\",\n    \"zone2\": \"Anatomic Zone 2\",\n    # Add more mappings as needed\n}\n\n# Example lookup table for anatomical zones and postures\nlookup_table = {\n    (\"Anatomic Zone 1\", \"standing\"): 10,\n    (\"Anatomic Zone 1\", \"sitting\"): 8,\n    (\"Anatomic Zone 2\", \"standing\"): 12,\n    (\"Anatomic Zone 2\", \"sitting\"): 9,\n    # Add more mappings as needed\n}\n\ndef replace_anatomic_zone_name(zone_name):\n    \"\"\"Replace the anatomical zone name using the synonyms dictionary.\"\"\"\n    return Anatomic_zone_synonyms.get(zone_name, zone_name)\n\ndef lookup_value(anatomic_zone, posture):\n    \"\"\"Lookup the value from the table based on anatomic zone and posture.\"\"\"\n    return lookup_table.get((anatomic_zone, posture), None)\n\ndef calculate_minimal_solar_zenith_angle(date, latitude):\n    \"\"\"Calculate the minimal solar zenith angle for a given date and latitude.\"\"\"\n    # Convert date to day of the year\n    day_of_year = date.timetuple().tm_yday\n    # Calculate solar declination (approximation)\n    declination = 23.44 * math.sin(math.radians((360\/365) * (day_of_year - 81)))\n    # Calculate the solar zenith angle\n    solar_zenith_angle = 90 - (latitude + declination)\n    return max(solar_zenith_angle, 0)  # Cannot be negative\n\ndef ER_Vernez_model_equation(value1, value2, angle):\n    \"\"\"Calculate the ER value using the model equation.\"\"\"\n    return (value1 + value2) * math.cos(math.radians(angle))\n\n# Example usage\nif __name__ == \"__main__\":\n    zone_name = \"zone1\"\n    posture = \"standing\"\n    date = datetime(2023, 6, 21)  # Summer solstice\n    latitude = 45  # Example latitude\n\n    replaced_zone = replace_anatomic_zone_name(zone_name)\n    value = lookup_value(replaced_zone, posture)\n    minimal_angle = calculate_minimal_solar_zenith_angle(date, latitude)\n\n    if value is not None:\n        er_value = ER_Vernez_model_equation(value, value, minimal_angle)\n        print(f\"ER Value: {er_value}\")\n    else:\n        print(\"Value not found for the specified anatomic zone and posture.\")\n```\n"
    },
    {
        "id":"pyx_23",
        "nl":"Write a solution to the following coding problem:\nYou are tasked with implementing a function that calculates the total number of valid test cases for a given scenario. The scenario involves testing different data point types (DPTs) used in KNX systems. Each data point type has specific characteristics, and the function needs to determine the total number of valid test cases based on these characteristics.\n\nGiven the following information:\n- There are three data point types: DPTPercentV8, DPTSignedRelativeValue, and DPTValue1Count.\n- Each data point type has a specific range of valid values.\n- The function should calculate the total number of valid test cases for all data point types combined.\n\nWrite a function `calculate_total_test_cases()` that takes no arguments and returns the total number of valid test cases for the given scenario.\n\nExample:\nFor DPTPercentV8, the valid range is 0-255. For DPTSignedRelativeValue, the valid range is -128 to 127. For DPTValue1Count, the valid range is 0-255. The total number of valid test cases for all data point types combined is 640.",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\ndef calculate_total_test_cases():\n    # Define the ranges for each data point type\n    dpt_percent_v8_range = (0, 255)  # 256 valid values\n    dpt_signed_relative_value_range = (-128, 127)  # 256 valid values\n    dpt_value_1_count_range = (0, 255)  # 256 valid values\n\n    # Calculate the number of valid values for each data point type\n    valid_count_dpt_percent_v8 = dpt_percent_v8_range[1] - dpt_percent_v8_range[0] + 1\n    valid_count_dpt_signed_relative_value = dpt_signed_relative_value_range[1] - dpt_signed_relative_value_range[0] + 1\n    valid_count_dpt_value_1_count = dpt_value_1_count_range[1] - dpt_value_1_count_range[0] + 1\n\n    # Total valid test cases\n    total_valid_test_cases = (valid_count_dpt_percent_v8 + \n                               valid_count_dpt_signed_relative_value + \n                               valid_count_dpt_value_1_count)\n    \n    return total_valid_test_cases\n```\n"
    },
    {
        "id":"pyx_24",
        "nl":"Write a solution to the following coding problem:\nYou are tasked with implementing a simple program that simulates a robot's movements based on turning commands. The robot starts facing the north direction (0 degrees) and can turn either to a specific angle or by a certain number of degrees. The provided code snippet includes two functions: `turnTo(deg)` to turn the robot directly to a certain angle and `turn(deg)` to turn the robot by a certain number of degrees.\n\nYour task is to write a Python program that utilizes these functions to simulate a series of turning commands and determine the final direction the robot is facing after executing all the commands. The turning commands are represented as a list of tuples, where each tuple consists of two elements: the type of turn ('to' for turning to a specific angle or 'by' for turning by a certain number of degrees) and the value of the turn.\n\nFor example, given the list of turning commands:\n```\nturning_commands = [('to', 90), ('by', 45), ('by', -30), ('to', 180)]\n```\n\nYou need to determine the final direction the robot is facing after executing these commands.",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\ndef turnTo(current_direction, deg):\n    return deg % 360\n\ndef turn(current_direction, deg):\n    return (current_direction + deg) % 360\n\ndef simulate_robot(turning_commands):\n    current_direction = 0  # Starting facing north (0 degrees)\n    \n    for command in turning_commands:\n        if command[0] == 'to':\n            current_direction = turnTo(current_direction, command[1])\n        elif command[0] == 'by':\n            current_direction = turn(current_direction, command[1])\n    \n    return current_direction\n```\n"
    },
    {
        "id":"pyx_25",
        "nl":"Write a solution to the following coding problem:\nYou are tasked with implementing a Python function that processes a list of configuration options related to a scheduler. Each option is represented as a dictionary with keys \"name\", \"default\", and \"description\". The function should filter out any deprecated options and return a list of names of the remaining valid options.\n\nExample input:\n```python\noptions = [\n    {\"name\": \"max_gigabytes\", \"default\": 10000, \"description\": \"This configure option has been deprecated.\"},\n    {\"name\": \"min_gigabytes\", \"default\": 5000, \"description\": \"Minimum number of volume gigabytes.\"},\n    {\"name\": \"max_instances\", \"default\": 10, \"description\": \"Maximum number of instances per host.\"}\n]\n```\n\nExpected output:\n```\n['min_gigabytes', 'max_instances']\n```",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\ndef filter_deprecated_options(options):\n    valid_options = []\n    for option in options:\n        # Check if \"deprecated\" is in the description (case insensitive)\n        if \"deprecated\" not in option[\"description\"].lower():\n            valid_options.append(option[\"name\"])\n    return valid_options\n```\n"
    },
    {
        "id":"pyx_26",
        "nl":"Write a solution to the following coding problem:\nYou are tasked with creating a Python script that processes command-line arguments for a machine learning experiment setup. The script should parse the provided arguments and handle default values for optional arguments. The arguments include experiment directory, file paths, model configurations, training parameters, and a flag for CPU usage.\n\nYour task is to implement a function that takes the command-line arguments as input and returns a dictionary containing the parsed arguments with their corresponding values. Ensure that the function sets default values for any arguments that are not provided.\n\nExample input:\n```\n--experiment_dir experiments\/01 --pretrained_name_or_path bert-base-uncased --num_epochs 15 --batch_size 16 --use_cpu\n```\n\nExpected output:\n```\n{\n    'experiment_dir': 'experiments\/01',\n    'paraphrase_path': '\/home\/matej\/Documents\/paraphrase-nli\/experiments\/SciTail_NLI\/PARAPHRASE_IDENTIFICATION\/id-scitail-roberta-base-argmax\/all_para_id.csv',\n    'pretrained_name_or_path': 'bert-base-uncased',\n    'model_type': 'gpt2',\n    'num_epochs': 15,\n    'max_seq_len': 79,\n    'batch_size': 16,\n    'learning_rate': 2e-5,\n    'early_stopping_rounds': 5,\n    'validate_every_n_examples': 5000,\n    'random_seed': 17,\n    'use_cpu': True\n}\n```",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\ndef parse_arguments(args):\n    # Default values\n    parsed_args = {\n        'experiment_dir': None,\n        'paraphrase_path': '\/home\/matej\/Documents\/paraphrase-nli\/experiments\/SciTail_NLI\/PARAPHRASE_IDENTIFICATION\/id-scitail-roberta-base-argmax\/all_para_id.csv',\n        'pretrained_name_or_path': None,\n        'model_type': 'gpt2',\n        'num_epochs': 10,\n        'max_seq_len': 79,\n        'batch_size': 32,\n        'learning_rate': 2e-5,\n        'early_stopping_rounds': 5,\n        'validate_every_n_examples': 5000,\n        'random_seed': 17,\n        'use_cpu': False\n    }\n\n    # Iterate through the command line arguments\n    i = 0\n    while i < len(args):\n        if args[i] == '--experiment_dir':\n            i += 1\n            parsed_args['experiment_dir'] = args[i]\n        elif args[i] == '--pretrained_name_or_path':\n            i += 1\n            parsed_args['pretrained_name_or_path'] = args[i]\n        elif args[i] == '--num_epochs':\n            i += 1\n            parsed_args['num_epochs'] = int(args[i])\n        elif args[i] == '--batch_size':\n            i += 1\n            parsed_args['batch_size'] = int(args[i])\n        elif args[i] == '--use_cpu':\n            parsed_args['use_cpu'] = True\n        # Add more arguments as necessary\n        i += 1\n\n    # Check for required arguments\n    if parsed_args['experiment_dir'] is None:\n        raise ValueError(\"Missing required argument: --experiment_dir\")\n    if parsed_args['pretrained_name_or_path'] is None:\n        raise ValueError(\"Missing required argument: --pretrained_name_or_path\")\n\n    return parsed_args\n```\n"
    },
    {
        "id":"pyx_27",
        "nl":"Write a solution to the following coding problem:\nYou are tasked with implementing a function that takes a list of integers as input and returns the maximum sum that can be obtained by selecting a contiguous subarray within the input list. The function should efficiently handle both positive and negative integers.\n\nFor example, given the input list: `[-2, 1, -3, 4, -1, 2, 1, -5, 4]`, the contiguous subarray with the maximum sum is `[4, -1, 2, 1]`, resulting in a maximum sum of `6`.\n\nImplement the function `max_subarray_sum(nums: List[int]) -> int` to solve this problem.",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\nfrom typing import List\n\ndef max_subarray_sum(nums: List[int]) -> int:\n    if not nums:  # Handle the empty list case\n        return 0\n\n    max_current = max_global = nums[0]\n    \n    for num in nums[1:]:\n        max_current = max(num, max_current + num)\n        if max_current > max_global:\n            max_global = max_current\n\n    return max_global\n```\n"
    },
    {
        "id":"pyx_28",
        "nl":"Write a solution to the following coding problem:\nGiven the provided code snippet, you are tasked with designing a Python function that can generate a specific file path based on the input provided. The function should take in two parameters: `base_path` (a string representing the base path) and `file_name` (a string representing the file name). The function should return the absolute path by concatenating the `base_path` and `file_name` while handling any potential path separators appropriately.\n\nFor example, if the function is called with `base_path = \"trained_models\"` and `file_name = \"gru.hdf5\"`, it should return the absolute path `\"trained_models\/gru.hdf5\"`.\n\nYour task is to implement the `absolute_path` function that fulfills the requirements mentioned above.",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\nimport os\n\ndef absolute_path(base_path: str, file_name: str) -> str:\n    # Normalize path separators for the current operating system\n    base_path = base_path.rstrip(os.path.sep)\n    file_name = file_name.lstrip(os.path.sep)\n    \n    return f\"{base_path}{os.path.sep}{file_name}\"\n```\n"
    },
    {
        "id":"pyx_29",
        "nl":"Write a solution to the following coding problem:\nYou are tasked with implementing a Python class that simulates a simple version of a \"To-Do List\" application. The class should have the following functionalities:\n1. Add a new task to the to-do list.\n2. Mark a task as completed.\n3. Display all tasks in the to-do list.\n4. Display only the incomplete tasks in the to-do list.\n\nYou should create a class `ToDoList` with the following methods:\n- `add_task(task_name)`: Adds a new task with the given `task_name` to the to-do list.\n- `complete_task(task_name)`: Marks the task with `task_name` as completed.\n- `display_all_tasks()`: Displays all tasks in the to-do list.\n- `display_incomplete_tasks()`: Displays only the incomplete tasks in the to-do list.\n\nYou can assume that each task has a unique name. Tasks can be marked as completed only once.",
        "fwd_mnl":"",
        "bwd_mnl":"",
        "response":"\n```python\nclass ToDoList:\n    def __init__(self):\n        self.tasks = {}\n\n    def add_task(self, task_name):\n        if task_name not in self.tasks:\n            self.tasks[task_name] = False  # Task is initially incomplete\n        else:\n            print(f\"Task '{task_name}' already exists.\")\n\n    def complete_task(self, task_name):\n        if task_name in self.tasks:\n            self.tasks[task_name] = True  # Mark task as completed\n        else:\n            print(f\"Task '{task_name}' not found.\")\n\n    def display_all_tasks(self):\n        for task, completed in self.tasks.items():\n            status = \"Completed\" if completed else \"Incomplete\"\n            print(f\"{task}: {status}\")\n\n    def display_incomplete_tasks(self):\n        incomplete_tasks = {task: completed for task, completed in self.tasks.items() if not completed}\n        for task in incomplete_tasks:\n            print(task)\n```\n"
    }
]