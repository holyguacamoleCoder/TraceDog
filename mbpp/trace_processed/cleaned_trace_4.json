[
  {
    "code": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos",
    "entry_point": "sequential_search",
    "input": [
      [
        12,
        32,
        45,
        62,
        35,
        47,
        44,
        61
      ],
      61
    ],
    "output": "(True, 7)",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "dlist": [
            12,
            32,
            45,
            62,
            35,
            47,
            44,
            61
          ],
          "item": 61
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "pos": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "found": false
        }
      },
      {
        "line": 8,
        "step": "4~10",
        "action": "LOOP",
        "vars": {
          "pos": "1→7"
        }
      },
      {
        "line": 6,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "found": true
        }
      },
      {
        "line": 9,
        "step": 12,
        "action": "RETURN",
        "vars": {
          "__return__": "(True, 7)"
        }
      }
    ],
    "id": 835,
    "task_id": 280,
    "exist_function": [
      "sequential_search"
    ]
  },
  {
    "code": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos",
    "entry_point": "sequential_search",
    "input": [
      [
        9,
        10,
        17,
        19,
        22,
        39,
        48,
        56
      ],
      48
    ],
    "output": "(True, 6)",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "dlist": [
            9,
            10,
            17,
            19,
            22,
            39,
            48,
            56
          ],
          "item": 48
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "pos": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "found": false
        }
      },
      {
        "line": 8,
        "step": "4~9",
        "action": "LOOP",
        "vars": {
          "pos": "1→6"
        }
      },
      {
        "line": 6,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "found": true
        }
      },
      {
        "line": 9,
        "step": 11,
        "action": "RETURN",
        "vars": {
          "__return__": "(True, 6)"
        }
      }
    ],
    "id": 836,
    "task_id": 280,
    "exist_function": [
      "sequential_search"
    ]
  },
  {
    "code": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True",
    "entry_point": "validate",
    "input": [
      1234
    ],
    "output": true,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 1234
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "temp": 1234
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 10,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "temp": 123
        }
      },
      {
        "line": 10,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "temp": 12
        }
      },
      {
        "line": 10,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "temp": 1
        }
      },
      {
        "line": 10,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "temp": 0
        }
      },
      {
        "line": 2,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 3,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "temp": 1234
        }
      },
      {
        "line": 10,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "temp": 123
        }
      },
      {
        "line": 10,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "temp": 12
        }
      },
      {
        "line": 10,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "temp": 1
        }
      },
      {
        "line": 7,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "count": 1
        }
      },
      {
        "line": 10,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "temp": 0
        }
      },
      {
        "line": 2,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 3,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "temp": 1234
        }
      },
      {
        "line": 4,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 10,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "temp": 123
        }
      },
      {
        "line": 10,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "temp": 12
        }
      },
      {
        "line": 7,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "count": 1
        }
      },
      {
        "line": 10,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "temp": 1
        }
      },
      {
        "line": 10,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "temp": 0
        }
      },
      {
        "line": 2,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 3,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "temp": 1234
        }
      },
      {
        "line": 4,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 10,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "temp": 123
        }
      },
      {
        "line": 7,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "count": 1
        }
      },
      {
        "line": 10,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "temp": 12
        }
      },
      {
        "line": 10,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "temp": 1
        }
      },
      {
        "line": 10,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "temp": 0
        }
      },
      {
        "line": 2,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 3,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "temp": 1234
        }
      },
      {
        "line": 4,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 7,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "count": 1
        }
      },
      {
        "line": 10,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "temp": 123
        }
      },
      {
        "line": 10,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "temp": 12
        }
      },
      {
        "line": 10,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "temp": 1
        }
      },
      {
        "line": 10,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "temp": 0
        }
      },
      {
        "line": 2,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 3,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "temp": 1234
        }
      },
      {
        "line": 4,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 10,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "temp": 123
        }
      },
      {
        "line": 10,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "temp": 12
        }
      },
      {
        "line": 10,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "temp": 1
        }
      },
      {
        "line": 10,
        "step": 46,
        "action": "EXECUTE",
        "vars": {
          "temp": 0
        }
      },
      {
        "line": 2,
        "step": 47,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 3,
        "step": 48,
        "action": "EXECUTE",
        "vars": {
          "temp": 1234
        }
      },
      {
        "line": 10,
        "step": 49,
        "action": "EXECUTE",
        "vars": {
          "temp": 123
        }
      },
      {
        "line": 10,
        "step": 50,
        "action": "EXECUTE",
        "vars": {
          "temp": 12
        }
      },
      {
        "line": 10,
        "step": 51,
        "action": "EXECUTE",
        "vars": {
          "temp": 1
        }
      },
      {
        "line": 10,
        "step": 52,
        "action": "EXECUTE",
        "vars": {
          "temp": 0
        }
      },
      {
        "line": 2,
        "step": 53,
        "action": "EXECUTE",
        "vars": {
          "i": 7
        }
      },
      {
        "line": 3,
        "step": 54,
        "action": "EXECUTE",
        "vars": {
          "temp": 1234
        }
      },
      {
        "line": 10,
        "step": 55,
        "action": "EXECUTE",
        "vars": {
          "temp": 123
        }
      },
      {
        "line": 10,
        "step": 56,
        "action": "EXECUTE",
        "vars": {
          "temp": 12
        }
      },
      {
        "line": 10,
        "step": 57,
        "action": "EXECUTE",
        "vars": {
          "temp": 1
        }
      },
      {
        "line": 10,
        "step": 58,
        "action": "EXECUTE",
        "vars": {
          "temp": 0
        }
      },
      {
        "line": 2,
        "step": 59,
        "action": "EXECUTE",
        "vars": {
          "i": 8
        }
      },
      {
        "line": 3,
        "step": 60,
        "action": "EXECUTE",
        "vars": {
          "temp": 1234
        }
      },
      {
        "line": 10,
        "step": 61,
        "action": "EXECUTE",
        "vars": {
          "temp": 123
        }
      },
      {
        "line": 10,
        "step": 62,
        "action": "EXECUTE",
        "vars": {
          "temp": 12
        }
      },
      {
        "line": 10,
        "step": 63,
        "action": "EXECUTE",
        "vars": {
          "temp": 1
        }
      },
      {
        "line": 10,
        "step": 64,
        "action": "EXECUTE",
        "vars": {
          "temp": 0
        }
      },
      {
        "line": 2,
        "step": 65,
        "action": "EXECUTE",
        "vars": {
          "i": 9
        }
      },
      {
        "line": 3,
        "step": 66,
        "action": "EXECUTE",
        "vars": {
          "temp": 1234
        }
      },
      {
        "line": 10,
        "step": 67,
        "action": "EXECUTE",
        "vars": {
          "temp": 123
        }
      },
      {
        "line": 10,
        "step": 68,
        "action": "EXECUTE",
        "vars": {
          "temp": 12
        }
      },
      {
        "line": 10,
        "step": 69,
        "action": "EXECUTE",
        "vars": {
          "temp": 1
        }
      },
      {
        "line": 10,
        "step": 70,
        "action": "EXECUTE",
        "vars": {
          "temp": 0
        }
      },
      {
        "line": 11,
        "step": 71,
        "action": "RETURN",
        "vars": {
          "__return__": true
        }
      }
    ],
    "id": 843,
    "task_id": 283,
    "exist_function": [
      "validate"
    ]
  },
  {
    "code": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True",
    "entry_point": "validate",
    "input": [
      321
    ],
    "output": true,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 321
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "temp": 321
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 10,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "temp": 32
        }
      },
      {
        "line": 10,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "temp": 3
        }
      },
      {
        "line": 10,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "temp": 0
        }
      },
      {
        "line": 2,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 3,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "temp": 321
        }
      },
      {
        "line": 7,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "count": 1
        }
      },
      {
        "line": 10,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "temp": 32
        }
      },
      {
        "line": 10,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "temp": 3
        }
      },
      {
        "line": 10,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "temp": 0
        }
      },
      {
        "line": 2,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 3,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "temp": 321
        }
      },
      {
        "line": 4,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 10,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "temp": 32
        }
      },
      {
        "line": 7,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "count": 1
        }
      },
      {
        "line": 10,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "temp": 3
        }
      },
      {
        "line": 10,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "temp": 0
        }
      },
      {
        "line": 2,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 3,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "temp": 321
        }
      },
      {
        "line": 4,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 10,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "temp": 32
        }
      },
      {
        "line": 10,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "temp": 3
        }
      },
      {
        "line": 7,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "count": 1
        }
      },
      {
        "line": 10,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "temp": 0
        }
      },
      {
        "line": 2,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 3,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "temp": 321
        }
      },
      {
        "line": 4,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 10,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "temp": 32
        }
      },
      {
        "line": 10,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "temp": 3
        }
      },
      {
        "line": 10,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "temp": 0
        }
      },
      {
        "line": 2,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 3,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "temp": 321
        }
      },
      {
        "line": 10,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "temp": 32
        }
      },
      {
        "line": 10,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "temp": 3
        }
      },
      {
        "line": 10,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "temp": 0
        }
      },
      {
        "line": 2,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 3,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "temp": 321
        }
      },
      {
        "line": 10,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "temp": 32
        }
      },
      {
        "line": 10,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "temp": 3
        }
      },
      {
        "line": 10,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "temp": 0
        }
      },
      {
        "line": 2,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "i": 7
        }
      },
      {
        "line": 3,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "temp": 321
        }
      },
      {
        "line": 10,
        "step": 46,
        "action": "EXECUTE",
        "vars": {
          "temp": 32
        }
      },
      {
        "line": 10,
        "step": 47,
        "action": "EXECUTE",
        "vars": {
          "temp": 3
        }
      },
      {
        "line": 10,
        "step": 48,
        "action": "EXECUTE",
        "vars": {
          "temp": 0
        }
      },
      {
        "line": 2,
        "step": 49,
        "action": "EXECUTE",
        "vars": {
          "i": 8
        }
      },
      {
        "line": 3,
        "step": 50,
        "action": "EXECUTE",
        "vars": {
          "temp": 321
        }
      },
      {
        "line": 10,
        "step": 51,
        "action": "EXECUTE",
        "vars": {
          "temp": 32
        }
      },
      {
        "line": 10,
        "step": 52,
        "action": "EXECUTE",
        "vars": {
          "temp": 3
        }
      },
      {
        "line": 10,
        "step": 53,
        "action": "EXECUTE",
        "vars": {
          "temp": 0
        }
      },
      {
        "line": 2,
        "step": 54,
        "action": "EXECUTE",
        "vars": {
          "i": 9
        }
      },
      {
        "line": 3,
        "step": 55,
        "action": "EXECUTE",
        "vars": {
          "temp": 321
        }
      },
      {
        "line": 10,
        "step": 56,
        "action": "EXECUTE",
        "vars": {
          "temp": 32
        }
      },
      {
        "line": 10,
        "step": 57,
        "action": "EXECUTE",
        "vars": {
          "temp": 3
        }
      },
      {
        "line": 10,
        "step": 58,
        "action": "EXECUTE",
        "vars": {
          "temp": 0
        }
      },
      {
        "line": 11,
        "step": 59,
        "action": "RETURN",
        "vars": {
          "__return__": true
        }
      }
    ],
    "id": 845,
    "task_id": 283,
    "exist_function": [
      "validate"
    ]
  },
  {
    "code": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far",
    "entry_point": "max_sub_array_sum_repeated",
    "input": [
      [
        10,
        20,
        -30,
        -1
      ],
      4,
      3
    ],
    "output": 30,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "a": [
            10,
            20,
            -30,
            -1
          ],
          "n": 4,
          "k": 3
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": -2147483648
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 0
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 10
        }
      },
      {
        "line": 7,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 10
        }
      },
      {
        "line": 4,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 5,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 30
        }
      },
      {
        "line": 7,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 30
        }
      },
      {
        "line": 4,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 5,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 0
        }
      },
      {
        "line": 4,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 5,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": -1
        }
      },
      {
        "line": 9,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 0
        }
      },
      {
        "line": 4,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 5,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 10
        }
      },
      {
        "line": 4,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 5,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 30
        }
      },
      {
        "line": 4,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 5,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 0
        }
      },
      {
        "line": 4,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "i": 7
        }
      },
      {
        "line": 5,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": -1
        }
      },
      {
        "line": 9,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 0
        }
      },
      {
        "line": 4,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "i": 8
        }
      },
      {
        "line": 5,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 10
        }
      },
      {
        "line": 4,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "i": 9
        }
      },
      {
        "line": 5,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 30
        }
      },
      {
        "line": 4,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "i": 10
        }
      },
      {
        "line": 5,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 0
        }
      },
      {
        "line": 4,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "i": 11
        }
      },
      {
        "line": 5,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": -1
        }
      },
      {
        "line": 9,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 0
        }
      },
      {
        "line": 10,
        "step": 33,
        "action": "RETURN",
        "vars": {
          "__return__": 30
        }
      }
    ],
    "id": 852,
    "task_id": 286,
    "exist_function": [
      "max_sub_array_sum_repeated"
    ]
  },
  {
    "code": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far",
    "entry_point": "max_sub_array_sum_repeated",
    "input": [
      [
        -1,
        10,
        20
      ],
      3,
      2
    ],
    "output": 59,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "a": [
            -1,
            10,
            20
          ],
          "n": 3,
          "k": 2
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": -2147483648
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 0
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": -1
        }
      },
      {
        "line": 7,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": -1
        }
      },
      {
        "line": 9,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 0
        }
      },
      {
        "line": 4,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 5,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 10
        }
      },
      {
        "line": 7,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 10
        }
      },
      {
        "line": 4,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 5,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 30
        }
      },
      {
        "line": 7,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 30
        }
      },
      {
        "line": 4,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 5,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 29
        }
      },
      {
        "line": 4,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 5,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 39
        }
      },
      {
        "line": 7,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 39
        }
      },
      {
        "line": 4,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 5,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 59
        }
      },
      {
        "line": 7,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 59
        }
      },
      {
        "line": 10,
        "step": 22,
        "action": "RETURN",
        "vars": {
          "__return__": 59
        }
      }
    ],
    "id": 853,
    "task_id": 286,
    "exist_function": [
      "max_sub_array_sum_repeated"
    ]
  },
  {
    "code": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far",
    "entry_point": "max_sub_array_sum_repeated",
    "input": [
      [
        -1,
        -2,
        -3
      ],
      3,
      3
    ],
    "output": -1,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "a": [
            -1,
            -2,
            -3
          ],
          "n": 3,
          "k": 3
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": -2147483648
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 0
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": -1
        }
      },
      {
        "line": 7,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": -1
        }
      },
      {
        "line": 9,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 0
        }
      },
      {
        "line": 4,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 5,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": -2
        }
      },
      {
        "line": 9,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 0
        }
      },
      {
        "line": 4,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 5,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": -3
        }
      },
      {
        "line": 9,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 0
        }
      },
      {
        "line": 4,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 5,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": -1
        }
      },
      {
        "line": 9,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 0
        }
      },
      {
        "line": 4,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 5,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": -2
        }
      },
      {
        "line": 9,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 0
        }
      },
      {
        "line": 4,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 5,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": -3
        }
      },
      {
        "line": 9,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 0
        }
      },
      {
        "line": 4,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 5,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": -1
        }
      },
      {
        "line": 9,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 0
        }
      },
      {
        "line": 4,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "i": 7
        }
      },
      {
        "line": 5,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": -2
        }
      },
      {
        "line": 9,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 0
        }
      },
      {
        "line": 4,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "i": 8
        }
      },
      {
        "line": 5,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": -3
        }
      },
      {
        "line": 9,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 0
        }
      },
      {
        "line": 10,
        "step": 32,
        "action": "RETURN",
        "vars": {
          "__return__": -1
        }
      }
    ],
    "id": 854,
    "task_id": 286,
    "exist_function": [
      "max_sub_array_sum_repeated"
    ]
  },
  {
    "code": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element",
    "entry_point": "modular_inverse",
    "input": [
      [
        1,
        6,
        4,
        5
      ],
      4,
      7
    ],
    "output": 2,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "arr": [
            1,
            6,
            4,
            5
          ],
          "N": 4,
          "P": 7
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "current_element": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "current_element": 1
        }
      },
      {
        "line": 3,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 5,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "current_element": 2
        }
      },
      {
        "line": 3,
        "step": "7~8",
        "action": "LOOP",
        "vars": {
          "i": "2→3"
        }
      },
      {
        "line": 6,
        "step": 9,
        "action": "RETURN",
        "vars": {
          "__return__": 2
        }
      }
    ],
    "id": 858,
    "task_id": 288,
    "exist_function": [
      "modular_inverse"
    ]
  },
  {
    "code": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element",
    "entry_point": "modular_inverse",
    "input": [
      [
        1,
        3,
        8,
        12,
        12
      ],
      5,
      13
    ],
    "output": 3,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "arr": [
            1,
            3,
            8,
            12,
            12
          ],
          "N": 5,
          "P": 13
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "current_element": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "current_element": 1
        }
      },
      {
        "line": 3,
        "step": "5~7",
        "action": "LOOP",
        "vars": {
          "i": "1→3"
        }
      },
      {
        "line": 5,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "current_element": 2
        }
      },
      {
        "line": 3,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 5,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "current_element": 3
        }
      },
      {
        "line": 6,
        "step": 11,
        "action": "RETURN",
        "vars": {
          "__return__": 3
        }
      }
    ],
    "id": 859,
    "task_id": 288,
    "exist_function": [
      "modular_inverse"
    ]
  },
  {
    "code": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element",
    "entry_point": "modular_inverse",
    "input": [
      [
        2,
        3,
        4,
        5
      ],
      4,
      6
    ],
    "output": 1,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "arr": [
            2,
            3,
            4,
            5
          ],
          "N": 4,
          "P": 6
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "current_element": 0
        }
      },
      {
        "line": 3,
        "step": "3~6",
        "action": "LOOP",
        "vars": {
          "i": "0→3"
        }
      },
      {
        "line": 5,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "current_element": 1
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "RETURN",
        "vars": {
          "__return__": 1
        }
      }
    ],
    "id": 860,
    "task_id": 288,
    "exist_function": [
      "modular_inverse"
    ]
  },
  {
    "code": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd",
    "entry_point": "odd_Days",
    "input": [
      100
    ],
    "output": 5,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "N": 100
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "hund1": 1
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "hund4": 0
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "leap": 25
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "ordd": 75
        }
      },
      {
        "line": 7,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "ordd": 76
        }
      },
      {
        "line": 8,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "leap": 24
        }
      },
      {
        "line": 12,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "days": 124
        }
      },
      {
        "line": 13,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "odd": 5
        }
      },
      {
        "line": 14,
        "step": 10,
        "action": "RETURN",
        "vars": {
          "__return__": 5
        }
      }
    ],
    "id": 861,
    "task_id": 289,
    "exist_function": [
      "odd_Days"
    ]
  },
  {
    "code": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd",
    "entry_point": "odd_Days",
    "input": [
      50
    ],
    "output": 6,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "N": 50
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "hund1": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "hund4": 0
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "leap": 12
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "ordd": 38
        }
      },
      {
        "line": 12,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "days": 62
        }
      },
      {
        "line": 13,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "odd": 6
        }
      },
      {
        "line": 14,
        "step": 8,
        "action": "RETURN",
        "vars": {
          "__return__": 6
        }
      }
    ],
    "id": 862,
    "task_id": 289,
    "exist_function": [
      "odd_Days"
    ]
  },
  {
    "code": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd",
    "entry_point": "odd_Days",
    "input": [
      75
    ],
    "output": 2,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "N": 75
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "hund1": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "hund4": 0
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "leap": 18
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "ordd": 57
        }
      },
      {
        "line": 12,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "days": 93
        }
      },
      {
        "line": 13,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "odd": 2
        }
      },
      {
        "line": 14,
        "step": 8,
        "action": "RETURN",
        "vars": {
          "__return__": 2
        }
      }
    ],
    "id": 863,
    "task_id": 289,
    "exist_function": [
      "odd_Days"
    ]
  },
  {
    "code": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)",
    "entry_point": "max_length",
    "input": [
      [
        [
          0
        ],
        [
          1,
          3
        ],
        [
          5,
          7
        ],
        [
          9,
          11
        ],
        [
          13,
          15,
          17
        ]
      ]
    ],
    "output": "(3, [13, 15, 17])",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list1": [
            [
              0
            ],
            [
              1,
              3
            ],
            [
              5,
              7
            ],
            [
              9,
              11
            ],
            [
              13,
              15,
              17
            ]
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "max_length": 3
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "max_list": [
            13,
            15,
            17
          ]
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": "(3, [13, 15, 17])"
        }
      }
    ],
    "id": 864,
    "task_id": 290,
    "exist_function": [
      "max_length"
    ]
  },
  {
    "code": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)",
    "entry_point": "max_length",
    "input": [
      [
        [
          1
        ],
        [
          5,
          7
        ],
        [
          10,
          12,
          14,
          15
        ]
      ]
    ],
    "output": "(4, [10, 12, 14, 15])",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list1": [
            [
              1
            ],
            [
              5,
              7
            ],
            [
              10,
              12,
              14,
              15
            ]
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "max_length": 4
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "max_list": [
            10,
            12,
            14,
            15
          ]
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": "(4, [10, 12, 14, 15])"
        }
      }
    ],
    "id": 865,
    "task_id": 290,
    "exist_function": [
      "max_length"
    ]
  },
  {
    "code": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)",
    "entry_point": "max_length",
    "input": [
      [
        [
          5
        ],
        [
          15,
          20,
          25
        ]
      ]
    ],
    "output": "(3, [15, 20, 25])",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list1": [
            [
              5
            ],
            [
              15,
              20,
              25
            ]
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "max_length": 3
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "max_list": [
            15,
            20,
            25
          ]
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": "(3, [15, 20, 25])"
        }
      }
    ],
    "id": 866,
    "task_id": 290,
    "exist_function": [
      "max_length"
    ]
  },
  {
    "code": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]",
    "entry_point": "count_no_of_ways",
    "input": [
      2,
      4
    ],
    "output": 16,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 2,
          "k": 4
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "dp": [
            0,
            0,
            0
          ]
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "total": 4
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "mod": 1000000007
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "dp[1]": 4
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "dp[2]": 16
        }
      },
      {
        "line": 9,
        "step": 7,
        "action": "RETURN",
        "vars": {
          "__return__": 16
        }
      }
    ],
    "id": 867,
    "task_id": 291,
    "exist_function": [
      "count_no_of_ways"
    ]
  },
  {
    "code": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]",
    "entry_point": "count_no_of_ways",
    "input": [
      3,
      2
    ],
    "output": 6,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 3,
          "k": 2
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "dp": [
            0,
            0,
            0,
            0
          ]
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "total": 2
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "mod": 1000000007
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "dp[1]": 2
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "dp[2]": 4
        }
      },
      {
        "line": 7,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 8,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "dp[3]": 6
        }
      },
      {
        "line": 9,
        "step": 9,
        "action": "RETURN",
        "vars": {
          "__return__": 6
        }
      }
    ],
    "id": 868,
    "task_id": 291,
    "exist_function": [
      "count_no_of_ways"
    ]
  },
  {
    "code": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]",
    "entry_point": "count_no_of_ways",
    "input": [
      4,
      4
    ],
    "output": 228,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 4,
          "k": 4
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "dp": [
            0,
            0,
            0,
            0,
            0
          ]
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "total": 4
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "mod": 1000000007
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "dp[1]": 4
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "dp[2]": 16
        }
      },
      {
        "line": 7,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 8,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "dp[3]": 60
        }
      },
      {
        "line": 7,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 8,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "dp[4]": 228
        }
      },
      {
        "line": 9,
        "step": 11,
        "action": "RETURN",
        "vars": {
          "__return__": 228
        }
      }
    ],
    "id": 869,
    "task_id": 291,
    "exist_function": [
      "count_no_of_ways"
    ]
  },
  {
    "code": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)",
    "entry_point": "sum_div",
    "input": [
      8
    ],
    "output": 7,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "number": 8
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "divisors": [
            1
          ]
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "divisors[1]": 2
        }
      },
      {
        "line": 3,
        "step": "5~6",
        "action": "LOOP",
        "vars": {
          "i": "3→4"
        }
      },
      {
        "line": 5,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "divisors[2]": 4
        }
      },
      {
        "line": 3,
        "step": "8~10",
        "action": "LOOP",
        "vars": {
          "i": "5→7"
        }
      },
      {
        "line": 6,
        "step": 11,
        "action": "RETURN",
        "vars": {
          "__return__": 7
        }
      }
    ],
    "id": 879,
    "task_id": 295,
    "exist_function": [
      "sum_div"
    ]
  },
  {
    "code": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)",
    "entry_point": "sum_div",
    "input": [
      12
    ],
    "output": 16,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "number": 12
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "divisors": [
            1
          ]
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "divisors[1]": 2
        }
      },
      {
        "line": 3,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 5,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "divisors[2]": 3
        }
      },
      {
        "line": 3,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 5,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "divisors[3]": 4
        }
      },
      {
        "line": 3,
        "step": "9~10",
        "action": "LOOP",
        "vars": {
          "i": "5→6"
        }
      },
      {
        "line": 5,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "divisors[4]": 6
        }
      },
      {
        "line": 3,
        "step": "12~16",
        "action": "LOOP",
        "vars": {
          "i": "7→11"
        }
      },
      {
        "line": 6,
        "step": 17,
        "action": "RETURN",
        "vars": {
          "__return__": 16
        }
      }
    ],
    "id": 880,
    "task_id": 295,
    "exist_function": [
      "sum_div"
    ]
  },
  {
    "code": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)",
    "entry_point": "sum_div",
    "input": [
      7
    ],
    "output": 1,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "number": 7
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "divisors": [
            1
          ]
        }
      },
      {
        "line": 3,
        "step": "3~7",
        "action": "LOOP",
        "vars": {
          "i": "2→6"
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "RETURN",
        "vars": {
          "__return__": 1
        }
      }
    ],
    "id": 881,
    "task_id": 295,
    "exist_function": [
      "sum_div"
    ]
  },
  {
    "code": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count",
    "entry_point": "get_Inv_Count",
    "input": [
      [
        1,
        20,
        6,
        4,
        5
      ],
      5
    ],
    "output": 5,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "arr": [
            1,
            20,
            6,
            4,
            5
          ],
          "n": 5
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "inv_count": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 4,
        "step": "4~7",
        "action": "LOOP",
        "vars": {
          "j": "1→4"
        }
      },
      {
        "line": 3,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 4,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 6,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "inv_count": 1
        }
      },
      {
        "line": 4,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 6,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "inv_count": 2
        }
      },
      {
        "line": 4,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 6,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "inv_count": 3
        }
      },
      {
        "line": 3,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 4,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 6,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "inv_count": 4
        }
      },
      {
        "line": 4,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 6,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "inv_count": 5
        }
      },
      {
        "line": 3,
        "step": "20~21",
        "action": "LOOP",
        "vars": {
          "i": "3→4"
        }
      },
      {
        "line": 7,
        "step": 22,
        "action": "RETURN",
        "vars": {
          "__return__": 5
        }
      }
    ],
    "id": 882,
    "task_id": 296,
    "exist_function": [
      "get_Inv_Count"
    ]
  },
  {
    "code": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count",
    "entry_point": "get_Inv_Count",
    "input": [
      [
        1,
        2,
        1
      ],
      3
    ],
    "output": 1,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "arr": [
            1,
            2,
            1
          ],
          "n": 3
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "inv_count": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 4,
        "step": "4~5",
        "action": "LOOP",
        "vars": {
          "j": "1→2"
        }
      },
      {
        "line": 3,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 6,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "inv_count": 1
        }
      },
      {
        "line": 3,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 7,
        "step": 9,
        "action": "RETURN",
        "vars": {
          "__return__": 1
        }
      }
    ],
    "id": 883,
    "task_id": 296,
    "exist_function": [
      "get_Inv_Count"
    ]
  },
  {
    "code": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count",
    "entry_point": "get_Inv_Count",
    "input": [
      [
        1,
        2,
        5,
        6,
        1
      ],
      5
    ],
    "output": 3,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "arr": [
            1,
            2,
            5,
            6,
            1
          ],
          "n": 5
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "inv_count": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 4,
        "step": "4~7",
        "action": "LOOP",
        "vars": {
          "j": "1→4"
        }
      },
      {
        "line": 3,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 4,
        "step": "9~11",
        "action": "LOOP",
        "vars": {
          "j": "2→4"
        }
      },
      {
        "line": 6,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "inv_count": 1
        }
      },
      {
        "line": 3,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 4,
        "step": "14~15",
        "action": "LOOP",
        "vars": {
          "j": "3→4"
        }
      },
      {
        "line": 6,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "inv_count": 2
        }
      },
      {
        "line": 3,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 6,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "inv_count": 3
        }
      },
      {
        "line": 3,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 7,
        "step": 20,
        "action": "RETURN",
        "vars": {
          "__return__": 3
        }
      }
    ],
    "id": 884,
    "task_id": 296,
    "exist_function": [
      "get_Inv_Count"
    ]
  },
  {
    "code": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list",
    "entry_point": "flatten_list",
    "input": [
      [
        0,
        10,
        [
          20,
          30
        ],
        40,
        50,
        [
          60,
          70,
          80
        ],
        [
          90,
          100,
          110,
          120
        ]
      ]
    ],
    "output": [
      0,
      10,
      20,
      30,
      40,
      50,
      60,
      70,
      80,
      90,
      100,
      110,
      120
    ],
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list1": [
            0,
            10,
            [
              20,
              30
            ],
            40,
            50,
            [
              60,
              70,
              80
            ],
            [
              90,
              100,
              110,
              120
            ]
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "result_list": []
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "stack": [
            [
              0,
              10,
              [
                20,
                30
              ],
              40,
              50,
              [
                60,
                70,
                80
              ],
              [
                90,
                100,
                110,
                120
              ]
            ]
          ]
        }
      },
      {
        "line": 6,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            0,
            10,
            [
              20,
              30
            ],
            40,
            50,
            [
              60,
              70,
              80
            ],
            [
              90,
              100,
              110,
              120
            ]
          ],
          "stack": []
        }
      },
      {
        "line": 7,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            0,
            10,
            [
              20,
              30
            ],
            40,
            50,
            [
              60,
              70,
              80
            ]
          ],
          "next": [
            90,
            100,
            110,
            120
          ]
        }
      },
      {
        "line": 8,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "stack[0]": [
            0,
            10,
            [
              20,
              30
            ],
            40,
            50,
            [
              60,
              70,
              80
            ]
          ]
        }
      },
      {
        "line": 10,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            90,
            100,
            110,
            120
          ]
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "c_num[2]": 110,
          "c_num[0]": 90,
          "c_num[1]": 100,
          "c_num[3]": 120,
          "stack": [
            [
              0,
              10,
              [
                20,
                30
              ],
              40,
              50,
              [
                60,
                70,
                80
              ]
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            90,
            100,
            110
          ],
          "next": 120
        }
      },
      {
        "line": 8,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            90,
            100,
            110
          ]
        }
      },
      {
        "line": 11,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "result_list[0]": 120
        }
      },
      {
        "line": 6,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "stack": [
            [
              0,
              10,
              [
                20,
                30
              ],
              40,
              50,
              [
                60,
                70,
                80
              ]
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            90,
            100
          ],
          "next": 110
        }
      },
      {
        "line": 8,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            90,
            100
          ]
        }
      },
      {
        "line": 11,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "result_list[1]": 110
        }
      },
      {
        "line": 6,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "stack": [
            [
              0,
              10,
              [
                20,
                30
              ],
              40,
              50,
              [
                60,
                70,
                80
              ]
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            90
          ],
          "next": 100
        }
      },
      {
        "line": 8,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            90
          ]
        }
      },
      {
        "line": 11,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "result_list[2]": 100
        }
      },
      {
        "line": 6,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "stack": [
            [
              0,
              10,
              [
                20,
                30
              ],
              40,
              50,
              [
                60,
                70,
                80
              ]
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "c_num": [],
          "next": 90
        }
      },
      {
        "line": 11,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "result_list[3]": 90
        }
      },
      {
        "line": 6,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "c_num[5]": [
            60,
            70,
            80
          ],
          "c_num[2]": [
            20,
            30
          ],
          "c_num[0]": 0,
          "c_num[1]": 10,
          "c_num[4]": 50,
          "c_num[3]": 40,
          "stack": []
        }
      },
      {
        "line": 7,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            0,
            10,
            [
              20,
              30
            ],
            40,
            50
          ],
          "next": [
            60,
            70,
            80
          ]
        }
      },
      {
        "line": 8,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "stack[0]": [
            0,
            10,
            [
              20,
              30
            ],
            40,
            50
          ]
        }
      },
      {
        "line": 10,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            60,
            70,
            80
          ]
        }
      },
      {
        "line": 6,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "c_num[2]": 80,
          "c_num[0]": 60,
          "c_num[1]": 70,
          "stack": [
            [
              0,
              10,
              [
                20,
                30
              ],
              40,
              50
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            60,
            70
          ],
          "next": 80
        }
      },
      {
        "line": 8,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            60,
            70
          ]
        }
      },
      {
        "line": 11,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "result_list[4]": 80
        }
      },
      {
        "line": 6,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "stack": [
            [
              0,
              10,
              [
                20,
                30
              ],
              40,
              50
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            60
          ],
          "next": 70
        }
      },
      {
        "line": 8,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            60
          ]
        }
      },
      {
        "line": 11,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "result_list[5]": 70
        }
      },
      {
        "line": 6,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "stack": [
            [
              0,
              10,
              [
                20,
                30
              ],
              40,
              50
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "c_num": [],
          "next": 60
        }
      },
      {
        "line": 11,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "result_list[6]": 60
        }
      },
      {
        "line": 6,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "c_num[2]": [
            20,
            30
          ],
          "c_num[0]": 0,
          "c_num[1]": 10,
          "c_num[4]": 50,
          "c_num[3]": 40,
          "stack": []
        }
      },
      {
        "line": 7,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            0,
            10,
            [
              20,
              30
            ],
            40
          ],
          "next": 50
        }
      },
      {
        "line": 8,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "stack[0]": [
            0,
            10,
            [
              20,
              30
            ],
            40
          ]
        }
      },
      {
        "line": 11,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "result_list[7]": 50
        }
      },
      {
        "line": 6,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "stack": []
        }
      },
      {
        "line": 7,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            0,
            10,
            [
              20,
              30
            ]
          ],
          "next": 40
        }
      },
      {
        "line": 8,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "stack[0]": [
            0,
            10,
            [
              20,
              30
            ]
          ]
        }
      },
      {
        "line": 11,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "result_list[8]": 40
        }
      },
      {
        "line": 6,
        "step": 46,
        "action": "EXECUTE",
        "vars": {
          "stack": []
        }
      },
      {
        "line": 7,
        "step": 47,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            0,
            10
          ],
          "next": [
            20,
            30
          ]
        }
      },
      {
        "line": 8,
        "step": 48,
        "action": "EXECUTE",
        "vars": {
          "stack[0]": [
            0,
            10
          ]
        }
      },
      {
        "line": 10,
        "step": 49,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            20,
            30
          ]
        }
      },
      {
        "line": 6,
        "step": 50,
        "action": "EXECUTE",
        "vars": {
          "c_num[0]": 20,
          "c_num[1]": 30,
          "stack": [
            [
              0,
              10
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 51,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            20
          ],
          "next": 30
        }
      },
      {
        "line": 8,
        "step": 52,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            20
          ]
        }
      },
      {
        "line": 11,
        "step": 53,
        "action": "EXECUTE",
        "vars": {
          "result_list[9]": 30
        }
      },
      {
        "line": 6,
        "step": 54,
        "action": "EXECUTE",
        "vars": {
          "stack": [
            [
              0,
              10
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 55,
        "action": "EXECUTE",
        "vars": {
          "c_num": [],
          "next": 20
        }
      },
      {
        "line": 11,
        "step": 56,
        "action": "EXECUTE",
        "vars": {
          "result_list[10]": 20
        }
      },
      {
        "line": 6,
        "step": 57,
        "action": "EXECUTE",
        "vars": {
          "c_num[0]": 0,
          "c_num[1]": 10,
          "stack": []
        }
      },
      {
        "line": 7,
        "step": 58,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            0
          ],
          "next": 10
        }
      },
      {
        "line": 8,
        "step": 59,
        "action": "EXECUTE",
        "vars": {
          "stack[0]": [
            0
          ]
        }
      },
      {
        "line": 11,
        "step": 60,
        "action": "EXECUTE",
        "vars": {
          "result_list[11]": 10
        }
      },
      {
        "line": 6,
        "step": 61,
        "action": "EXECUTE",
        "vars": {
          "stack": []
        }
      },
      {
        "line": 7,
        "step": 62,
        "action": "EXECUTE",
        "vars": {
          "c_num": [],
          "next": 0
        }
      },
      {
        "line": 11,
        "step": 63,
        "action": "EXECUTE",
        "vars": {
          "result_list[12]": 0
        }
      },
      {
        "line": 12,
        "step": 64,
        "action": "EXECUTE",
        "vars": {
          "result_list[3]": 30,
          "result_list[0]": 0,
          "result_list[11]": 110,
          "result_list[1]": 10,
          "result_list[9]": 90,
          "result_list[8]": 80,
          "result_list[12]": 120,
          "result_list[10]": 100,
          "result_list[4]": 40,
          "result_list[5]": 50,
          "result_list[2]": 20,
          "result_list[7]": 70
        }
      },
      {
        "line": 13,
        "step": 65,
        "action": "RETURN",
        "vars": {
          "__return__": [
            0,
            10,
            20,
            30,
            40,
            50,
            60,
            70,
            80,
            90,
            100,
            110,
            120
          ]
        }
      }
    ],
    "id": 885,
    "task_id": 297,
    "exist_function": [
      "flatten_list"
    ]
  },
  {
    "code": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list",
    "entry_point": "flatten_list",
    "input": [
      [
        [
          10,
          20
        ],
        [
          40
        ],
        [
          30,
          56,
          25
        ],
        [
          10,
          20
        ],
        [
          33
        ],
        [
          40
        ]
      ]
    ],
    "output": [
      10,
      20,
      40,
      30,
      56,
      25,
      10,
      20,
      33,
      40
    ],
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list1": [
            [
              10,
              20
            ],
            [
              40
            ],
            [
              30,
              56,
              25
            ],
            [
              10,
              20
            ],
            [
              33
            ],
            [
              40
            ]
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "result_list": []
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "stack": [
            [
              [
                10,
                20
              ],
              [
                40
              ],
              [
                30,
                56,
                25
              ],
              [
                10,
                20
              ],
              [
                33
              ],
              [
                40
              ]
            ]
          ]
        }
      },
      {
        "line": 6,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            [
              10,
              20
            ],
            [
              40
            ],
            [
              30,
              56,
              25
            ],
            [
              10,
              20
            ],
            [
              33
            ],
            [
              40
            ]
          ],
          "stack": []
        }
      },
      {
        "line": 7,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            [
              10,
              20
            ],
            [
              40
            ],
            [
              30,
              56,
              25
            ],
            [
              10,
              20
            ],
            [
              33
            ]
          ],
          "next": [
            40
          ]
        }
      },
      {
        "line": 8,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "stack[0]": [
            [
              10,
              20
            ],
            [
              40
            ],
            [
              30,
              56,
              25
            ],
            [
              10,
              20
            ],
            [
              33
            ]
          ]
        }
      },
      {
        "line": 10,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            40
          ]
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "c_num[0]": 40,
          "stack": [
            [
              [
                10,
                20
              ],
              [
                40
              ],
              [
                30,
                56,
                25
              ],
              [
                10,
                20
              ],
              [
                33
              ]
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "c_num": [],
          "next": 40
        }
      },
      {
        "line": 11,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "result_list[0]": 40
        }
      },
      {
        "line": 6,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "c_num[2]": [
            30,
            56,
            25
          ],
          "c_num[0]": [
            10,
            20
          ],
          "c_num[1]": [
            40
          ],
          "c_num[4]": [
            33
          ],
          "c_num[3]": [
            10,
            20
          ],
          "stack": []
        }
      },
      {
        "line": 7,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            [
              10,
              20
            ],
            [
              40
            ],
            [
              30,
              56,
              25
            ],
            [
              10,
              20
            ]
          ],
          "next": [
            33
          ]
        }
      },
      {
        "line": 8,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "stack[0]": [
            [
              10,
              20
            ],
            [
              40
            ],
            [
              30,
              56,
              25
            ],
            [
              10,
              20
            ]
          ]
        }
      },
      {
        "line": 10,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            33
          ]
        }
      },
      {
        "line": 6,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "c_num[0]": 33,
          "stack": [
            [
              [
                10,
                20
              ],
              [
                40
              ],
              [
                30,
                56,
                25
              ],
              [
                10,
                20
              ]
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "c_num": [],
          "next": 33
        }
      },
      {
        "line": 11,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "result_list[1]": 33
        }
      },
      {
        "line": 6,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "c_num[2]": [
            30,
            56,
            25
          ],
          "c_num[0]": [
            10,
            20
          ],
          "c_num[1]": [
            40
          ],
          "c_num[3]": [
            10,
            20
          ],
          "stack": []
        }
      },
      {
        "line": 7,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            [
              10,
              20
            ],
            [
              40
            ],
            [
              30,
              56,
              25
            ]
          ],
          "next": [
            10,
            20
          ]
        }
      },
      {
        "line": 8,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "stack[0]": [
            [
              10,
              20
            ],
            [
              40
            ],
            [
              30,
              56,
              25
            ]
          ]
        }
      },
      {
        "line": 10,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            10,
            20
          ]
        }
      },
      {
        "line": 6,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "c_num[0]": 10,
          "c_num[1]": 20,
          "stack": [
            [
              [
                10,
                20
              ],
              [
                40
              ],
              [
                30,
                56,
                25
              ]
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            10
          ],
          "next": 20
        }
      },
      {
        "line": 8,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            10
          ]
        }
      },
      {
        "line": 11,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "result_list[2]": 20
        }
      },
      {
        "line": 6,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "stack": [
            [
              [
                10,
                20
              ],
              [
                40
              ],
              [
                30,
                56,
                25
              ]
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "c_num": [],
          "next": 10
        }
      },
      {
        "line": 11,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "result_list[3]": 10
        }
      },
      {
        "line": 6,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "c_num[2]": [
            30,
            56,
            25
          ],
          "c_num[0]": [
            10,
            20
          ],
          "c_num[1]": [
            40
          ],
          "stack": []
        }
      },
      {
        "line": 7,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            [
              10,
              20
            ],
            [
              40
            ]
          ],
          "next": [
            30,
            56,
            25
          ]
        }
      },
      {
        "line": 8,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "stack[0]": [
            [
              10,
              20
            ],
            [
              40
            ]
          ]
        }
      },
      {
        "line": 10,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            30,
            56,
            25
          ]
        }
      },
      {
        "line": 6,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "c_num[2]": 25,
          "c_num[0]": 30,
          "c_num[1]": 56,
          "stack": [
            [
              [
                10,
                20
              ],
              [
                40
              ]
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            30,
            56
          ],
          "next": 25
        }
      },
      {
        "line": 8,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            30,
            56
          ]
        }
      },
      {
        "line": 11,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "result_list[4]": 25
        }
      },
      {
        "line": 6,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "stack": [
            [
              [
                10,
                20
              ],
              [
                40
              ]
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            30
          ],
          "next": 56
        }
      },
      {
        "line": 8,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            30
          ]
        }
      },
      {
        "line": 11,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "result_list[5]": 56
        }
      },
      {
        "line": 6,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "stack": [
            [
              [
                10,
                20
              ],
              [
                40
              ]
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "c_num": [],
          "next": 30
        }
      },
      {
        "line": 11,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "result_list[6]": 30
        }
      },
      {
        "line": 6,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "c_num[0]": [
            10,
            20
          ],
          "c_num[1]": [
            40
          ],
          "stack": []
        }
      },
      {
        "line": 7,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            [
              10,
              20
            ]
          ],
          "next": [
            40
          ]
        }
      },
      {
        "line": 8,
        "step": 46,
        "action": "EXECUTE",
        "vars": {
          "stack[0]": [
            [
              10,
              20
            ]
          ]
        }
      },
      {
        "line": 10,
        "step": 47,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            40
          ]
        }
      },
      {
        "line": 6,
        "step": 48,
        "action": "EXECUTE",
        "vars": {
          "c_num[0]": 40,
          "stack": [
            [
              [
                10,
                20
              ]
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 49,
        "action": "EXECUTE",
        "vars": {
          "c_num": [],
          "next": 40
        }
      },
      {
        "line": 11,
        "step": 50,
        "action": "EXECUTE",
        "vars": {
          "result_list[7]": 40
        }
      },
      {
        "line": 6,
        "step": 51,
        "action": "EXECUTE",
        "vars": {
          "c_num[0]": [
            10,
            20
          ],
          "stack": []
        }
      },
      {
        "line": 7,
        "step": 52,
        "action": "EXECUTE",
        "vars": {
          "c_num": [],
          "next": [
            10,
            20
          ]
        }
      },
      {
        "line": 10,
        "step": 53,
        "action": "EXECUTE",
        "vars": {
          "stack[0]": [
            10,
            20
          ]
        }
      },
      {
        "line": 6,
        "step": 54,
        "action": "EXECUTE",
        "vars": {
          "c_num[0]": 10,
          "c_num[1]": 20,
          "stack": []
        }
      },
      {
        "line": 7,
        "step": 55,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            10
          ],
          "next": 20
        }
      },
      {
        "line": 8,
        "step": 56,
        "action": "EXECUTE",
        "vars": {
          "stack[0]": [
            10
          ]
        }
      },
      {
        "line": 11,
        "step": 57,
        "action": "EXECUTE",
        "vars": {
          "result_list[8]": 20
        }
      },
      {
        "line": 6,
        "step": 58,
        "action": "EXECUTE",
        "vars": {
          "stack": []
        }
      },
      {
        "line": 7,
        "step": 59,
        "action": "EXECUTE",
        "vars": {
          "c_num": [],
          "next": 10
        }
      },
      {
        "line": 11,
        "step": 60,
        "action": "EXECUTE",
        "vars": {
          "result_list[9]": 10
        }
      },
      {
        "line": 12,
        "step": 61,
        "action": "EXECUTE",
        "vars": {
          "result_list[3]": 30,
          "result_list[0]": 10,
          "result_list[1]": 20,
          "result_list[9]": 40,
          "result_list[6]": 10,
          "result_list[8]": 33,
          "result_list[4]": 56,
          "result_list[5]": 25,
          "result_list[2]": 40,
          "result_list[7]": 20
        }
      },
      {
        "line": 13,
        "step": 62,
        "action": "RETURN",
        "vars": {
          "__return__": [
            10,
            20,
            40,
            30,
            56,
            25,
            10,
            20,
            33,
            40
          ]
        }
      }
    ],
    "id": 886,
    "task_id": 297,
    "exist_function": [
      "flatten_list"
    ]
  },
  {
    "code": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list",
    "entry_point": "flatten_list",
    "input": [
      [
        [
          1,
          2,
          3
        ],
        [
          4,
          5,
          6
        ],
        [
          10,
          11,
          12
        ],
        [
          7,
          8,
          9
        ]
      ]
    ],
    "output": [
      1,
      2,
      3,
      4,
      5,
      6,
      10,
      11,
      12,
      7,
      8,
      9
    ],
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list1": [
            [
              1,
              2,
              3
            ],
            [
              4,
              5,
              6
            ],
            [
              10,
              11,
              12
            ],
            [
              7,
              8,
              9
            ]
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "result_list": []
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "stack": [
            [
              [
                1,
                2,
                3
              ],
              [
                4,
                5,
                6
              ],
              [
                10,
                11,
                12
              ],
              [
                7,
                8,
                9
              ]
            ]
          ]
        }
      },
      {
        "line": 6,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            [
              1,
              2,
              3
            ],
            [
              4,
              5,
              6
            ],
            [
              10,
              11,
              12
            ],
            [
              7,
              8,
              9
            ]
          ],
          "stack": []
        }
      },
      {
        "line": 7,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            [
              1,
              2,
              3
            ],
            [
              4,
              5,
              6
            ],
            [
              10,
              11,
              12
            ]
          ],
          "next": [
            7,
            8,
            9
          ]
        }
      },
      {
        "line": 8,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "stack[0]": [
            [
              1,
              2,
              3
            ],
            [
              4,
              5,
              6
            ],
            [
              10,
              11,
              12
            ]
          ]
        }
      },
      {
        "line": 10,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            7,
            8,
            9
          ]
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "c_num[2]": 9,
          "c_num[0]": 7,
          "c_num[1]": 8,
          "stack": [
            [
              [
                1,
                2,
                3
              ],
              [
                4,
                5,
                6
              ],
              [
                10,
                11,
                12
              ]
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            7,
            8
          ],
          "next": 9
        }
      },
      {
        "line": 8,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            7,
            8
          ]
        }
      },
      {
        "line": 11,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "result_list[0]": 9
        }
      },
      {
        "line": 6,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "stack": [
            [
              [
                1,
                2,
                3
              ],
              [
                4,
                5,
                6
              ],
              [
                10,
                11,
                12
              ]
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            7
          ],
          "next": 8
        }
      },
      {
        "line": 8,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            7
          ]
        }
      },
      {
        "line": 11,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "result_list[1]": 8
        }
      },
      {
        "line": 6,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "stack": [
            [
              [
                1,
                2,
                3
              ],
              [
                4,
                5,
                6
              ],
              [
                10,
                11,
                12
              ]
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "c_num": [],
          "next": 7
        }
      },
      {
        "line": 11,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "result_list[2]": 7
        }
      },
      {
        "line": 6,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "c_num[2]": [
            10,
            11,
            12
          ],
          "c_num[0]": [
            1,
            2,
            3
          ],
          "c_num[1]": [
            4,
            5,
            6
          ],
          "stack": []
        }
      },
      {
        "line": 7,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            [
              1,
              2,
              3
            ],
            [
              4,
              5,
              6
            ]
          ],
          "next": [
            10,
            11,
            12
          ]
        }
      },
      {
        "line": 8,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "stack[0]": [
            [
              1,
              2,
              3
            ],
            [
              4,
              5,
              6
            ]
          ]
        }
      },
      {
        "line": 10,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            10,
            11,
            12
          ]
        }
      },
      {
        "line": 6,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "c_num[2]": 12,
          "c_num[0]": 10,
          "c_num[1]": 11,
          "stack": [
            [
              [
                1,
                2,
                3
              ],
              [
                4,
                5,
                6
              ]
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            10,
            11
          ],
          "next": 12
        }
      },
      {
        "line": 8,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            10,
            11
          ]
        }
      },
      {
        "line": 11,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "result_list[3]": 12
        }
      },
      {
        "line": 6,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "stack": [
            [
              [
                1,
                2,
                3
              ],
              [
                4,
                5,
                6
              ]
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            10
          ],
          "next": 11
        }
      },
      {
        "line": 8,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            10
          ]
        }
      },
      {
        "line": 11,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "result_list[4]": 11
        }
      },
      {
        "line": 6,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "stack": [
            [
              [
                1,
                2,
                3
              ],
              [
                4,
                5,
                6
              ]
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "c_num": [],
          "next": 10
        }
      },
      {
        "line": 11,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "result_list[5]": 10
        }
      },
      {
        "line": 6,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "c_num[0]": [
            1,
            2,
            3
          ],
          "c_num[1]": [
            4,
            5,
            6
          ],
          "stack": []
        }
      },
      {
        "line": 7,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            [
              1,
              2,
              3
            ]
          ],
          "next": [
            4,
            5,
            6
          ]
        }
      },
      {
        "line": 8,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "stack[0]": [
            [
              1,
              2,
              3
            ]
          ]
        }
      },
      {
        "line": 10,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            4,
            5,
            6
          ]
        }
      },
      {
        "line": 6,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "c_num[2]": 6,
          "c_num[0]": 4,
          "c_num[1]": 5,
          "stack": [
            [
              [
                1,
                2,
                3
              ]
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            4,
            5
          ],
          "next": 6
        }
      },
      {
        "line": 8,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            4,
            5
          ]
        }
      },
      {
        "line": 11,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "result_list[6]": 6
        }
      },
      {
        "line": 6,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "stack": [
            [
              [
                1,
                2,
                3
              ]
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            4
          ],
          "next": 5
        }
      },
      {
        "line": 8,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "stack[1]": [
            4
          ]
        }
      },
      {
        "line": 11,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "result_list[7]": 5
        }
      },
      {
        "line": 6,
        "step": 46,
        "action": "EXECUTE",
        "vars": {
          "stack": [
            [
              [
                1,
                2,
                3
              ]
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 47,
        "action": "EXECUTE",
        "vars": {
          "c_num": [],
          "next": 4
        }
      },
      {
        "line": 11,
        "step": 48,
        "action": "EXECUTE",
        "vars": {
          "result_list[8]": 4
        }
      },
      {
        "line": 6,
        "step": 49,
        "action": "EXECUTE",
        "vars": {
          "c_num[0]": [
            1,
            2,
            3
          ],
          "stack": []
        }
      },
      {
        "line": 7,
        "step": 50,
        "action": "EXECUTE",
        "vars": {
          "c_num": [],
          "next": [
            1,
            2,
            3
          ]
        }
      },
      {
        "line": 10,
        "step": 51,
        "action": "EXECUTE",
        "vars": {
          "stack[0]": [
            1,
            2,
            3
          ]
        }
      },
      {
        "line": 6,
        "step": 52,
        "action": "EXECUTE",
        "vars": {
          "c_num[2]": 3,
          "c_num[0]": 1,
          "c_num[1]": 2,
          "stack": []
        }
      },
      {
        "line": 7,
        "step": 53,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            1,
            2
          ],
          "next": 3
        }
      },
      {
        "line": 8,
        "step": 54,
        "action": "EXECUTE",
        "vars": {
          "stack[0]": [
            1,
            2
          ]
        }
      },
      {
        "line": 11,
        "step": 55,
        "action": "EXECUTE",
        "vars": {
          "result_list[9]": 3
        }
      },
      {
        "line": 6,
        "step": 56,
        "action": "EXECUTE",
        "vars": {
          "stack": []
        }
      },
      {
        "line": 7,
        "step": 57,
        "action": "EXECUTE",
        "vars": {
          "c_num": [
            1
          ],
          "next": 2
        }
      },
      {
        "line": 8,
        "step": 58,
        "action": "EXECUTE",
        "vars": {
          "stack[0]": [
            1
          ]
        }
      },
      {
        "line": 11,
        "step": 59,
        "action": "EXECUTE",
        "vars": {
          "result_list[10]": 2
        }
      },
      {
        "line": 6,
        "step": 60,
        "action": "EXECUTE",
        "vars": {
          "stack": []
        }
      },
      {
        "line": 7,
        "step": 61,
        "action": "EXECUTE",
        "vars": {
          "c_num": [],
          "next": 1
        }
      },
      {
        "line": 11,
        "step": 62,
        "action": "EXECUTE",
        "vars": {
          "result_list[11]": 1
        }
      },
      {
        "line": 12,
        "step": 63,
        "action": "EXECUTE",
        "vars": {
          "result_list[3]": 4,
          "result_list[0]": 1,
          "result_list[11]": 9,
          "result_list[1]": 2,
          "result_list[9]": 7,
          "result_list[6]": 10,
          "result_list[8]": 12,
          "result_list[10]": 8,
          "result_list[4]": 5,
          "result_list[5]": 6,
          "result_list[2]": 3,
          "result_list[7]": 11
        }
      },
      {
        "line": 13,
        "step": 64,
        "action": "RETURN",
        "vars": {
          "__return__": [
            1,
            2,
            3,
            4,
            5,
            6,
            10,
            11,
            12,
            7,
            8,
            9
          ]
        }
      }
    ],
    "id": 887,
    "task_id": 297,
    "exist_function": [
      "flatten_list"
    ]
  },
  {
    "code": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])",
    "entry_point": "max_aggregate",
    "input": [
      [
        "('Juan Whelan', 90)",
        "('Sabah Colley', 88)",
        "('Peter Nichols', 7)",
        "('Juan Whelan', 122)",
        "('Sabah Colley', 84)"
      ]
    ],
    "output": "('Juan Whelan', 212)",
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "stdata": [
            "('Juan Whelan', 90)",
            "('Sabah Colley', 88)",
            "('Peter Nichols', 7)",
            "('Juan Whelan', 122)",
            "('Sabah Colley', 84)"
          ]
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "temp": {}
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "marks": 90,
          "name": "Juan Whelan"
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "temp.Juan Whelan": 90
        }
      },
      {
        "line": 4,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "marks": 88,
          "name": "Sabah Colley"
        }
      },
      {
        "line": 5,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "temp.Sabah Colley": 88
        }
      },
      {
        "line": 4,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "marks": 7,
          "name": "Peter Nichols"
        }
      },
      {
        "line": 5,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "temp.Peter Nichols": 7
        }
      },
      {
        "line": 4,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "marks": 122,
          "name": "Juan Whelan"
        }
      },
      {
        "line": 5,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "temp.Juan Whelan": 212
        }
      },
      {
        "line": 4,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "marks": 84,
          "name": "Sabah Colley"
        }
      },
      {
        "line": 5,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "temp.Sabah Colley": 172
        }
      },
      {
        "line": 6,
        "step": 13,
        "action": "RETURN",
        "vars": {
          "__return__": "('Juan Whelan', 212)"
        }
      }
    ],
    "id": 891,
    "task_id": 299,
    "exist_function": [
      "max_aggregate"
    ]
  },
  {
    "code": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])",
    "entry_point": "max_aggregate",
    "input": [
      [
        "('Juan Whelan', 50)",
        "('Sabah Colley', 48)",
        "('Peter Nichols', 37)",
        "('Juan Whelan', 22)",
        "('Sabah Colley', 14)"
      ]
    ],
    "output": "('Juan Whelan', 72)",
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "stdata": [
            "('Juan Whelan', 50)",
            "('Sabah Colley', 48)",
            "('Peter Nichols', 37)",
            "('Juan Whelan', 22)",
            "('Sabah Colley', 14)"
          ]
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "temp": {}
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "marks": 50,
          "name": "Juan Whelan"
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "temp.Juan Whelan": 50
        }
      },
      {
        "line": 4,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "marks": 48,
          "name": "Sabah Colley"
        }
      },
      {
        "line": 5,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "temp.Sabah Colley": 48
        }
      },
      {
        "line": 4,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "marks": 37,
          "name": "Peter Nichols"
        }
      },
      {
        "line": 5,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "temp.Peter Nichols": 37
        }
      },
      {
        "line": 4,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "marks": 22,
          "name": "Juan Whelan"
        }
      },
      {
        "line": 5,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "temp.Juan Whelan": 72
        }
      },
      {
        "line": 4,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "marks": 14,
          "name": "Sabah Colley"
        }
      },
      {
        "line": 5,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "temp.Sabah Colley": 62
        }
      },
      {
        "line": 6,
        "step": 13,
        "action": "RETURN",
        "vars": {
          "__return__": "('Juan Whelan', 72)"
        }
      }
    ],
    "id": 892,
    "task_id": 299,
    "exist_function": [
      "max_aggregate"
    ]
  },
  {
    "code": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])",
    "entry_point": "max_aggregate",
    "input": [
      [
        "('Juan Whelan', 10)",
        "('Sabah Colley', 20)",
        "('Peter Nichols', 30)",
        "('Juan Whelan', 40)",
        "('Sabah Colley', 50)"
      ]
    ],
    "output": "('Sabah Colley', 70)",
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "stdata": [
            "('Juan Whelan', 10)",
            "('Sabah Colley', 20)",
            "('Peter Nichols', 30)",
            "('Juan Whelan', 40)",
            "('Sabah Colley', 50)"
          ]
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "temp": {}
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "marks": 10,
          "name": "Juan Whelan"
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "temp.Juan Whelan": 10
        }
      },
      {
        "line": 4,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "marks": 20,
          "name": "Sabah Colley"
        }
      },
      {
        "line": 5,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "temp.Sabah Colley": 20
        }
      },
      {
        "line": 4,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "marks": 30,
          "name": "Peter Nichols"
        }
      },
      {
        "line": 5,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "temp.Peter Nichols": 30
        }
      },
      {
        "line": 4,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "marks": 40,
          "name": "Juan Whelan"
        }
      },
      {
        "line": 5,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "temp.Juan Whelan": 50
        }
      },
      {
        "line": 4,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "marks": 50,
          "name": "Sabah Colley"
        }
      },
      {
        "line": 5,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "temp.Sabah Colley": 70
        }
      },
      {
        "line": 6,
        "step": 13,
        "action": "RETURN",
        "vars": {
          "__return__": "('Sabah Colley', 70)"
        }
      }
    ],
    "id": 893,
    "task_id": 299,
    "exist_function": [
      "max_aggregate"
    ]
  },
  {
    "code": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res",
    "entry_point": "count_binary_seq",
    "input": [
      1
    ],
    "output": 2.0,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 1
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "nCr": 1
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "res": 1
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "r": 1
        }
      },
      {
        "line": 6,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "res": 2.0
        }
      },
      {
        "line": 7,
        "step": 6,
        "action": "RETURN",
        "vars": {
          "__return__": 2.0
        }
      }
    ],
    "id": 894,
    "task_id": 300,
    "exist_function": [
      "count_binary_seq"
    ]
  },
  {
    "code": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res",
    "entry_point": "count_binary_seq",
    "input": [
      2
    ],
    "output": 6.0,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 2
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "nCr": 1
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "res": 1
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "r": 1
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "nCr": 2.0
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "res": 5.0
        }
      },
      {
        "line": 4,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "r": 2
        }
      },
      {
        "line": 5,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "nCr": 1.0
        }
      },
      {
        "line": 6,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "res": 6.0
        }
      },
      {
        "line": 7,
        "step": 10,
        "action": "RETURN",
        "vars": {
          "__return__": 6.0
        }
      }
    ],
    "id": 895,
    "task_id": 300,
    "exist_function": [
      "count_binary_seq"
    ]
  },
  {
    "code": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res",
    "entry_point": "count_binary_seq",
    "input": [
      3
    ],
    "output": 20.0,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 3
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "nCr": 1
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "res": 1
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "r": 1
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "nCr": 3.0
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "res": 10.0
        }
      },
      {
        "line": 4,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "r": 2
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "res": 19.0
        }
      },
      {
        "line": 4,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "r": 3
        }
      },
      {
        "line": 5,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "nCr": 1.0
        }
      },
      {
        "line": 6,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "res": 20.0
        }
      },
      {
        "line": 7,
        "step": 12,
        "action": "RETURN",
        "vars": {
          "__return__": 20.0
        }
      }
    ],
    "id": 896,
    "task_id": 300,
    "exist_function": [
      "count_binary_seq"
    ]
  },
  {
    "code": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0",
    "entry_point": "dict_depth",
    "input": [
      {
        "a": 1,
        "b": {
          "c": {
            "d": {}
          }
        }
      }
    ],
    "output": 4,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "d": {}
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "RETURN",
        "vars": {
          "__return__": 1
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "d": {}
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "RETURN",
        "vars": {
          "__return__": 2
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "d": {}
        }
      },
      {
        "line": 3,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": 3
        }
      },
      {
        "line": 3,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "d": {}
        }
      },
      {
        "line": 3,
        "step": 5,
        "action": "RETURN",
        "vars": {
          "__return__": 4
        }
      }
    ],
    "id": 897,
    "task_id": 301,
    "exist_function": [
      "dict_depth"
    ]
  },
  {
    "code": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0",
    "entry_point": "dict_depth",
    "input": [
      {
        "a": 1,
        "b": {
          "c": "python"
        }
      }
    ],
    "output": 2,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "d": "python"
        }
      },
      {
        "line": 4,
        "step": 2,
        "action": "RETURN",
        "vars": {
          "__return__": 0
        }
      },
      {
        "line": 4,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "d": "python"
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "RETURN",
        "vars": {
          "__return__": 1
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "d": "python"
        }
      },
      {
        "line": 3,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": 2
        }
      }
    ],
    "id": 898,
    "task_id": 301,
    "exist_function": [
      "dict_depth"
    ]
  },
  {
    "code": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0",
    "entry_point": "dict_depth",
    "input": [
      {
        "1": "Sun",
        "2": {
          "3": {
            "4": "Mon"
          }
        }
      }
    ],
    "output": 3,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "d": "Mon"
        }
      },
      {
        "line": 4,
        "step": 2,
        "action": "RETURN",
        "vars": {
          "__return__": 0
        }
      },
      {
        "line": 4,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "d": "Mon"
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "RETURN",
        "vars": {
          "__return__": 1
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "d": "Mon"
        }
      },
      {
        "line": 3,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": 2
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "d": "Mon"
        }
      },
      {
        "line": 3,
        "step": 5,
        "action": "RETURN",
        "vars": {
          "__return__": 3
        }
      }
    ],
    "id": 899,
    "task_id": 301,
    "exist_function": [
      "dict_depth"
    ]
  },
  {
    "code": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)",
    "entry_point": "set_Bit_Number",
    "input": [
      6
    ],
    "output": 4,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 6
        }
      },
      {
        "line": 4,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "msb": 0
        }
      },
      {
        "line": 5,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "n": 3
        }
      },
      {
        "line": 7,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "n": 1
        }
      },
      {
        "line": 8,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "msb": 1
        }
      },
      {
        "line": 7,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "n": 0
        }
      },
      {
        "line": 8,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "msb": 2
        }
      },
      {
        "line": 9,
        "step": 8,
        "action": "RETURN",
        "vars": {
          "__return__": 4
        }
      }
    ],
    "id": 900,
    "task_id": 302,
    "exist_function": [
      "set_Bit_Number"
    ]
  },
  {
    "code": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)",
    "entry_point": "set_Bit_Number",
    "input": [
      10
    ],
    "output": 8,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 10
        }
      },
      {
        "line": 4,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "msb": 0
        }
      },
      {
        "line": 5,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "n": 5
        }
      },
      {
        "line": 7,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "n": 2
        }
      },
      {
        "line": 8,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "msb": 1
        }
      },
      {
        "line": 7,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "n": 1
        }
      },
      {
        "line": 8,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "msb": 2
        }
      },
      {
        "line": 7,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "n": 0
        }
      },
      {
        "line": 8,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "msb": 3
        }
      },
      {
        "line": 9,
        "step": 10,
        "action": "RETURN",
        "vars": {
          "__return__": 8
        }
      }
    ],
    "id": 901,
    "task_id": 302,
    "exist_function": [
      "set_Bit_Number"
    ]
  },
  {
    "code": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)",
    "entry_point": "set_Bit_Number",
    "input": [
      18
    ],
    "output": 16,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 18
        }
      },
      {
        "line": 4,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "msb": 0
        }
      },
      {
        "line": 5,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "n": 9
        }
      },
      {
        "line": 7,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "n": 4
        }
      },
      {
        "line": 8,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "msb": 1
        }
      },
      {
        "line": 7,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "n": 2
        }
      },
      {
        "line": 8,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "msb": 2
        }
      },
      {
        "line": 7,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "n": 1
        }
      },
      {
        "line": 8,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "msb": 3
        }
      },
      {
        "line": 7,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "n": 0
        }
      },
      {
        "line": 8,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "msb": 4
        }
      },
      {
        "line": 9,
        "step": 12,
        "action": "RETURN",
        "vars": {
          "__return__": 16
        }
      }
    ],
    "id": 902,
    "task_id": 302,
    "exist_function": [
      "set_Bit_Number"
    ]
  },
  {
    "code": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True",
    "entry_point": "solve",
    "input": [
      [
        1,
        0,
        2
      ],
      3
    ],
    "output": true,
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "a": [
            1,
            0,
            2
          ],
          "n": 3
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "mx": -9223372036854775808
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 7,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "mx": 1
        }
      },
      {
        "line": 4,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 8,
        "step": 6,
        "action": "RETURN",
        "vars": {
          "__return__": true
        }
      }
    ],
    "id": 903,
    "task_id": 303,
    "exist_function": [
      "solve"
    ]
  },
  {
    "code": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True",
    "entry_point": "solve",
    "input": [
      [
        1,
        2,
        1
      ],
      3
    ],
    "output": true,
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "a": [
            1,
            2,
            1
          ],
          "n": 3
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "mx": -9223372036854775808
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 7,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "mx": 1
        }
      },
      {
        "line": 4,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 7,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "mx": 2
        }
      },
      {
        "line": 8,
        "step": 7,
        "action": "RETURN",
        "vars": {
          "__return__": true
        }
      }
    ],
    "id": 905,
    "task_id": 303,
    "exist_function": [
      "solve"
    ]
  },
  {
    "code": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index]",
    "entry_point": "find_Element",
    "input": [
      [
        1,
        2,
        3,
        4,
        5
      ],
      [
        [
          0,
          2
        ],
        [
          0,
          3
        ]
      ],
      2,
      1
    ],
    "output": 3,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "arr": [
            1,
            2,
            3,
            4,
            5
          ],
          "ranges": [
            [
              0,
              2
            ],
            [
              0,
              3
            ]
          ],
          "rotations": 2,
          "index": 1
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "left": 0
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "right": 3
        }
      },
      {
        "line": 9,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "index": 0
        }
      },
      {
        "line": 2,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 4,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "right": 2
        }
      },
      {
        "line": 7,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "index": 2
        }
      },
      {
        "line": 10,
        "step": 9,
        "action": "RETURN",
        "vars": {
          "__return__": 3
        }
      }
    ],
    "id": 906,
    "task_id": 304,
    "exist_function": [
      "find_Element"
    ]
  },
  {
    "code": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index]",
    "entry_point": "find_Element",
    "input": [
      [
        1,
        2,
        3,
        4
      ],
      [
        [
          0,
          1
        ],
        [
          0,
          2
        ]
      ],
      1,
      2
    ],
    "output": 3,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "arr": [
            1,
            2,
            3,
            4
          ],
          "ranges": [
            [
              0,
              1
            ],
            [
              0,
              2
            ]
          ],
          "rotations": 1,
          "index": 2
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "left": 0
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "right": 1
        }
      },
      {
        "line": 10,
        "step": 5,
        "action": "RETURN",
        "vars": {
          "__return__": 3
        }
      }
    ],
    "id": 907,
    "task_id": 304,
    "exist_function": [
      "find_Element"
    ]
  },
  {
    "code": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index]",
    "entry_point": "find_Element",
    "input": [
      [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      [
        [
          0,
          1
        ],
        [
          0,
          2
        ]
      ],
      1,
      1
    ],
    "output": 1,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "arr": [
            1,
            2,
            3,
            4,
            5,
            6
          ],
          "ranges": [
            [
              0,
              1
            ],
            [
              0,
              2
            ]
          ],
          "rotations": 1,
          "index": 1
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "left": 0
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "right": 1
        }
      },
      {
        "line": 9,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "index": 0
        }
      },
      {
        "line": 10,
        "step": 6,
        "action": "RETURN",
        "vars": {
          "__return__": 1
        }
      }
    ],
    "id": 908,
    "task_id": 304,
    "exist_function": [
      "find_Element"
    ]
  },
  {
    "code": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]",
    "entry_point": "max_sum_increasing_subseq",
    "input": [
      [
        1,
        101,
        2,
        3,
        100,
        4,
        5
      ],
      7,
      4,
      6
    ],
    "output": 11,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "a": [
            1,
            101,
            2,
            3,
            100,
            4,
            5
          ],
          "n": 7,
          "index": 4,
          "k": 6
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "dp": [
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ]
          ]
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 8,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "dp[0][0]": 1
        }
      },
      {
        "line": 4,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "dp[0][1]": 102
        }
      },
      {
        "line": 4,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "dp[0][2]": 3
        }
      },
      {
        "line": 4,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 6,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "dp[0][3]": 4
        }
      },
      {
        "line": 4,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 6,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "dp[0][4]": 101
        }
      },
      {
        "line": 4,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 6,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "dp[0][5]": 5
        }
      },
      {
        "line": 4,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 6,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "dp[0][6]": 6
        }
      },
      {
        "line": 9,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 10,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 17,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "dp[1][0]": 1
        }
      },
      {
        "line": 10,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 17,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "dp[1][1]": 102
        }
      },
      {
        "line": 10,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 17,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "dp[1][2]": 3
        }
      },
      {
        "line": 10,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 17,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "dp[1][3]": 4
        }
      },
      {
        "line": 10,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 17,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "dp[1][4]": 101
        }
      },
      {
        "line": 10,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 17,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "dp[1][5]": 5
        }
      },
      {
        "line": 10,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 17,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "dp[1][6]": 6
        }
      },
      {
        "line": 9,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 10,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 17,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "dp[2][0]": 1
        }
      },
      {
        "line": 10,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 17,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "dp[2][1]": 102
        }
      },
      {
        "line": 10,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 17,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "dp[2][2]": 3
        }
      },
      {
        "line": 10,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 13,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "dp[2][3]": 6
        }
      },
      {
        "line": 10,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 13,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "dp[2][4]": 103
        }
      },
      {
        "line": 10,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 13,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "dp[2][5]": 7
        }
      },
      {
        "line": 10,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 13,
        "step": 46,
        "action": "EXECUTE",
        "vars": {
          "dp[2][6]": 8
        }
      },
      {
        "line": 9,
        "step": 47,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 10,
        "step": 48,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 17,
        "step": 49,
        "action": "EXECUTE",
        "vars": {
          "dp[3][0]": 1
        }
      },
      {
        "line": 10,
        "step": 50,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 17,
        "step": 51,
        "action": "EXECUTE",
        "vars": {
          "dp[3][1]": 102
        }
      },
      {
        "line": 10,
        "step": 52,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 17,
        "step": 53,
        "action": "EXECUTE",
        "vars": {
          "dp[3][2]": 3
        }
      },
      {
        "line": 10,
        "step": 54,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 17,
        "step": 55,
        "action": "EXECUTE",
        "vars": {
          "dp[3][3]": 6
        }
      },
      {
        "line": 10,
        "step": 56,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 13,
        "step": 57,
        "action": "EXECUTE",
        "vars": {
          "dp[3][4]": 106
        }
      },
      {
        "line": 10,
        "step": 58,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 13,
        "step": 59,
        "action": "EXECUTE",
        "vars": {
          "dp[3][5]": 10
        }
      },
      {
        "line": 10,
        "step": 60,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 13,
        "step": 61,
        "action": "EXECUTE",
        "vars": {
          "dp[3][6]": 11
        }
      },
      {
        "line": 9,
        "step": 62,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 10,
        "step": 63,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 17,
        "step": 64,
        "action": "EXECUTE",
        "vars": {
          "dp[4][0]": 1
        }
      },
      {
        "line": 10,
        "step": 65,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 17,
        "step": 66,
        "action": "EXECUTE",
        "vars": {
          "dp[4][1]": 102
        }
      },
      {
        "line": 10,
        "step": 67,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 17,
        "step": 68,
        "action": "EXECUTE",
        "vars": {
          "dp[4][2]": 3
        }
      },
      {
        "line": 10,
        "step": 69,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 17,
        "step": 70,
        "action": "EXECUTE",
        "vars": {
          "dp[4][3]": 6
        }
      },
      {
        "line": 10,
        "step": 71,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 17,
        "step": 72,
        "action": "EXECUTE",
        "vars": {
          "dp[4][4]": 106
        }
      },
      {
        "line": 10,
        "step": 73,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 17,
        "step": 74,
        "action": "EXECUTE",
        "vars": {
          "dp[4][5]": 10
        }
      },
      {
        "line": 10,
        "step": 75,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 17,
        "step": 76,
        "action": "EXECUTE",
        "vars": {
          "dp[4][6]": 11
        }
      },
      {
        "line": 9,
        "step": 77,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 10,
        "step": 78,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 17,
        "step": 79,
        "action": "EXECUTE",
        "vars": {
          "dp[5][0]": 1
        }
      },
      {
        "line": 10,
        "step": 80,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 17,
        "step": 81,
        "action": "EXECUTE",
        "vars": {
          "dp[5][1]": 102
        }
      },
      {
        "line": 10,
        "step": 82,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 17,
        "step": 83,
        "action": "EXECUTE",
        "vars": {
          "dp[5][2]": 3
        }
      },
      {
        "line": 10,
        "step": 84,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 17,
        "step": 85,
        "action": "EXECUTE",
        "vars": {
          "dp[5][3]": 6
        }
      },
      {
        "line": 10,
        "step": 86,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 17,
        "step": 87,
        "action": "EXECUTE",
        "vars": {
          "dp[5][4]": 106
        }
      },
      {
        "line": 10,
        "step": 88,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 17,
        "step": 89,
        "action": "EXECUTE",
        "vars": {
          "dp[5][5]": 10
        }
      },
      {
        "line": 10,
        "step": 90,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 13,
        "step": 91,
        "action": "EXECUTE",
        "vars": {
          "dp[5][6]": 15
        }
      },
      {
        "line": 9,
        "step": 92,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 10,
        "step": 93,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 17,
        "step": 94,
        "action": "EXECUTE",
        "vars": {
          "dp[6][0]": 1
        }
      },
      {
        "line": 10,
        "step": 95,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 17,
        "step": 96,
        "action": "EXECUTE",
        "vars": {
          "dp[6][1]": 102
        }
      },
      {
        "line": 10,
        "step": 97,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 17,
        "step": 98,
        "action": "EXECUTE",
        "vars": {
          "dp[6][2]": 3
        }
      },
      {
        "line": 10,
        "step": 99,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 17,
        "step": 100,
        "action": "EXECUTE",
        "vars": {
          "dp[6][3]": 6
        }
      },
      {
        "line": 10,
        "step": 101,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 17,
        "step": 102,
        "action": "EXECUTE",
        "vars": {
          "dp[6][4]": 106
        }
      },
      {
        "line": 10,
        "step": 103,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 17,
        "step": 104,
        "action": "EXECUTE",
        "vars": {
          "dp[6][5]": 10
        }
      },
      {
        "line": 10,
        "step": 105,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 17,
        "step": 106,
        "action": "EXECUTE",
        "vars": {
          "dp[6][6]": 15
        }
      },
      {
        "line": 18,
        "step": 107,
        "action": "RETURN",
        "vars": {
          "__return__": 11
        }
      }
    ],
    "id": 912,
    "task_id": 306,
    "exist_function": [
      "max_sum_increasing_subseq"
    ]
  },
  {
    "code": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]",
    "entry_point": "max_sum_increasing_subseq",
    "input": [
      [
        1,
        101,
        2,
        3,
        100,
        4,
        5
      ],
      7,
      2,
      5
    ],
    "output": 7,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "a": [
            1,
            101,
            2,
            3,
            100,
            4,
            5
          ],
          "n": 7,
          "index": 2,
          "k": 5
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "dp": [
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ]
          ]
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 8,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "dp[0][0]": 1
        }
      },
      {
        "line": 4,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "dp[0][1]": 102
        }
      },
      {
        "line": 4,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "dp[0][2]": 3
        }
      },
      {
        "line": 4,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 6,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "dp[0][3]": 4
        }
      },
      {
        "line": 4,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 6,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "dp[0][4]": 101
        }
      },
      {
        "line": 4,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 6,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "dp[0][5]": 5
        }
      },
      {
        "line": 4,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 6,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "dp[0][6]": 6
        }
      },
      {
        "line": 9,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 10,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 17,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "dp[1][0]": 1
        }
      },
      {
        "line": 10,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 17,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "dp[1][1]": 102
        }
      },
      {
        "line": 10,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 17,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "dp[1][2]": 3
        }
      },
      {
        "line": 10,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 17,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "dp[1][3]": 4
        }
      },
      {
        "line": 10,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 17,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "dp[1][4]": 101
        }
      },
      {
        "line": 10,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 17,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "dp[1][5]": 5
        }
      },
      {
        "line": 10,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 17,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "dp[1][6]": 6
        }
      },
      {
        "line": 9,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 10,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 17,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "dp[2][0]": 1
        }
      },
      {
        "line": 10,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 17,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "dp[2][1]": 102
        }
      },
      {
        "line": 10,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 17,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "dp[2][2]": 3
        }
      },
      {
        "line": 10,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 13,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "dp[2][3]": 6
        }
      },
      {
        "line": 10,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 13,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "dp[2][4]": 103
        }
      },
      {
        "line": 10,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 13,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "dp[2][5]": 7
        }
      },
      {
        "line": 10,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 13,
        "step": 46,
        "action": "EXECUTE",
        "vars": {
          "dp[2][6]": 8
        }
      },
      {
        "line": 9,
        "step": 47,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 10,
        "step": 48,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 17,
        "step": 49,
        "action": "EXECUTE",
        "vars": {
          "dp[3][0]": 1
        }
      },
      {
        "line": 10,
        "step": 50,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 17,
        "step": 51,
        "action": "EXECUTE",
        "vars": {
          "dp[3][1]": 102
        }
      },
      {
        "line": 10,
        "step": 52,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 17,
        "step": 53,
        "action": "EXECUTE",
        "vars": {
          "dp[3][2]": 3
        }
      },
      {
        "line": 10,
        "step": 54,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 17,
        "step": 55,
        "action": "EXECUTE",
        "vars": {
          "dp[3][3]": 6
        }
      },
      {
        "line": 10,
        "step": 56,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 13,
        "step": 57,
        "action": "EXECUTE",
        "vars": {
          "dp[3][4]": 106
        }
      },
      {
        "line": 10,
        "step": 58,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 13,
        "step": 59,
        "action": "EXECUTE",
        "vars": {
          "dp[3][5]": 10
        }
      },
      {
        "line": 10,
        "step": 60,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 13,
        "step": 61,
        "action": "EXECUTE",
        "vars": {
          "dp[3][6]": 11
        }
      },
      {
        "line": 9,
        "step": 62,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 10,
        "step": 63,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 17,
        "step": 64,
        "action": "EXECUTE",
        "vars": {
          "dp[4][0]": 1
        }
      },
      {
        "line": 10,
        "step": 65,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 17,
        "step": 66,
        "action": "EXECUTE",
        "vars": {
          "dp[4][1]": 102
        }
      },
      {
        "line": 10,
        "step": 67,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 17,
        "step": 68,
        "action": "EXECUTE",
        "vars": {
          "dp[4][2]": 3
        }
      },
      {
        "line": 10,
        "step": 69,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 17,
        "step": 70,
        "action": "EXECUTE",
        "vars": {
          "dp[4][3]": 6
        }
      },
      {
        "line": 10,
        "step": 71,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 17,
        "step": 72,
        "action": "EXECUTE",
        "vars": {
          "dp[4][4]": 106
        }
      },
      {
        "line": 10,
        "step": 73,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 17,
        "step": 74,
        "action": "EXECUTE",
        "vars": {
          "dp[4][5]": 10
        }
      },
      {
        "line": 10,
        "step": 75,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 17,
        "step": 76,
        "action": "EXECUTE",
        "vars": {
          "dp[4][6]": 11
        }
      },
      {
        "line": 9,
        "step": 77,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 10,
        "step": 78,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 17,
        "step": 79,
        "action": "EXECUTE",
        "vars": {
          "dp[5][0]": 1
        }
      },
      {
        "line": 10,
        "step": 80,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 17,
        "step": 81,
        "action": "EXECUTE",
        "vars": {
          "dp[5][1]": 102
        }
      },
      {
        "line": 10,
        "step": 82,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 17,
        "step": 83,
        "action": "EXECUTE",
        "vars": {
          "dp[5][2]": 3
        }
      },
      {
        "line": 10,
        "step": 84,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 17,
        "step": 85,
        "action": "EXECUTE",
        "vars": {
          "dp[5][3]": 6
        }
      },
      {
        "line": 10,
        "step": 86,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 17,
        "step": 87,
        "action": "EXECUTE",
        "vars": {
          "dp[5][4]": 106
        }
      },
      {
        "line": 10,
        "step": 88,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 17,
        "step": 89,
        "action": "EXECUTE",
        "vars": {
          "dp[5][5]": 10
        }
      },
      {
        "line": 10,
        "step": 90,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 13,
        "step": 91,
        "action": "EXECUTE",
        "vars": {
          "dp[5][6]": 15
        }
      },
      {
        "line": 9,
        "step": 92,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 10,
        "step": 93,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 17,
        "step": 94,
        "action": "EXECUTE",
        "vars": {
          "dp[6][0]": 1
        }
      },
      {
        "line": 10,
        "step": 95,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 17,
        "step": 96,
        "action": "EXECUTE",
        "vars": {
          "dp[6][1]": 102
        }
      },
      {
        "line": 10,
        "step": 97,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 17,
        "step": 98,
        "action": "EXECUTE",
        "vars": {
          "dp[6][2]": 3
        }
      },
      {
        "line": 10,
        "step": 99,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 17,
        "step": 100,
        "action": "EXECUTE",
        "vars": {
          "dp[6][3]": 6
        }
      },
      {
        "line": 10,
        "step": 101,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 17,
        "step": 102,
        "action": "EXECUTE",
        "vars": {
          "dp[6][4]": 106
        }
      },
      {
        "line": 10,
        "step": 103,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 17,
        "step": 104,
        "action": "EXECUTE",
        "vars": {
          "dp[6][5]": 10
        }
      },
      {
        "line": 10,
        "step": 105,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 17,
        "step": 106,
        "action": "EXECUTE",
        "vars": {
          "dp[6][6]": 15
        }
      },
      {
        "line": 18,
        "step": 107,
        "action": "RETURN",
        "vars": {
          "__return__": 7
        }
      }
    ],
    "id": 913,
    "task_id": 306,
    "exist_function": [
      "max_sum_increasing_subseq"
    ]
  },
  {
    "code": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]",
    "entry_point": "max_sum_increasing_subseq",
    "input": [
      [
        11,
        15,
        19,
        21,
        26,
        28,
        31
      ],
      7,
      2,
      4
    ],
    "output": 71,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "a": [
            11,
            15,
            19,
            21,
            26,
            28,
            31
          ],
          "n": 7,
          "index": 2,
          "k": 4
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "dp": [
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ]
          ]
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 8,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "dp[0][0]": 11
        }
      },
      {
        "line": 4,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "dp[0][1]": 26
        }
      },
      {
        "line": 4,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "dp[0][2]": 30
        }
      },
      {
        "line": 4,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 6,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "dp[0][3]": 32
        }
      },
      {
        "line": 4,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 6,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "dp[0][4]": 37
        }
      },
      {
        "line": 4,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 6,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "dp[0][5]": 39
        }
      },
      {
        "line": 4,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 6,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "dp[0][6]": 42
        }
      },
      {
        "line": 9,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 10,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 17,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "dp[1][0]": 11
        }
      },
      {
        "line": 10,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 17,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "dp[1][1]": 26
        }
      },
      {
        "line": 10,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 13,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "dp[1][2]": 45
        }
      },
      {
        "line": 10,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 13,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "dp[1][3]": 47
        }
      },
      {
        "line": 10,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 13,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "dp[1][4]": 52
        }
      },
      {
        "line": 10,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 13,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "dp[1][5]": 54
        }
      },
      {
        "line": 10,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 13,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "dp[1][6]": 57
        }
      },
      {
        "line": 9,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 10,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 17,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "dp[2][0]": 11
        }
      },
      {
        "line": 10,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 17,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "dp[2][1]": 26
        }
      },
      {
        "line": 10,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 17,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "dp[2][2]": 45
        }
      },
      {
        "line": 10,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 13,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "dp[2][3]": 66
        }
      },
      {
        "line": 10,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 13,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "dp[2][4]": 71
        }
      },
      {
        "line": 10,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 13,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "dp[2][5]": 73
        }
      },
      {
        "line": 10,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 13,
        "step": 46,
        "action": "EXECUTE",
        "vars": {
          "dp[2][6]": 76
        }
      },
      {
        "line": 9,
        "step": 47,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 10,
        "step": 48,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 17,
        "step": 49,
        "action": "EXECUTE",
        "vars": {
          "dp[3][0]": 11
        }
      },
      {
        "line": 10,
        "step": 50,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 17,
        "step": 51,
        "action": "EXECUTE",
        "vars": {
          "dp[3][1]": 26
        }
      },
      {
        "line": 10,
        "step": 52,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 17,
        "step": 53,
        "action": "EXECUTE",
        "vars": {
          "dp[3][2]": 45
        }
      },
      {
        "line": 10,
        "step": 54,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 17,
        "step": 55,
        "action": "EXECUTE",
        "vars": {
          "dp[3][3]": 66
        }
      },
      {
        "line": 10,
        "step": 56,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 13,
        "step": 57,
        "action": "EXECUTE",
        "vars": {
          "dp[3][4]": 92
        }
      },
      {
        "line": 10,
        "step": 58,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 13,
        "step": 59,
        "action": "EXECUTE",
        "vars": {
          "dp[3][5]": 94
        }
      },
      {
        "line": 10,
        "step": 60,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 13,
        "step": 61,
        "action": "EXECUTE",
        "vars": {
          "dp[3][6]": 97
        }
      },
      {
        "line": 9,
        "step": 62,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 10,
        "step": 63,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 17,
        "step": 64,
        "action": "EXECUTE",
        "vars": {
          "dp[4][0]": 11
        }
      },
      {
        "line": 10,
        "step": 65,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 17,
        "step": 66,
        "action": "EXECUTE",
        "vars": {
          "dp[4][1]": 26
        }
      },
      {
        "line": 10,
        "step": 67,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 17,
        "step": 68,
        "action": "EXECUTE",
        "vars": {
          "dp[4][2]": 45
        }
      },
      {
        "line": 10,
        "step": 69,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 17,
        "step": 70,
        "action": "EXECUTE",
        "vars": {
          "dp[4][3]": 66
        }
      },
      {
        "line": 10,
        "step": 71,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 17,
        "step": 72,
        "action": "EXECUTE",
        "vars": {
          "dp[4][4]": 92
        }
      },
      {
        "line": 10,
        "step": 73,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 13,
        "step": 74,
        "action": "EXECUTE",
        "vars": {
          "dp[4][5]": 120
        }
      },
      {
        "line": 10,
        "step": 75,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 13,
        "step": 76,
        "action": "EXECUTE",
        "vars": {
          "dp[4][6]": 123
        }
      },
      {
        "line": 9,
        "step": 77,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 10,
        "step": 78,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 17,
        "step": 79,
        "action": "EXECUTE",
        "vars": {
          "dp[5][0]": 11
        }
      },
      {
        "line": 10,
        "step": 80,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 17,
        "step": 81,
        "action": "EXECUTE",
        "vars": {
          "dp[5][1]": 26
        }
      },
      {
        "line": 10,
        "step": 82,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 17,
        "step": 83,
        "action": "EXECUTE",
        "vars": {
          "dp[5][2]": 45
        }
      },
      {
        "line": 10,
        "step": 84,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 17,
        "step": 85,
        "action": "EXECUTE",
        "vars": {
          "dp[5][3]": 66
        }
      },
      {
        "line": 10,
        "step": 86,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 17,
        "step": 87,
        "action": "EXECUTE",
        "vars": {
          "dp[5][4]": 92
        }
      },
      {
        "line": 10,
        "step": 88,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 17,
        "step": 89,
        "action": "EXECUTE",
        "vars": {
          "dp[5][5]": 120
        }
      },
      {
        "line": 10,
        "step": 90,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 13,
        "step": 91,
        "action": "EXECUTE",
        "vars": {
          "dp[5][6]": 151
        }
      },
      {
        "line": 9,
        "step": 92,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 10,
        "step": 93,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 17,
        "step": 94,
        "action": "EXECUTE",
        "vars": {
          "dp[6][0]": 11
        }
      },
      {
        "line": 10,
        "step": 95,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 17,
        "step": 96,
        "action": "EXECUTE",
        "vars": {
          "dp[6][1]": 26
        }
      },
      {
        "line": 10,
        "step": 97,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 17,
        "step": 98,
        "action": "EXECUTE",
        "vars": {
          "dp[6][2]": 45
        }
      },
      {
        "line": 10,
        "step": 99,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 17,
        "step": 100,
        "action": "EXECUTE",
        "vars": {
          "dp[6][3]": 66
        }
      },
      {
        "line": 10,
        "step": 101,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 17,
        "step": 102,
        "action": "EXECUTE",
        "vars": {
          "dp[6][4]": 92
        }
      },
      {
        "line": 10,
        "step": 103,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 17,
        "step": 104,
        "action": "EXECUTE",
        "vars": {
          "dp[6][5]": 120
        }
      },
      {
        "line": 10,
        "step": 105,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 17,
        "step": 106,
        "action": "EXECUTE",
        "vars": {
          "dp[6][6]": 151
        }
      },
      {
        "line": 18,
        "step": 107,
        "action": "RETURN",
        "vars": {
          "__return__": 71
        }
      }
    ],
    "id": 914,
    "task_id": 306,
    "exist_function": [
      "max_sum_increasing_subseq"
    ]
  },
  {
    "code": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon",
    "entry_point": "colon_tuplex",
    "input": [
      "('HELLO', 5, [], True)",
      2,
      50
    ],
    "output": "('HELLO', 5, [50], True)",
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "tuplex": "('HELLO', 5, [], True)",
          "m": 2,
          "n": 50
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "tuplex_colon": "('HELLO', 5, [], True)"
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "tuplex_colon[2][0]": 50
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": "('HELLO', 5, [50], True)"
        }
      }
    ],
    "id": 915,
    "task_id": 307,
    "exist_function": [
      "colon_tuplex"
    ]
  },
  {
    "code": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon",
    "entry_point": "colon_tuplex",
    "input": [
      "('HELLO', 5, [], True)",
      2,
      100
    ],
    "output": "('HELLO', 5, [100], True)",
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "tuplex": "('HELLO', 5, [], True)",
          "m": 2,
          "n": 100
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "tuplex_colon": "('HELLO', 5, [], True)"
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "tuplex_colon[2][0]": 100
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": "('HELLO', 5, [100], True)"
        }
      }
    ],
    "id": 916,
    "task_id": 307,
    "exist_function": [
      "colon_tuplex"
    ]
  }
]