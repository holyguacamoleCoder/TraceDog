[
  {
    "code": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False",
    "entry_point": "rearrange_bigger",
    "input": [
      12
    ],
    "output": 21,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 12
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "nums": [
            "1",
            "2"
          ]
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "z": [
            "1",
            "2"
          ]
        }
      },
      {
        "line": 6,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "y": "2"
        }
      },
      {
        "line": 7,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "z": [
            "1"
          ]
        }
      },
      {
        "line": 9,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "nums[0]": "2",
          "nums[1]": "1"
        }
      },
      {
        "line": 10,
        "step": 8,
        "action": "RETURN",
        "vars": {
          "__return__": 21
        }
      }
    ],
    "id": 1209,
    "task_id": 407,
    "exist_function": [
      "rearrange_bigger"
    ]
  },
  {
    "code": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False",
    "entry_point": "rearrange_bigger",
    "input": [
      102
    ],
    "output": 120,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 102
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "nums": [
            "1",
            "0",
            "2"
          ]
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "z": [
            "0",
            "2"
          ]
        }
      },
      {
        "line": 6,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "y": "2"
        }
      },
      {
        "line": 7,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "z": [
            "0"
          ]
        }
      },
      {
        "line": 9,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "nums[2]": "0",
          "nums[1]": "2"
        }
      },
      {
        "line": 10,
        "step": 8,
        "action": "RETURN",
        "vars": {
          "__return__": 120
        }
      }
    ],
    "id": 1211,
    "task_id": 407,
    "exist_function": [
      "rearrange_bigger"
    ]
  },
  {
    "code": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs",
    "entry_point": "k_smallest_pairs",
    "input": [
      [
        1,
        3,
        7
      ],
      [
        2,
        4,
        6
      ],
      2
    ],
    "output": [
      [
        1,
        2
      ],
      [
        1,
        4
      ]
    ],
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "nums1": [
            1,
            3,
            7
          ],
          "nums2": [
            2,
            4,
            6
          ],
          "k": 2
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "queue": []
        }
      },
      {
        "line": 7,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "queue[0]": [
            3,
            0,
            0
          ]
        }
      },
      {
        "line": 8,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "pairs": []
        }
      },
      {
        "line": 10,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "queue": [],
          "_": 3,
          "j": 0,
          "i": 0
        }
      },
      {
        "line": 11,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "pairs[0]": [
            1,
            2
          ]
        }
      },
      {
        "line": 12,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "queue[0]": [
            5,
            0,
            1
          ]
        }
      },
      {
        "line": 14,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "queue[1]": [
            5,
            1,
            0
          ]
        }
      },
      {
        "line": 10,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "queue[0][1]": 1,
          "queue[0][2]": 0,
          "_": 5,
          "j": 1
        }
      },
      {
        "line": 11,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "pairs[1]": [
            1,
            4
          ]
        }
      },
      {
        "line": 12,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "queue[1]": [
            7,
            0,
            2
          ]
        }
      },
      {
        "line": 15,
        "step": 12,
        "action": "RETURN",
        "vars": {
          "__return__": [
            [
              1,
              2
            ],
            [
              1,
              4
            ]
          ]
        }
      }
    ],
    "id": 1212,
    "task_id": 408,
    "exist_function": [
      "k_smallest_pairs",
      "push"
    ]
  },
  {
    "code": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs",
    "entry_point": "k_smallest_pairs",
    "input": [
      [
        1,
        3,
        7
      ],
      [
        2,
        4,
        6
      ],
      1
    ],
    "output": [
      [
        1,
        2
      ]
    ],
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "nums1": [
            1,
            3,
            7
          ],
          "nums2": [
            2,
            4,
            6
          ],
          "k": 1
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "queue": []
        }
      },
      {
        "line": 7,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "queue[0]": [
            3,
            0,
            0
          ]
        }
      },
      {
        "line": 8,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "pairs": []
        }
      },
      {
        "line": 10,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "queue": [],
          "_": 3,
          "j": 0,
          "i": 0
        }
      },
      {
        "line": 11,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "pairs[0]": [
            1,
            2
          ]
        }
      },
      {
        "line": 12,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "queue[0]": [
            5,
            0,
            1
          ]
        }
      },
      {
        "line": 14,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "queue[1]": [
            5,
            1,
            0
          ]
        }
      },
      {
        "line": 15,
        "step": 9,
        "action": "RETURN",
        "vars": {
          "__return__": [
            [
              1,
              2
            ]
          ]
        }
      }
    ],
    "id": 1213,
    "task_id": 408,
    "exist_function": [
      "k_smallest_pairs",
      "push"
    ]
  },
  {
    "code": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs",
    "entry_point": "k_smallest_pairs",
    "input": [
      [
        1,
        3,
        7
      ],
      [
        2,
        4,
        6
      ],
      7
    ],
    "output": [
      [
        1,
        2
      ],
      [
        1,
        4
      ],
      [
        3,
        2
      ],
      [
        1,
        6
      ],
      [
        3,
        4
      ],
      [
        3,
        6
      ],
      [
        7,
        2
      ]
    ],
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "nums1": [
            1,
            3,
            7
          ],
          "nums2": [
            2,
            4,
            6
          ],
          "k": 7
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "queue": []
        }
      },
      {
        "line": 7,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "queue[0]": [
            3,
            0,
            0
          ]
        }
      },
      {
        "line": 8,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "pairs": []
        }
      },
      {
        "line": 10,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "queue": [],
          "_": 3,
          "j": 0,
          "i": 0
        }
      },
      {
        "line": 11,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "pairs[0]": [
            1,
            2
          ]
        }
      },
      {
        "line": 12,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "queue[0]": [
            5,
            0,
            1
          ]
        }
      },
      {
        "line": 14,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "queue[1]": [
            5,
            1,
            0
          ]
        }
      },
      {
        "line": 10,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "queue[0][1]": 1,
          "queue[0][2]": 0,
          "_": 5,
          "j": 1
        }
      },
      {
        "line": 11,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "pairs[1]": [
            1,
            4
          ]
        }
      },
      {
        "line": 12,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "queue[1]": [
            7,
            0,
            2
          ]
        }
      },
      {
        "line": 10,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "queue[0][1]": 0,
          "queue[0][2]": 2,
          "queue[0][0]": 7,
          "j": 0,
          "i": 1
        }
      },
      {
        "line": 11,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "pairs[2]": [
            3,
            2
          ]
        }
      },
      {
        "line": 12,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "queue[1]": [
            7,
            1,
            1
          ]
        }
      },
      {
        "line": 14,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "queue[2]": [
            9,
            2,
            0
          ]
        }
      },
      {
        "line": 10,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "queue[1][1]": 2,
          "queue[1][2]": 0,
          "queue[0][1]": 1,
          "queue[1][0]": 9,
          "queue[0][2]": 1,
          "_": 7,
          "j": 2,
          "i": 0
        }
      },
      {
        "line": 11,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "pairs[3]": [
            1,
            6
          ]
        }
      },
      {
        "line": 10,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "queue[0][1]": 2,
          "queue[0][2]": 0,
          "queue[0][0]": 9,
          "j": 1,
          "i": 1
        }
      },
      {
        "line": 11,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "pairs[4]": [
            3,
            4
          ]
        }
      },
      {
        "line": 12,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "queue[0][2]": 2,
          "queue[0][1]": 1,
          "queue[1]": [
            9,
            2,
            0
          ]
        }
      },
      {
        "line": 10,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "queue[0][1]": 2,
          "queue[0][2]": 0,
          "_": 9,
          "j": 2
        }
      },
      {
        "line": 11,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "pairs[5]": [
            3,
            6
          ]
        }
      },
      {
        "line": 10,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "i": 2,
          "queue": [],
          "j": 0
        }
      },
      {
        "line": 11,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "pairs[6]": [
            7,
            2
          ]
        }
      },
      {
        "line": 12,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "queue[0]": [
            11,
            2,
            1
          ]
        }
      },
      {
        "line": 15,
        "step": 26,
        "action": "RETURN",
        "vars": {
          "__return__": [
            [
              1,
              2
            ],
            [
              1,
              4
            ],
            [
              3,
              2
            ],
            [
              1,
              6
            ],
            [
              3,
              4
            ],
            [
              3,
              6
            ],
            [
              7,
              2
            ]
          ]
        }
      }
    ],
    "id": 1214,
    "task_id": 408,
    "exist_function": [
      "k_smallest_pairs",
      "push"
    ]
  },
  {
    "code": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l",
    "entry_point": "remove_odd",
    "input": [
      [
        2
      ]
    ],
    "output": [
      2
    ],
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "l": [
            1,
            2,
            3
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "l[0]": 2,
          "l[1]": 3
        }
      },
      {
        "line": 2,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 4,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "l": [
            2
          ]
        }
      },
      {
        "line": 5,
        "step": 6,
        "action": "RETURN",
        "vars": {
          "__return__": [
            2
          ]
        }
      }
    ],
    "id": 1224,
    "task_id": 412,
    "exist_function": [
      "remove_odd"
    ]
  },
  {
    "code": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l",
    "entry_point": "remove_odd",
    "input": [
      [
        2,
        4,
        6
      ]
    ],
    "output": [
      2,
      4,
      6
    ],
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "l": [
            2,
            4,
            6
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 2,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 2,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "RETURN",
        "vars": {
          "__return__": [
            2,
            4,
            6
          ]
        }
      }
    ],
    "id": 1225,
    "task_id": 412,
    "exist_function": [
      "remove_odd"
    ]
  },
  {
    "code": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l",
    "entry_point": "remove_odd",
    "input": [
      [
        10,
        20
      ]
    ],
    "output": [
      10,
      20
    ],
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "l": [
            10,
            20,
            3
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "i": 10
        }
      },
      {
        "line": 2,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 20
        }
      },
      {
        "line": 2,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 4,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "l": [
            10,
            20
          ]
        }
      },
      {
        "line": 5,
        "step": 6,
        "action": "RETURN",
        "vars": {
          "__return__": [
            10,
            20
          ]
        }
      }
    ],
    "id": 1226,
    "task_id": 412,
    "exist_function": [
      "remove_odd"
    ]
  },
  {
    "code": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0",
    "entry_point": "overlapping",
    "input": [
      [
        1,
        4,
        5
      ],
      [
        1,
        4,
        5
      ]
    ],
    "output": 1,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list1": [
            1,
            4,
            5
          ],
          "list2": [
            1,
            4,
            5
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "c": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "d": 0
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "c": 1
        }
      },
      {
        "line": 4,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 5,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "c": 2
        }
      },
      {
        "line": 4,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 5,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "c": 3
        }
      },
      {
        "line": 6,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 7,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "d": 1
        }
      },
      {
        "line": 6,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 7,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "d": 2
        }
      },
      {
        "line": 6,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 7,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "d": 3
        }
      },
      {
        "line": 8,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 9,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 11,
        "step": 18,
        "action": "RETURN",
        "vars": {
          "__return__": 1
        }
      }
    ],
    "id": 1232,
    "task_id": 414,
    "exist_function": [
      "overlapping"
    ]
  },
  {
    "code": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y",
    "entry_point": "max_Product",
    "input": [
      [
        1,
        2,
        3,
        4,
        7,
        0,
        8,
        4
      ]
    ],
    "output": "(7, 8)",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "arr": [
            1,
            2,
            3,
            4,
            7,
            0,
            8,
            4
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "arr_len": 8
        }
      },
      {
        "line": 5,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "x": 1,
          "y": 2
        }
      },
      {
        "line": 6,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 7,
        "step": "5~6",
        "action": "LOOP",
        "vars": {
          "j": "1→2"
        }
      },
      {
        "line": 9,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "y": 3
        }
      },
      {
        "line": 7,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 9,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "y": 4
        }
      },
      {
        "line": 7,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 9,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "y": 7
        }
      },
      {
        "line": 7,
        "step": "12~13",
        "action": "LOOP",
        "vars": {
          "j": "5→6"
        }
      },
      {
        "line": 9,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "y": 8
        }
      },
      {
        "line": 7,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "j": 7
        }
      },
      {
        "line": 6,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 7,
        "step": "17~19",
        "action": "LOOP",
        "vars": {
          "j": "2→4"
        }
      },
      {
        "line": 9,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "x": 2,
          "y": 7
        }
      },
      {
        "line": 7,
        "step": "21~22",
        "action": "LOOP",
        "vars": {
          "j": "5→6"
        }
      },
      {
        "line": 9,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "y": 8
        }
      },
      {
        "line": 7,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "j": 7
        }
      },
      {
        "line": 6,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 7,
        "step": "26~27",
        "action": "LOOP",
        "vars": {
          "j": "3→4"
        }
      },
      {
        "line": 9,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "x": 3,
          "y": 7
        }
      },
      {
        "line": 7,
        "step": "29~30",
        "action": "LOOP",
        "vars": {
          "j": "5→6"
        }
      },
      {
        "line": 9,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "y": 8
        }
      },
      {
        "line": 7,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "j": 7
        }
      },
      {
        "line": 6,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 7,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 9,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "x": 4,
          "y": 7
        }
      },
      {
        "line": 7,
        "step": "36~37",
        "action": "LOOP",
        "vars": {
          "j": "5→6"
        }
      },
      {
        "line": 9,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "y": 8
        }
      },
      {
        "line": 7,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "j": 7
        }
      },
      {
        "line": 6,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 7,
        "step": "41~42",
        "action": "LOOP",
        "vars": {
          "j": "5→6"
        }
      },
      {
        "line": 9,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "x": 7
        }
      },
      {
        "line": 7,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "j": 7
        }
      },
      {
        "line": 6,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 7,
        "step": "46~47",
        "action": "LOOP",
        "vars": {
          "j": "6→7"
        }
      },
      {
        "line": 6,
        "step": "48~49",
        "action": "LOOP",
        "vars": {
          "i": "6→7"
        }
      },
      {
        "line": 10,
        "step": 50,
        "action": "RETURN",
        "vars": {
          "__return__": "(7, 8)"
        }
      }
    ],
    "id": 1233,
    "task_id": 415,
    "exist_function": [
      "max_Product"
    ]
  },
  {
    "code": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y",
    "entry_point": "max_Product",
    "input": [
      [
        0,
        -1,
        -2,
        -4,
        5,
        0,
        -6
      ]
    ],
    "output": "(-4, -6)",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "arr": [
            0,
            -1,
            -2,
            -4,
            5,
            0,
            -6
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "arr_len": 7
        }
      },
      {
        "line": 5,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "x": 0,
          "y": -1
        }
      },
      {
        "line": 6,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 7,
        "step": "5~10",
        "action": "LOOP",
        "vars": {
          "j": "1→6"
        }
      },
      {
        "line": 6,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 7,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 9,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "x": -1,
          "y": -2
        }
      },
      {
        "line": 7,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 9,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "y": -4
        }
      },
      {
        "line": 7,
        "step": "16~18",
        "action": "LOOP",
        "vars": {
          "j": "4→6"
        }
      },
      {
        "line": 9,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "y": -6
        }
      },
      {
        "line": 6,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 7,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 9,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "x": -2,
          "y": -4
        }
      },
      {
        "line": 7,
        "step": "23~25",
        "action": "LOOP",
        "vars": {
          "j": "4→6"
        }
      },
      {
        "line": 9,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "y": -6
        }
      },
      {
        "line": 6,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 7,
        "step": "28~30",
        "action": "LOOP",
        "vars": {
          "j": "4→6"
        }
      },
      {
        "line": 9,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "x": -4
        }
      },
      {
        "line": 6,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 7,
        "step": "33~34",
        "action": "LOOP",
        "vars": {
          "j": "5→6"
        }
      },
      {
        "line": 6,
        "step": "35~36",
        "action": "LOOP",
        "vars": {
          "i": "5→6"
        }
      },
      {
        "line": 10,
        "step": 37,
        "action": "RETURN",
        "vars": {
          "__return__": "(-4, -6)"
        }
      }
    ],
    "id": 1234,
    "task_id": 415,
    "exist_function": [
      "max_Product"
    ]
  },
  {
    "code": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y",
    "entry_point": "max_Product",
    "input": [
      [
        1,
        2,
        3
      ]
    ],
    "output": "(2, 3)",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "arr": [
            1,
            2,
            3
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "arr_len": 3
        }
      },
      {
        "line": 5,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "x": 1,
          "y": 2
        }
      },
      {
        "line": 6,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 7,
        "step": "5~6",
        "action": "LOOP",
        "vars": {
          "j": "1→2"
        }
      },
      {
        "line": 9,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "y": 3
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 9,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "x": 2
        }
      },
      {
        "line": 6,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 10,
        "step": 11,
        "action": "RETURN",
        "vars": {
          "__return__": "(2, 3)"
        }
      }
    ],
    "id": 1235,
    "task_id": 415,
    "exist_function": [
      "max_Product"
    ]
  },
  {
    "code": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]",
    "entry_point": "breakSum",
    "input": [
      12
    ],
    "output": 13,
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 12
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "dp": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        }
      },
      {
        "line": 5,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "dp[1]": 1
        }
      },
      {
        "line": 6,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 7,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "dp[2]": 2
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 7,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "dp[3]": 3
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 7,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "dp[4]": 4
        }
      },
      {
        "line": 6,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 7,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "dp[5]": 5
        }
      },
      {
        "line": 6,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 7,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "dp[6]": 6
        }
      },
      {
        "line": 6,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "i": 7
        }
      },
      {
        "line": 7,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "dp[7]": 7
        }
      },
      {
        "line": 6,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "i": 8
        }
      },
      {
        "line": 7,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "dp[8]": 8
        }
      },
      {
        "line": 6,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "i": 9
        }
      },
      {
        "line": 7,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "dp[9]": 9
        }
      },
      {
        "line": 6,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "i": 10
        }
      },
      {
        "line": 7,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "dp[10]": 10
        }
      },
      {
        "line": 6,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "i": 11
        }
      },
      {
        "line": 7,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "dp[11]": 11
        }
      },
      {
        "line": 6,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "i": 12
        }
      },
      {
        "line": 7,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "dp[12]": 13
        }
      },
      {
        "line": 8,
        "step": 26,
        "action": "RETURN",
        "vars": {
          "__return__": 13
        }
      }
    ],
    "id": 1236,
    "task_id": 416,
    "exist_function": [
      "breakSum"
    ]
  },
  {
    "code": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]",
    "entry_point": "breakSum",
    "input": [
      24
    ],
    "output": 27,
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 24
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "dp": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        }
      },
      {
        "line": 5,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "dp[1]": 1
        }
      },
      {
        "line": 6,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 7,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "dp[2]": 2
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 7,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "dp[3]": 3
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 7,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "dp[4]": 4
        }
      },
      {
        "line": 6,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 7,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "dp[5]": 5
        }
      },
      {
        "line": 6,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 7,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "dp[6]": 6
        }
      },
      {
        "line": 6,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "i": 7
        }
      },
      {
        "line": 7,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "dp[7]": 7
        }
      },
      {
        "line": 6,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "i": 8
        }
      },
      {
        "line": 7,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "dp[8]": 8
        }
      },
      {
        "line": 6,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "i": 9
        }
      },
      {
        "line": 7,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "dp[9]": 9
        }
      },
      {
        "line": 6,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "i": 10
        }
      },
      {
        "line": 7,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "dp[10]": 10
        }
      },
      {
        "line": 6,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "i": 11
        }
      },
      {
        "line": 7,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "dp[11]": 11
        }
      },
      {
        "line": 6,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "i": 12
        }
      },
      {
        "line": 7,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "dp[12]": 13
        }
      },
      {
        "line": 6,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "i": 13
        }
      },
      {
        "line": 7,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "dp[13]": 13
        }
      },
      {
        "line": 6,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "i": 14
        }
      },
      {
        "line": 7,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "dp[14]": 14
        }
      },
      {
        "line": 6,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "i": 15
        }
      },
      {
        "line": 7,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "dp[15]": 15
        }
      },
      {
        "line": 6,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "i": 16
        }
      },
      {
        "line": 7,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "dp[16]": 17
        }
      },
      {
        "line": 6,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "i": 17
        }
      },
      {
        "line": 7,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "dp[17]": 17
        }
      },
      {
        "line": 6,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "i": 18
        }
      },
      {
        "line": 7,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "dp[18]": 19
        }
      },
      {
        "line": 6,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "i": 19
        }
      },
      {
        "line": 7,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "dp[19]": 19
        }
      },
      {
        "line": 6,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "i": 20
        }
      },
      {
        "line": 7,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "dp[20]": 21
        }
      },
      {
        "line": 6,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "i": 21
        }
      },
      {
        "line": 7,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "dp[21]": 22
        }
      },
      {
        "line": 6,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "i": 22
        }
      },
      {
        "line": 7,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "dp[22]": 23
        }
      },
      {
        "line": 6,
        "step": 46,
        "action": "EXECUTE",
        "vars": {
          "i": 23
        }
      },
      {
        "line": 7,
        "step": 47,
        "action": "EXECUTE",
        "vars": {
          "dp[23]": 23
        }
      },
      {
        "line": 6,
        "step": 48,
        "action": "EXECUTE",
        "vars": {
          "i": 24
        }
      },
      {
        "line": 7,
        "step": 49,
        "action": "EXECUTE",
        "vars": {
          "dp[24]": 27
        }
      },
      {
        "line": 8,
        "step": 50,
        "action": "RETURN",
        "vars": {
          "__return__": 27
        }
      }
    ],
    "id": 1237,
    "task_id": 416,
    "exist_function": [
      "breakSum"
    ]
  },
  {
    "code": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]",
    "entry_point": "breakSum",
    "input": [
      23
    ],
    "output": 23,
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 23
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "dp": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        }
      },
      {
        "line": 5,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "dp[1]": 1
        }
      },
      {
        "line": 6,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 7,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "dp[2]": 2
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 7,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "dp[3]": 3
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 7,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "dp[4]": 4
        }
      },
      {
        "line": 6,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 7,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "dp[5]": 5
        }
      },
      {
        "line": 6,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 7,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "dp[6]": 6
        }
      },
      {
        "line": 6,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "i": 7
        }
      },
      {
        "line": 7,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "dp[7]": 7
        }
      },
      {
        "line": 6,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "i": 8
        }
      },
      {
        "line": 7,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "dp[8]": 8
        }
      },
      {
        "line": 6,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "i": 9
        }
      },
      {
        "line": 7,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "dp[9]": 9
        }
      },
      {
        "line": 6,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "i": 10
        }
      },
      {
        "line": 7,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "dp[10]": 10
        }
      },
      {
        "line": 6,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "i": 11
        }
      },
      {
        "line": 7,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "dp[11]": 11
        }
      },
      {
        "line": 6,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "i": 12
        }
      },
      {
        "line": 7,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "dp[12]": 13
        }
      },
      {
        "line": 6,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "i": 13
        }
      },
      {
        "line": 7,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "dp[13]": 13
        }
      },
      {
        "line": 6,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "i": 14
        }
      },
      {
        "line": 7,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "dp[14]": 14
        }
      },
      {
        "line": 6,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "i": 15
        }
      },
      {
        "line": 7,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "dp[15]": 15
        }
      },
      {
        "line": 6,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "i": 16
        }
      },
      {
        "line": 7,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "dp[16]": 17
        }
      },
      {
        "line": 6,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "i": 17
        }
      },
      {
        "line": 7,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "dp[17]": 17
        }
      },
      {
        "line": 6,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "i": 18
        }
      },
      {
        "line": 7,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "dp[18]": 19
        }
      },
      {
        "line": 6,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "i": 19
        }
      },
      {
        "line": 7,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "dp[19]": 19
        }
      },
      {
        "line": 6,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "i": 20
        }
      },
      {
        "line": 7,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "dp[20]": 21
        }
      },
      {
        "line": 6,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "i": 21
        }
      },
      {
        "line": 7,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "dp[21]": 22
        }
      },
      {
        "line": 6,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "i": 22
        }
      },
      {
        "line": 7,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "dp[22]": 23
        }
      },
      {
        "line": 6,
        "step": 46,
        "action": "EXECUTE",
        "vars": {
          "i": 23
        }
      },
      {
        "line": 7,
        "step": 47,
        "action": "EXECUTE",
        "vars": {
          "dp[23]": 23
        }
      },
      {
        "line": 8,
        "step": 48,
        "action": "RETURN",
        "vars": {
          "__return__": 23
        }
      }
    ],
    "id": 1238,
    "task_id": 416,
    "exist_function": [
      "breakSum"
    ]
  },
  {
    "code": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()]",
    "entry_point": "group_tuples",
    "input": [
      [
        "('x', 'y')",
        "('x', 'z')",
        "('w', 't')"
      ]
    ],
    "output": [
      "('x', 'y', 'z')",
      "('w', 't')"
    ],
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "Input": [
            "('x', 'y')",
            "('x', 'z')",
            "('w', 't')"
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "out": {}
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "elem": "('x', 'y')"
        }
      },
      {
        "line": 7,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "out.x": [
            "x",
            "y"
          ]
        }
      },
      {
        "line": 3,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "elem[1]": "z"
        }
      },
      {
        "line": 5,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "out": {
            "x": [
              "x",
              "y",
              "z"
            ]
          }
        }
      },
      {
        "line": 3,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "elem[1]": "t",
          "elem[0]": "w"
        }
      },
      {
        "line": 7,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "out.w": [
            "w",
            "t"
          ]
        }
      },
      {
        "line": 8,
        "step": 9,
        "action": "RETURN",
        "vars": {
          "__return__": [
            "('x', 'y', 'z')",
            "('w', 't')"
          ]
        }
      }
    ],
    "id": 1239,
    "task_id": 417,
    "exist_function": [
      "group_tuples"
    ]
  },
  {
    "code": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()]",
    "entry_point": "group_tuples",
    "input": [
      [
        "('a', 'b')",
        "('a', 'c')",
        "('d', 'e')"
      ]
    ],
    "output": [
      "('a', 'b', 'c')",
      "('d', 'e')"
    ],
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "Input": [
            "('a', 'b')",
            "('a', 'c')",
            "('d', 'e')"
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "out": {}
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "elem": "('a', 'b')"
        }
      },
      {
        "line": 7,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "out.a": [
            "a",
            "b"
          ]
        }
      },
      {
        "line": 3,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "elem[1]": "c"
        }
      },
      {
        "line": 5,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "out": {
            "a": [
              "a",
              "b",
              "c"
            ]
          }
        }
      },
      {
        "line": 3,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "elem[1]": "e",
          "elem[0]": "d"
        }
      },
      {
        "line": 7,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "out.d": [
            "d",
            "e"
          ]
        }
      },
      {
        "line": 8,
        "step": 9,
        "action": "RETURN",
        "vars": {
          "__return__": [
            "('a', 'b', 'c')",
            "('d', 'e')"
          ]
        }
      }
    ],
    "id": 1240,
    "task_id": 417,
    "exist_function": [
      "group_tuples"
    ]
  },
  {
    "code": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()]",
    "entry_point": "group_tuples",
    "input": [
      [
        "('f', 'g')",
        "('f', 'g')",
        "('h', 'i')"
      ]
    ],
    "output": [
      "('f', 'g', 'g')",
      "('h', 'i')"
    ],
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "Input": [
            "('f', 'g')",
            "('f', 'g')",
            "('h', 'i')"
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "out": {}
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "elem": "('f', 'g')"
        }
      },
      {
        "line": 7,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "out.f": [
            "f",
            "g"
          ]
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "out": {
            "f": [
              "f",
              "g",
              "g"
            ]
          }
        }
      },
      {
        "line": 3,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "elem[1]": "i",
          "elem[0]": "h"
        }
      },
      {
        "line": 7,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "out.h": [
            "h",
            "i"
          ]
        }
      },
      {
        "line": 8,
        "step": 8,
        "action": "RETURN",
        "vars": {
          "__return__": [
            "('f', 'g', 'g')",
            "('h', 'i')"
          ]
        }
      }
    ],
    "id": 1241,
    "task_id": 417,
    "exist_function": [
      "group_tuples"
    ]
  },
  {
    "code": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum",
    "entry_point": "round_and_sum",
    "input": [
      [
        22.4,
        4.0,
        -16.22,
        -9.1,
        11.0,
        -12.22,
        14.2,
        -5.2,
        17.5
      ]
    ],
    "output": 243,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list1": [
            22.4,
            4.0,
            -16.22,
            -9.1,
            11.0,
            -12.22,
            14.2,
            -5.2,
            17.5
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "lenght": 9
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "round_and_sum": 243
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": 243
        }
      }
    ],
    "id": 1245,
    "task_id": 419,
    "exist_function": [
      "round_and_sum"
    ]
  },
  {
    "code": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum",
    "entry_point": "round_and_sum",
    "input": [
      [
        5,
        2,
        9,
        24.3,
        29
      ]
    ],
    "output": 345,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list1": [
            5,
            2,
            9,
            24.3,
            29
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "lenght": 5
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "round_and_sum": 345
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": 345
        }
      }
    ],
    "id": 1246,
    "task_id": 419,
    "exist_function": [
      "round_and_sum"
    ]
  },
  {
    "code": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum",
    "entry_point": "round_and_sum",
    "input": [
      [
        25.0,
        56.7,
        89.2
      ]
    ],
    "output": 513,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list1": [
            25.0,
            56.7,
            89.2
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "lenght": 3
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "round_and_sum": 513
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": 513
        }
      }
    ],
    "id": 1247,
    "task_id": 419,
    "exist_function": [
      "round_and_sum"
    ]
  },
  {
    "code": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum",
    "entry_point": "cube_Sum",
    "input": [
      2
    ],
    "output": 72,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 2
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "sum": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "sum": 8
        }
      },
      {
        "line": 3,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 4,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "sum": 72
        }
      },
      {
        "line": 5,
        "step": 7,
        "action": "RETURN",
        "vars": {
          "__return__": 72
        }
      }
    ],
    "id": 1248,
    "task_id": 420,
    "exist_function": [
      "cube_Sum"
    ]
  },
  {
    "code": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum",
    "entry_point": "cube_Sum",
    "input": [
      3
    ],
    "output": 288,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 3
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "sum": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "sum": 8
        }
      },
      {
        "line": 3,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 4,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "sum": 72
        }
      },
      {
        "line": 3,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 4,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "sum": 288
        }
      },
      {
        "line": 5,
        "step": 9,
        "action": "RETURN",
        "vars": {
          "__return__": 288
        }
      }
    ],
    "id": 1249,
    "task_id": 420,
    "exist_function": [
      "cube_Sum"
    ]
  },
  {
    "code": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum",
    "entry_point": "cube_Sum",
    "input": [
      4
    ],
    "output": 800,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 4
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "sum": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "sum": 8
        }
      },
      {
        "line": 3,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 4,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "sum": 72
        }
      },
      {
        "line": 3,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 4,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "sum": 288
        }
      },
      {
        "line": 3,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 4,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "sum": 800
        }
      },
      {
        "line": 5,
        "step": 11,
        "action": "RETURN",
        "vars": {
          "__return__": 800
        }
      }
    ],
    "id": 1250,
    "task_id": 420,
    "exist_function": [
      "cube_Sum"
    ]
  },
  {
    "code": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res))",
    "entry_point": "concatenate_tuple",
    "input": [
      "('ID', 'is', 4, 'UTS')"
    ],
    "output": "ID-is-4-UTS",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "test_tup": "('ID', 'is', 4, 'UTS')"
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "delim": "-"
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "res": "ID-is-4-UTS-"
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "res": "ID-is-4-UTS"
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "RETURN",
        "vars": {
          "__return__": "ID-is-4-UTS"
        }
      }
    ],
    "id": 1251,
    "task_id": 421,
    "exist_function": [
      "concatenate_tuple"
    ]
  },
  {
    "code": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res))",
    "entry_point": "concatenate_tuple",
    "input": [
      "('QWE', 'is', 4, 'RTY')"
    ],
    "output": "QWE-is-4-RTY",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "test_tup": "('QWE', 'is', 4, 'RTY')"
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "delim": "-"
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "res": "QWE-is-4-RTY-"
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "res": "QWE-is-4-RTY"
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "RETURN",
        "vars": {
          "__return__": "QWE-is-4-RTY"
        }
      }
    ],
    "id": 1252,
    "task_id": 421,
    "exist_function": [
      "concatenate_tuple"
    ]
  },
  {
    "code": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res))",
    "entry_point": "concatenate_tuple",
    "input": [
      "('ZEN', 'is', 4, 'OP')"
    ],
    "output": "ZEN-is-4-OP",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "test_tup": "('ZEN', 'is', 4, 'OP')"
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "delim": "-"
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "res": "ZEN-is-4-OP-"
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "res": "ZEN-is-4-OP"
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "RETURN",
        "vars": {
          "__return__": "ZEN-is-4-OP"
        }
      }
    ],
    "id": 1253,
    "task_id": 421,
    "exist_function": [
      "concatenate_tuple"
    ]
  },
  {
    "code": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6)",
    "entry_point": "find_Average_Of_Cube",
    "input": [
      2
    ],
    "output": 4.5,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 2
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "sum": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "sum": 1
        }
      },
      {
        "line": 3,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 4,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "sum": 9
        }
      },
      {
        "line": 5,
        "step": 7,
        "action": "RETURN",
        "vars": {
          "__return__": 4.5
        }
      }
    ],
    "id": 1254,
    "task_id": 422,
    "exist_function": [
      "find_Average_Of_Cube"
    ]
  },
  {
    "code": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6)",
    "entry_point": "find_Average_Of_Cube",
    "input": [
      3
    ],
    "output": 12.0,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 3
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "sum": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "sum": 1
        }
      },
      {
        "line": 3,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 4,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "sum": 9
        }
      },
      {
        "line": 3,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 4,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "sum": 36
        }
      },
      {
        "line": 5,
        "step": 9,
        "action": "RETURN",
        "vars": {
          "__return__": 12.0
        }
      }
    ],
    "id": 1255,
    "task_id": 422,
    "exist_function": [
      "find_Average_Of_Cube"
    ]
  },
  {
    "code": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6)",
    "entry_point": "find_Average_Of_Cube",
    "input": [
      1
    ],
    "output": 1.0,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 1
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "sum": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "sum": 1
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "RETURN",
        "vars": {
          "__return__": 1.0
        }
      }
    ],
    "id": 1256,
    "task_id": 422,
    "exist_function": [
      "find_Average_Of_Cube"
    ]
  },
  {
    "code": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res",
    "entry_point": "get_maxgold",
    "input": [
      [
        [
          1,
          3,
          1,
          5
        ],
        [
          2,
          2,
          4,
          1
        ],
        [
          5,
          0,
          2,
          3
        ],
        [
          0,
          6,
          1,
          2
        ]
      ],
      4,
      4
    ],
    "output": 16,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "gold": [
            [
              1,
              3,
              1,
              5
            ],
            [
              2,
              2,
              4,
              1
            ],
            [
              5,
              0,
              2,
              3
            ],
            [
              0,
              6,
              1,
              2
            ]
          ],
          "m": 4,
          "n": 4
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "goldTable": [
            [
              0,
              0,
              0,
              0
            ],
            [
              0,
              0,
              0,
              0
            ],
            [
              0,
              0,
              0,
              0
            ],
            [
              0,
              0,
              0,
              0
            ]
          ]
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "col": 3
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "row": 0
        }
      },
      {
        "line": 7,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "right": 0
        }
      },
      {
        "line": 11,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "right_up": 0
        }
      },
      {
        "line": 15,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "right_down": 0
        }
      },
      {
        "line": 18,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "goldTable[0][3]": 5
        }
      },
      {
        "line": 5,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "row": 1
        }
      },
      {
        "line": 18,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "goldTable[1][3]": 1
        }
      },
      {
        "line": 5,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "row": 2
        }
      },
      {
        "line": 18,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "goldTable[2][3]": 3
        }
      },
      {
        "line": 5,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "row": 3
        }
      },
      {
        "line": 18,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "goldTable[3][3]": 2
        }
      },
      {
        "line": 4,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "col": 2
        }
      },
      {
        "line": 5,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "row": 0
        }
      },
      {
        "line": 9,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "right": 5
        }
      },
      {
        "line": 17,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "right_down": 1
        }
      },
      {
        "line": 18,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "goldTable[0][2]": 6
        }
      },
      {
        "line": 5,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "row": 1
        }
      },
      {
        "line": 9,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "right": 1
        }
      },
      {
        "line": 13,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "right_up": 5
        }
      },
      {
        "line": 17,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "right_down": 3
        }
      },
      {
        "line": 18,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "goldTable[1][2]": 9
        }
      },
      {
        "line": 5,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "row": 2
        }
      },
      {
        "line": 9,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "right": 3
        }
      },
      {
        "line": 13,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "right_up": 1
        }
      },
      {
        "line": 17,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "right_down": 2
        }
      },
      {
        "line": 18,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "goldTable[2][2]": 5
        }
      },
      {
        "line": 5,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "row": 3
        }
      },
      {
        "line": 9,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "right": 2
        }
      },
      {
        "line": 13,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "right_up": 3
        }
      },
      {
        "line": 15,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "right_down": 0
        }
      },
      {
        "line": 18,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "goldTable[3][2]": 4
        }
      },
      {
        "line": 4,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "col": 1
        }
      },
      {
        "line": 5,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "row": 0
        }
      },
      {
        "line": 9,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "right": 6
        }
      },
      {
        "line": 11,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "right_up": 0
        }
      },
      {
        "line": 17,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "right_down": 9
        }
      },
      {
        "line": 18,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "goldTable[0][1]": 12
        }
      },
      {
        "line": 5,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "row": 1
        }
      },
      {
        "line": 9,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "right": 9
        }
      },
      {
        "line": 13,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "right_up": 6
        }
      },
      {
        "line": 17,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "right_down": 5
        }
      },
      {
        "line": 18,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "goldTable[1][1]": 11
        }
      },
      {
        "line": 5,
        "step": 46,
        "action": "EXECUTE",
        "vars": {
          "row": 2
        }
      },
      {
        "line": 9,
        "step": 47,
        "action": "EXECUTE",
        "vars": {
          "right": 5
        }
      },
      {
        "line": 13,
        "step": 48,
        "action": "EXECUTE",
        "vars": {
          "right_up": 9
        }
      },
      {
        "line": 17,
        "step": 49,
        "action": "EXECUTE",
        "vars": {
          "right_down": 4
        }
      },
      {
        "line": 18,
        "step": 50,
        "action": "EXECUTE",
        "vars": {
          "goldTable[2][1]": 9
        }
      },
      {
        "line": 5,
        "step": 51,
        "action": "EXECUTE",
        "vars": {
          "row": 3
        }
      },
      {
        "line": 9,
        "step": 52,
        "action": "EXECUTE",
        "vars": {
          "right": 4
        }
      },
      {
        "line": 13,
        "step": 53,
        "action": "EXECUTE",
        "vars": {
          "right_up": 5
        }
      },
      {
        "line": 15,
        "step": 54,
        "action": "EXECUTE",
        "vars": {
          "right_down": 0
        }
      },
      {
        "line": 18,
        "step": 55,
        "action": "EXECUTE",
        "vars": {
          "goldTable[3][1]": 11
        }
      },
      {
        "line": 4,
        "step": 56,
        "action": "EXECUTE",
        "vars": {
          "col": 0
        }
      },
      {
        "line": 5,
        "step": 57,
        "action": "EXECUTE",
        "vars": {
          "row": 0
        }
      },
      {
        "line": 9,
        "step": 58,
        "action": "EXECUTE",
        "vars": {
          "right": 12
        }
      },
      {
        "line": 11,
        "step": 59,
        "action": "EXECUTE",
        "vars": {
          "right_up": 0
        }
      },
      {
        "line": 17,
        "step": 60,
        "action": "EXECUTE",
        "vars": {
          "right_down": 11
        }
      },
      {
        "line": 18,
        "step": 61,
        "action": "EXECUTE",
        "vars": {
          "goldTable[0][0]": 13
        }
      },
      {
        "line": 5,
        "step": 62,
        "action": "EXECUTE",
        "vars": {
          "row": 1
        }
      },
      {
        "line": 9,
        "step": 63,
        "action": "EXECUTE",
        "vars": {
          "right": 11
        }
      },
      {
        "line": 13,
        "step": 64,
        "action": "EXECUTE",
        "vars": {
          "right_up": 12
        }
      },
      {
        "line": 17,
        "step": 65,
        "action": "EXECUTE",
        "vars": {
          "right_down": 9
        }
      },
      {
        "line": 18,
        "step": 66,
        "action": "EXECUTE",
        "vars": {
          "goldTable[1][0]": 14
        }
      },
      {
        "line": 5,
        "step": 67,
        "action": "EXECUTE",
        "vars": {
          "row": 2
        }
      },
      {
        "line": 9,
        "step": 68,
        "action": "EXECUTE",
        "vars": {
          "right": 9
        }
      },
      {
        "line": 13,
        "step": 69,
        "action": "EXECUTE",
        "vars": {
          "right_up": 11
        }
      },
      {
        "line": 17,
        "step": 70,
        "action": "EXECUTE",
        "vars": {
          "right_down": 11
        }
      },
      {
        "line": 18,
        "step": 71,
        "action": "EXECUTE",
        "vars": {
          "goldTable[2][0]": 16
        }
      },
      {
        "line": 5,
        "step": 72,
        "action": "EXECUTE",
        "vars": {
          "row": 3
        }
      },
      {
        "line": 9,
        "step": 73,
        "action": "EXECUTE",
        "vars": {
          "right": 11
        }
      },
      {
        "line": 13,
        "step": 74,
        "action": "EXECUTE",
        "vars": {
          "right_up": 9
        }
      },
      {
        "line": 15,
        "step": 75,
        "action": "EXECUTE",
        "vars": {
          "right_down": 0
        }
      },
      {
        "line": 18,
        "step": 76,
        "action": "EXECUTE",
        "vars": {
          "goldTable[3][0]": 11
        }
      },
      {
        "line": 19,
        "step": 77,
        "action": "EXECUTE",
        "vars": {
          "res": 13
        }
      },
      {
        "line": 20,
        "step": 78,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 21,
        "step": 79,
        "action": "EXECUTE",
        "vars": {
          "res": 14
        }
      },
      {
        "line": 20,
        "step": 80,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 21,
        "step": 81,
        "action": "EXECUTE",
        "vars": {
          "res": 16
        }
      },
      {
        "line": 20,
        "step": 82,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 22,
        "step": 83,
        "action": "RETURN",
        "vars": {
          "__return__": 16
        }
      }
    ],
    "id": 1257,
    "task_id": 423,
    "exist_function": [
      "get_maxgold"
    ]
  },
  {
    "code": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res",
    "entry_point": "get_maxgold",
    "input": [
      [
        [
          10,
          20
        ],
        [
          30,
          40
        ]
      ],
      2,
      2
    ],
    "output": 70,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "gold": [
            [
              10,
              20
            ],
            [
              30,
              40
            ]
          ],
          "m": 2,
          "n": 2
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "goldTable": [
            [
              0,
              0
            ],
            [
              0,
              0
            ]
          ]
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "col": 1
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "row": 0
        }
      },
      {
        "line": 7,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "right": 0
        }
      },
      {
        "line": 11,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "right_up": 0
        }
      },
      {
        "line": 15,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "right_down": 0
        }
      },
      {
        "line": 18,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "goldTable[0][1]": 20
        }
      },
      {
        "line": 5,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "row": 1
        }
      },
      {
        "line": 18,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "goldTable[1][1]": 40
        }
      },
      {
        "line": 4,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "col": 0
        }
      },
      {
        "line": 5,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "row": 0
        }
      },
      {
        "line": 9,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "right": 20
        }
      },
      {
        "line": 17,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "right_down": 40
        }
      },
      {
        "line": 18,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "goldTable[0][0]": 50
        }
      },
      {
        "line": 5,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "row": 1
        }
      },
      {
        "line": 9,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "right": 40
        }
      },
      {
        "line": 13,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "right_up": 20
        }
      },
      {
        "line": 15,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "right_down": 0
        }
      },
      {
        "line": 18,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "goldTable[1][0]": 70
        }
      },
      {
        "line": 19,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "res": 50
        }
      },
      {
        "line": 20,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 21,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "res": 70
        }
      },
      {
        "line": 22,
        "step": 24,
        "action": "RETURN",
        "vars": {
          "__return__": 70
        }
      }
    ],
    "id": 1258,
    "task_id": 423,
    "exist_function": [
      "get_maxgold"
    ]
  },
  {
    "code": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res",
    "entry_point": "get_maxgold",
    "input": [
      [
        [
          4,
          9
        ],
        [
          3,
          7
        ]
      ],
      2,
      2
    ],
    "output": 13,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "gold": [
            [
              4,
              9
            ],
            [
              3,
              7
            ]
          ],
          "m": 2,
          "n": 2
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "goldTable": [
            [
              0,
              0
            ],
            [
              0,
              0
            ]
          ]
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "col": 1
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "row": 0
        }
      },
      {
        "line": 7,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "right": 0
        }
      },
      {
        "line": 11,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "right_up": 0
        }
      },
      {
        "line": 15,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "right_down": 0
        }
      },
      {
        "line": 18,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "goldTable[0][1]": 9
        }
      },
      {
        "line": 5,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "row": 1
        }
      },
      {
        "line": 18,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "goldTable[1][1]": 7
        }
      },
      {
        "line": 4,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "col": 0
        }
      },
      {
        "line": 5,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "row": 0
        }
      },
      {
        "line": 9,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "right": 9
        }
      },
      {
        "line": 17,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "right_down": 7
        }
      },
      {
        "line": 18,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "goldTable[0][0]": 13
        }
      },
      {
        "line": 5,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "row": 1
        }
      },
      {
        "line": 9,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "right": 7
        }
      },
      {
        "line": 13,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "right_up": 9
        }
      },
      {
        "line": 15,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "right_down": 0
        }
      },
      {
        "line": 18,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "goldTable[1][0]": 12
        }
      },
      {
        "line": 19,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "res": 13
        }
      },
      {
        "line": 20,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 22,
        "step": 23,
        "action": "RETURN",
        "vars": {
          "__return__": 13
        }
      }
    ],
    "id": 1259,
    "task_id": 423,
    "exist_function": [
      "get_maxgold"
    ]
  },
  {
    "code": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr",
    "entry_point": "count_element_in_list",
    "input": [
      [
        [
          1,
          3
        ],
        [
          5,
          7
        ],
        [
          1,
          11
        ],
        [
          1,
          15,
          7
        ]
      ],
      1
    ],
    "output": 3,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list1": [
            [
              1,
              3
            ],
            [
              5,
              7
            ],
            [
              1,
              11
            ],
            [
              1,
              15,
              7
            ]
          ],
          "x": 1
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "ctr": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "ctr": 1
        }
      },
      {
        "line": 3,
        "step": "5~6",
        "action": "LOOP",
        "vars": {
          "i": "1→2"
        }
      },
      {
        "line": 5,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "ctr": 2
        }
      },
      {
        "line": 3,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 5,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "ctr": 3
        }
      },
      {
        "line": 6,
        "step": 10,
        "action": "RETURN",
        "vars": {
          "__return__": 3
        }
      }
    ],
    "id": 1263,
    "task_id": 425,
    "exist_function": [
      "count_element_in_list"
    ]
  },
  {
    "code": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr",
    "entry_point": "count_element_in_list",
    "input": [
      [
        [
          "A",
          "B"
        ],
        [
          "A",
          "C"
        ],
        [
          "A",
          "D",
          "E"
        ],
        [
          "B",
          "C",
          "D"
        ]
      ],
      "A"
    ],
    "output": 3,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list1": [
            [
              "A",
              "B"
            ],
            [
              "A",
              "C"
            ],
            [
              "A",
              "D",
              "E"
            ],
            [
              "B",
              "C",
              "D"
            ]
          ],
          "x": "A"
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "ctr": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "ctr": 1
        }
      },
      {
        "line": 3,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 5,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "ctr": 2
        }
      },
      {
        "line": 3,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 5,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "ctr": 3
        }
      },
      {
        "line": 3,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 6,
        "step": 10,
        "action": "RETURN",
        "vars": {
          "__return__": 3
        }
      }
    ],
    "id": 1264,
    "task_id": 425,
    "exist_function": [
      "count_element_in_list"
    ]
  },
  {
    "code": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr",
    "entry_point": "count_element_in_list",
    "input": [
      [
        [
          "A",
          "B"
        ],
        [
          "A",
          "C"
        ],
        [
          "A",
          "D",
          "E"
        ],
        [
          "B",
          "C",
          "D"
        ]
      ],
      "E"
    ],
    "output": 1,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list1": [
            [
              "A",
              "B"
            ],
            [
              "A",
              "C"
            ],
            [
              "A",
              "D",
              "E"
            ],
            [
              "B",
              "C",
              "D"
            ]
          ],
          "x": "E"
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "ctr": 0
        }
      },
      {
        "line": 3,
        "step": "3~5",
        "action": "LOOP",
        "vars": {
          "i": "0→2"
        }
      },
      {
        "line": 5,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "ctr": 1
        }
      },
      {
        "line": 3,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "RETURN",
        "vars": {
          "__return__": 1
        }
      }
    ],
    "id": 1265,
    "task_id": 425,
    "exist_function": [
      "count_element_in_list"
    ]
  },
  {
    "code": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list",
    "entry_point": "shell_sort",
    "input": [
      [
        2,
        3,
        4,
        5,
        12,
        12,
        23,
        56,
        81,
        95
      ]
    ],
    "output": [
      2,
      3,
      4,
      5,
      12,
      12,
      23,
      56,
      81,
      95
    ],
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "my_list": [
            12,
            23,
            4,
            5,
            3,
            2,
            12,
            81,
            56,
            95
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "gap": 5
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "current_item": 2
        }
      },
      {
        "line": 6,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 8,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "my_list[5]": 12
        }
      },
      {
        "line": 9,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 10,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "my_list[0]": 2
        }
      },
      {
        "line": 4,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 5,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "current_item": 12
        }
      },
      {
        "line": 6,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 8,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "my_list[6]": 23
        }
      },
      {
        "line": 9,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 10,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "my_list[1]": 12
        }
      },
      {
        "line": 4,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "i": 7
        }
      },
      {
        "line": 5,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "current_item": 81
        }
      },
      {
        "line": 6,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "j": 7
        }
      },
      {
        "line": 4,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "i": 8
        }
      },
      {
        "line": 5,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "current_item": 56
        }
      },
      {
        "line": 6,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "j": 8
        }
      },
      {
        "line": 4,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "i": 9
        }
      },
      {
        "line": 5,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "current_item": 95
        }
      },
      {
        "line": 6,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "j": 9
        }
      },
      {
        "line": 11,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "gap": 2
        }
      },
      {
        "line": 4,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 5,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "current_item": 4
        }
      },
      {
        "line": 6,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 4,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 5,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "current_item": 5
        }
      },
      {
        "line": 6,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 8,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "my_list[3]": 12
        }
      },
      {
        "line": 9,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 10,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "my_list[1]": 5
        }
      },
      {
        "line": 4,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 5,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "current_item": 3
        }
      },
      {
        "line": 6,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 8,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "my_list[4]": 4
        }
      },
      {
        "line": 9,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 10,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "my_list[2]": 3
        }
      },
      {
        "line": 4,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 5,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "current_item": 12
        }
      },
      {
        "line": 6,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 4,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 5,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "current_item": 23
        }
      },
      {
        "line": 6,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 4,
        "step": 46,
        "action": "EXECUTE",
        "vars": {
          "i": 7
        }
      },
      {
        "line": 5,
        "step": 47,
        "action": "EXECUTE",
        "vars": {
          "current_item": 81
        }
      },
      {
        "line": 6,
        "step": 48,
        "action": "EXECUTE",
        "vars": {
          "j": 7
        }
      },
      {
        "line": 4,
        "step": 49,
        "action": "EXECUTE",
        "vars": {
          "i": 8
        }
      },
      {
        "line": 5,
        "step": 50,
        "action": "EXECUTE",
        "vars": {
          "current_item": 56
        }
      },
      {
        "line": 6,
        "step": 51,
        "action": "EXECUTE",
        "vars": {
          "j": 8
        }
      },
      {
        "line": 4,
        "step": 52,
        "action": "EXECUTE",
        "vars": {
          "i": 9
        }
      },
      {
        "line": 5,
        "step": 53,
        "action": "EXECUTE",
        "vars": {
          "current_item": 95
        }
      },
      {
        "line": 6,
        "step": 54,
        "action": "EXECUTE",
        "vars": {
          "j": 9
        }
      },
      {
        "line": 11,
        "step": 55,
        "action": "EXECUTE",
        "vars": {
          "gap": 1
        }
      },
      {
        "line": 4,
        "step": 56,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 5,
        "step": 57,
        "action": "EXECUTE",
        "vars": {
          "current_item": 5
        }
      },
      {
        "line": 6,
        "step": 58,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 4,
        "step": 59,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 5,
        "step": 60,
        "action": "EXECUTE",
        "vars": {
          "current_item": 3
        }
      },
      {
        "line": 6,
        "step": 61,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 8,
        "step": 62,
        "action": "EXECUTE",
        "vars": {
          "my_list[2]": 5
        }
      },
      {
        "line": 9,
        "step": 63,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 10,
        "step": 64,
        "action": "EXECUTE",
        "vars": {
          "my_list[1]": 3
        }
      },
      {
        "line": 4,
        "step": 65,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 5,
        "step": 66,
        "action": "EXECUTE",
        "vars": {
          "current_item": 12
        }
      },
      {
        "line": 6,
        "step": 67,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 4,
        "step": 68,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 5,
        "step": 69,
        "action": "EXECUTE",
        "vars": {
          "current_item": 4
        }
      },
      {
        "line": 6,
        "step": 70,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 8,
        "step": 71,
        "action": "EXECUTE",
        "vars": {
          "my_list[4]": 12
        }
      },
      {
        "line": 9,
        "step": 72,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 8,
        "step": 73,
        "action": "EXECUTE",
        "vars": {
          "my_list[3]": 5
        }
      },
      {
        "line": 9,
        "step": 74,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 10,
        "step": 75,
        "action": "EXECUTE",
        "vars": {
          "my_list[2]": 4
        }
      },
      {
        "line": 4,
        "step": 76,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 5,
        "step": 77,
        "action": "EXECUTE",
        "vars": {
          "current_item": 12
        }
      },
      {
        "line": 6,
        "step": 78,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 4,
        "step": 79,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 5,
        "step": 80,
        "action": "EXECUTE",
        "vars": {
          "current_item": 23
        }
      },
      {
        "line": 6,
        "step": 81,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 4,
        "step": 82,
        "action": "EXECUTE",
        "vars": {
          "i": 7
        }
      },
      {
        "line": 5,
        "step": 83,
        "action": "EXECUTE",
        "vars": {
          "current_item": 81
        }
      },
      {
        "line": 6,
        "step": 84,
        "action": "EXECUTE",
        "vars": {
          "j": 7
        }
      },
      {
        "line": 4,
        "step": 85,
        "action": "EXECUTE",
        "vars": {
          "i": 8
        }
      },
      {
        "line": 5,
        "step": 86,
        "action": "EXECUTE",
        "vars": {
          "current_item": 56
        }
      },
      {
        "line": 6,
        "step": 87,
        "action": "EXECUTE",
        "vars": {
          "j": 8
        }
      },
      {
        "line": 8,
        "step": 88,
        "action": "EXECUTE",
        "vars": {
          "my_list[8]": 81
        }
      },
      {
        "line": 9,
        "step": 89,
        "action": "EXECUTE",
        "vars": {
          "j": 7
        }
      },
      {
        "line": 10,
        "step": 90,
        "action": "EXECUTE",
        "vars": {
          "my_list[7]": 56
        }
      },
      {
        "line": 4,
        "step": 91,
        "action": "EXECUTE",
        "vars": {
          "i": 9
        }
      },
      {
        "line": 5,
        "step": 92,
        "action": "EXECUTE",
        "vars": {
          "current_item": 95
        }
      },
      {
        "line": 6,
        "step": 93,
        "action": "EXECUTE",
        "vars": {
          "j": 9
        }
      },
      {
        "line": 11,
        "step": 94,
        "action": "EXECUTE",
        "vars": {
          "gap": 0
        }
      },
      {
        "line": 13,
        "step": 95,
        "action": "RETURN",
        "vars": {
          "__return__": [
            2,
            3,
            4,
            5,
            12,
            12,
            23,
            56,
            81,
            95
          ]
        }
      }
    ],
    "id": 1272,
    "task_id": 428,
    "exist_function": [
      "shell_sort"
    ]
  },
  {
    "code": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list",
    "entry_point": "shell_sort",
    "input": [
      [
        22,
        24,
        34,
        39,
        68,
        73,
        87
      ]
    ],
    "output": [
      22,
      24,
      34,
      39,
      68,
      73,
      87
    ],
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "my_list": [
            24,
            22,
            39,
            34,
            87,
            73,
            68
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "gap": 3
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "current_item": 34
        }
      },
      {
        "line": 6,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 4,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 5,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "current_item": 87
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 4,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 5,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "current_item": 73
        }
      },
      {
        "line": 6,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 4,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 5,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "current_item": 68
        }
      },
      {
        "line": 6,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 11,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "gap": 1
        }
      },
      {
        "line": 4,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 5,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "current_item": 22
        }
      },
      {
        "line": 6,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 8,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "my_list[1]": 24
        }
      },
      {
        "line": 9,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 10,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "my_list[0]": 22
        }
      },
      {
        "line": 4,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 5,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "current_item": 39
        }
      },
      {
        "line": 6,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 4,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 5,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "current_item": 34
        }
      },
      {
        "line": 6,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 8,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "my_list[3]": 39
        }
      },
      {
        "line": 9,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 10,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "my_list[2]": 34
        }
      },
      {
        "line": 4,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 5,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "current_item": 87
        }
      },
      {
        "line": 6,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 4,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 5,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "current_item": 73
        }
      },
      {
        "line": 6,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 8,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "my_list[5]": 87
        }
      },
      {
        "line": 9,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 10,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "my_list[4]": 73
        }
      },
      {
        "line": 4,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 5,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "current_item": 68
        }
      },
      {
        "line": 6,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 8,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "my_list[6]": 87
        }
      },
      {
        "line": 9,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 8,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "my_list[5]": 73
        }
      },
      {
        "line": 9,
        "step": 46,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 10,
        "step": 47,
        "action": "EXECUTE",
        "vars": {
          "my_list[4]": 68
        }
      },
      {
        "line": 11,
        "step": 48,
        "action": "EXECUTE",
        "vars": {
          "gap": 0
        }
      },
      {
        "line": 13,
        "step": 49,
        "action": "RETURN",
        "vars": {
          "__return__": [
            22,
            24,
            34,
            39,
            68,
            73,
            87
          ]
        }
      }
    ],
    "id": 1273,
    "task_id": 428,
    "exist_function": [
      "shell_sort"
    ]
  },
  {
    "code": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list",
    "entry_point": "shell_sort",
    "input": [
      [
        16,
        30,
        32,
        74,
        82,
        83,
        96
      ]
    ],
    "output": [
      16,
      30,
      32,
      74,
      82,
      83,
      96
    ],
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "my_list": [
            32,
            30,
            16,
            96,
            82,
            83,
            74
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "gap": 3
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "current_item": 96
        }
      },
      {
        "line": 6,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 4,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 5,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "current_item": 82
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 4,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 5,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "current_item": 83
        }
      },
      {
        "line": 6,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 4,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 5,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "current_item": 74
        }
      },
      {
        "line": 6,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 8,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "my_list[6]": 96
        }
      },
      {
        "line": 9,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 10,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "my_list[3]": 74
        }
      },
      {
        "line": 11,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "gap": 1
        }
      },
      {
        "line": 4,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 5,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "current_item": 30
        }
      },
      {
        "line": 6,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 8,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "my_list[1]": 32
        }
      },
      {
        "line": 9,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 10,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "my_list[0]": 30
        }
      },
      {
        "line": 4,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 5,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "current_item": 16
        }
      },
      {
        "line": 6,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 8,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "my_list[2]": 32
        }
      },
      {
        "line": 9,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 8,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "my_list[1]": 30
        }
      },
      {
        "line": 9,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 10,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "my_list[0]": 16
        }
      },
      {
        "line": 4,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 5,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "current_item": 74
        }
      },
      {
        "line": 6,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 4,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 5,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "current_item": 82
        }
      },
      {
        "line": 6,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 4,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 5,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "current_item": 83
        }
      },
      {
        "line": 6,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 4,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 5,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "current_item": 96
        }
      },
      {
        "line": 6,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 11,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "gap": 0
        }
      },
      {
        "line": 13,
        "step": 46,
        "action": "RETURN",
        "vars": {
          "__return__": [
            16,
            30,
            32,
            74,
            82,
            83,
            96
          ]
        }
      }
    ],
    "id": 1274,
    "task_id": 428,
    "exist_function": [
      "shell_sort"
    ]
  },
  {
    "code": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result",
    "entry_point": "common_element",
    "input": [
      [
        1,
        2,
        3,
        4,
        5
      ],
      [
        5,
        6,
        7,
        8,
        9
      ]
    ],
    "output": true,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list1": [
            1,
            2,
            3,
            4,
            5
          ],
          "list2": [
            5,
            6,
            7,
            8,
            9
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "result": false
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "x": 1
        }
      },
      {
        "line": 4,
        "step": "4~8",
        "action": "LOOP",
        "vars": {
          "y": "5→9"
        }
      },
      {
        "line": 3,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "x": 2
        }
      },
      {
        "line": 4,
        "step": "10~14",
        "action": "LOOP",
        "vars": {
          "y": "5→9"
        }
      },
      {
        "line": 3,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "x": 3
        }
      },
      {
        "line": 4,
        "step": "16~20",
        "action": "LOOP",
        "vars": {
          "y": "5→9"
        }
      },
      {
        "line": 3,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "x": 4
        }
      },
      {
        "line": 4,
        "step": "22~26",
        "action": "LOOP",
        "vars": {
          "y": "5→9"
        }
      },
      {
        "line": 3,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "x": 5
        }
      },
      {
        "line": 4,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "y": 5
        }
      },
      {
        "line": 6,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "result": true
        }
      },
      {
        "line": 7,
        "step": 30,
        "action": "RETURN",
        "vars": {
          "__return__": true
        }
      }
    ],
    "id": 1281,
    "task_id": 431,
    "exist_function": [
      "common_element"
    ]
  },
  {
    "code": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result",
    "entry_point": "common_element",
    "input": [
      [
        "a",
        "b",
        "c"
      ],
      [
        "d",
        "b",
        "e"
      ]
    ],
    "output": true,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list1": [
            "a",
            "b",
            "c"
          ],
          "list2": [
            "d",
            "b",
            "e"
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "result": false
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "x": "a"
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "y": "d"
        }
      },
      {
        "line": 4,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "y": "b"
        }
      },
      {
        "line": 4,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "y": "e"
        }
      },
      {
        "line": 3,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "x": "b"
        }
      },
      {
        "line": 4,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "y": "d"
        }
      },
      {
        "line": 4,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "y": "b"
        }
      },
      {
        "line": 6,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "result": true
        }
      },
      {
        "line": 7,
        "step": 11,
        "action": "RETURN",
        "vars": {
          "__return__": true
        }
      }
    ],
    "id": 1283,
    "task_id": 431,
    "exist_function": [
      "common_element"
    ]
  },
  {
    "code": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2",
    "entry_point": "remove_odd",
    "input": [
      "python"
    ],
    "output": "yhn",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "str1": "python"
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "str2": ""
        }
      },
      {
        "line": 3,
        "step": "3~4",
        "action": "LOOP",
        "vars": {
          "i": "1→2"
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "str2": "y"
        }
      },
      {
        "line": 3,
        "step": "6~7",
        "action": "LOOP",
        "vars": {
          "i": "3→4"
        }
      },
      {
        "line": 5,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "str2": "yh"
        }
      },
      {
        "line": 3,
        "step": "9~10",
        "action": "LOOP",
        "vars": {
          "i": "5→6"
        }
      },
      {
        "line": 5,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "str2": "yhn"
        }
      },
      {
        "line": 6,
        "step": 12,
        "action": "RETURN",
        "vars": {
          "__return__": "yhn"
        }
      }
    ],
    "id": 1299,
    "task_id": 437,
    "exist_function": [
      "remove_odd"
    ]
  },
  {
    "code": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2",
    "entry_point": "remove_odd",
    "input": [
      "program"
    ],
    "output": "rga",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "str1": "program"
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "str2": ""
        }
      },
      {
        "line": 3,
        "step": "3~4",
        "action": "LOOP",
        "vars": {
          "i": "1→2"
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "str2": "r"
        }
      },
      {
        "line": 3,
        "step": "6~7",
        "action": "LOOP",
        "vars": {
          "i": "3→4"
        }
      },
      {
        "line": 5,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "str2": "rg"
        }
      },
      {
        "line": 3,
        "step": "9~10",
        "action": "LOOP",
        "vars": {
          "i": "5→6"
        }
      },
      {
        "line": 5,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "str2": "rga"
        }
      },
      {
        "line": 3,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "i": 7
        }
      },
      {
        "line": 6,
        "step": 13,
        "action": "RETURN",
        "vars": {
          "__return__": "rga"
        }
      }
    ],
    "id": 1300,
    "task_id": 437,
    "exist_function": [
      "remove_odd"
    ]
  },
  {
    "code": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2",
    "entry_point": "remove_odd",
    "input": [
      "language"
    ],
    "output": "agae",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "str1": "language"
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "str2": ""
        }
      },
      {
        "line": 3,
        "step": "3~4",
        "action": "LOOP",
        "vars": {
          "i": "1→2"
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "str2": "a"
        }
      },
      {
        "line": 3,
        "step": "6~7",
        "action": "LOOP",
        "vars": {
          "i": "3→4"
        }
      },
      {
        "line": 5,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "str2": "ag"
        }
      },
      {
        "line": 3,
        "step": "9~10",
        "action": "LOOP",
        "vars": {
          "i": "5→6"
        }
      },
      {
        "line": 5,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "str2": "aga"
        }
      },
      {
        "line": 3,
        "step": "12~13",
        "action": "LOOP",
        "vars": {
          "i": "7→8"
        }
      },
      {
        "line": 5,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "str2": "agae"
        }
      },
      {
        "line": 6,
        "step": 15,
        "action": "RETURN",
        "vars": {
          "__return__": "agae"
        }
      }
    ],
    "id": 1301,
    "task_id": 437,
    "exist_function": [
      "remove_odd"
    ]
  },
  {
    "code": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res))",
    "entry_point": "count_bidirectional",
    "input": [
      [
        "(5, 6)",
        "(1, 2)",
        "(6, 5)",
        "(9, 1)",
        "(6, 5)",
        "(2, 1)"
      ]
    ],
    "output": "3",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "test_list": [
            "(5, 6)",
            "(1, 2)",
            "(6, 5)",
            "(9, 1)",
            "(6, 5)",
            "(2, 1)"
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "res": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "idx": 0
        }
      },
      {
        "line": 4,
        "step": "4~5",
        "action": "LOOP",
        "vars": {
          "iidx": "1→2"
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "res": 1
        }
      },
      {
        "line": 4,
        "step": "7~8",
        "action": "LOOP",
        "vars": {
          "iidx": "3→4"
        }
      },
      {
        "line": 6,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "res": 2
        }
      },
      {
        "line": 4,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "iidx": 5
        }
      },
      {
        "line": 3,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "idx": 1
        }
      },
      {
        "line": 4,
        "step": "12~15",
        "action": "LOOP",
        "vars": {
          "iidx": "2→5"
        }
      },
      {
        "line": 6,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "res": 3
        }
      },
      {
        "line": 3,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "idx": 2
        }
      },
      {
        "line": 4,
        "step": "18~20",
        "action": "LOOP",
        "vars": {
          "iidx": "3→5"
        }
      },
      {
        "line": 3,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "idx": 3
        }
      },
      {
        "line": 4,
        "step": "22~23",
        "action": "LOOP",
        "vars": {
          "iidx": "4→5"
        }
      },
      {
        "line": 3,
        "step": "24~25",
        "action": "LOOP",
        "vars": {
          "idx": "4→5"
        }
      },
      {
        "line": 7,
        "step": 26,
        "action": "RETURN",
        "vars": {
          "__return__": "3"
        }
      }
    ],
    "id": 1302,
    "task_id": 438,
    "exist_function": [
      "count_bidirectional"
    ]
  },
  {
    "code": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res))",
    "entry_point": "count_bidirectional",
    "input": [
      [
        "(5, 6)",
        "(1, 3)",
        "(6, 5)",
        "(9, 1)",
        "(6, 5)",
        "(2, 1)"
      ]
    ],
    "output": "2",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "test_list": [
            "(5, 6)",
            "(1, 3)",
            "(6, 5)",
            "(9, 1)",
            "(6, 5)",
            "(2, 1)"
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "res": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "idx": 0
        }
      },
      {
        "line": 4,
        "step": "4~5",
        "action": "LOOP",
        "vars": {
          "iidx": "1→2"
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "res": 1
        }
      },
      {
        "line": 4,
        "step": "7~8",
        "action": "LOOP",
        "vars": {
          "iidx": "3→4"
        }
      },
      {
        "line": 6,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "res": 2
        }
      },
      {
        "line": 4,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "iidx": 5
        }
      },
      {
        "line": 3,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "idx": 1
        }
      },
      {
        "line": 4,
        "step": "12~15",
        "action": "LOOP",
        "vars": {
          "iidx": "2→5"
        }
      },
      {
        "line": 3,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "idx": 2
        }
      },
      {
        "line": 4,
        "step": "17~19",
        "action": "LOOP",
        "vars": {
          "iidx": "3→5"
        }
      },
      {
        "line": 3,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "idx": 3
        }
      },
      {
        "line": 4,
        "step": "21~22",
        "action": "LOOP",
        "vars": {
          "iidx": "4→5"
        }
      },
      {
        "line": 3,
        "step": "23~24",
        "action": "LOOP",
        "vars": {
          "idx": "4→5"
        }
      },
      {
        "line": 7,
        "step": 25,
        "action": "RETURN",
        "vars": {
          "__return__": "2"
        }
      }
    ],
    "id": 1303,
    "task_id": 438,
    "exist_function": [
      "count_bidirectional"
    ]
  },
  {
    "code": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res))",
    "entry_point": "count_bidirectional",
    "input": [
      [
        "(5, 6)",
        "(1, 2)",
        "(6, 5)",
        "(9, 2)",
        "(6, 5)",
        "(2, 1)"
      ]
    ],
    "output": "4",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "test_list": [
            "(5, 6)",
            "(1, 2)",
            "(6, 5)",
            "(9, 2)",
            "(6, 5)",
            "(2, 1)"
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "res": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "idx": 0
        }
      },
      {
        "line": 4,
        "step": "4~5",
        "action": "LOOP",
        "vars": {
          "iidx": "1→2"
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "res": 1
        }
      },
      {
        "line": 4,
        "step": "7~8",
        "action": "LOOP",
        "vars": {
          "iidx": "3→4"
        }
      },
      {
        "line": 6,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "res": 2
        }
      },
      {
        "line": 4,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "iidx": 5
        }
      },
      {
        "line": 3,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "idx": 1
        }
      },
      {
        "line": 4,
        "step": "12~15",
        "action": "LOOP",
        "vars": {
          "iidx": "2→5"
        }
      },
      {
        "line": 6,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "res": 3
        }
      },
      {
        "line": 3,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "idx": 2
        }
      },
      {
        "line": 4,
        "step": "18~20",
        "action": "LOOP",
        "vars": {
          "iidx": "3→5"
        }
      },
      {
        "line": 3,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "idx": 3
        }
      },
      {
        "line": 4,
        "step": "22~23",
        "action": "LOOP",
        "vars": {
          "iidx": "4→5"
        }
      },
      {
        "line": 6,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "res": 4
        }
      },
      {
        "line": 3,
        "step": "25~26",
        "action": "LOOP",
        "vars": {
          "idx": "4→5"
        }
      },
      {
        "line": 7,
        "step": 27,
        "action": "RETURN",
        "vars": {
          "__return__": "4"
        }
      }
    ],
    "id": 1304,
    "task_id": 438,
    "exist_function": [
      "count_bidirectional"
    ]
  },
  {
    "code": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)",
    "entry_point": "positive_count",
    "input": [
      [
        0,
        1,
        2,
        -1,
        -5,
        6,
        0,
        -3,
        -2,
        3,
        4,
        6,
        8
      ]
    ],
    "output": 0.54,
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "nums": [
            0,
            1,
            2,
            -1,
            -5,
            6,
            0,
            -3,
            -2,
            3,
            4,
            6,
            8
          ]
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "n": 13
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "n1": 0
        }
      },
      {
        "line": 5,
        "step": "4~5",
        "action": "LOOP",
        "vars": {
          "x": "0→1"
        }
      },
      {
        "line": 7,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "n1": 1
        }
      },
      {
        "line": 5,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "x": 2
        }
      },
      {
        "line": 7,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "n1": 2
        }
      },
      {
        "line": 5,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "x": -1
        }
      },
      {
        "line": 5,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "x": -5
        }
      },
      {
        "line": 5,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "x": 6
        }
      },
      {
        "line": 7,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "n1": 3
        }
      },
      {
        "line": 5,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 5,
        "step": "14~15",
        "action": "LOOP",
        "vars": {
          "x": "-3→-2"
        }
      },
      {
        "line": 5,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "x": 3
        }
      },
      {
        "line": 7,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "n1": 4
        }
      },
      {
        "line": 5,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "x": 4
        }
      },
      {
        "line": 7,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "n1": 5
        }
      },
      {
        "line": 5,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "x": 6
        }
      },
      {
        "line": 7,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "n1": 6
        }
      },
      {
        "line": 5,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "x": 8
        }
      },
      {
        "line": 7,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "n1": 7
        }
      },
      {
        "line": 10,
        "step": 24,
        "action": "RETURN",
        "vars": {
          "__return__": 0.54
        }
      }
    ],
    "id": 1314,
    "task_id": 442,
    "exist_function": [
      "positive_count"
    ]
  },
  {
    "code": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)",
    "entry_point": "positive_count",
    "input": [
      [
        2,
        1,
        2,
        -1,
        -5,
        6,
        4,
        -3,
        -2,
        3,
        4,
        6,
        8
      ]
    ],
    "output": 0.69,
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "nums": [
            2,
            1,
            2,
            -1,
            -5,
            6,
            4,
            -3,
            -2,
            3,
            4,
            6,
            8
          ]
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "n": 13
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "n1": 0
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "x": 2
        }
      },
      {
        "line": 7,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "n1": 1
        }
      },
      {
        "line": 5,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "x": 1
        }
      },
      {
        "line": 7,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "n1": 2
        }
      },
      {
        "line": 5,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "x": 2
        }
      },
      {
        "line": 7,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "n1": 3
        }
      },
      {
        "line": 5,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "x": -1
        }
      },
      {
        "line": 5,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "x": -5
        }
      },
      {
        "line": 5,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "x": 6
        }
      },
      {
        "line": 7,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "n1": 4
        }
      },
      {
        "line": 5,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "x": 4
        }
      },
      {
        "line": 7,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "n1": 5
        }
      },
      {
        "line": 5,
        "step": "16~17",
        "action": "LOOP",
        "vars": {
          "x": "-3→-2"
        }
      },
      {
        "line": 5,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "x": 3
        }
      },
      {
        "line": 7,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "n1": 6
        }
      },
      {
        "line": 5,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "x": 4
        }
      },
      {
        "line": 7,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "n1": 7
        }
      },
      {
        "line": 5,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "x": 6
        }
      },
      {
        "line": 7,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "n1": 8
        }
      },
      {
        "line": 5,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "x": 8
        }
      },
      {
        "line": 7,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "n1": 9
        }
      },
      {
        "line": 10,
        "step": 26,
        "action": "RETURN",
        "vars": {
          "__return__": 0.69
        }
      }
    ],
    "id": 1315,
    "task_id": 442,
    "exist_function": [
      "positive_count"
    ]
  },
  {
    "code": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)",
    "entry_point": "positive_count",
    "input": [
      [
        2,
        4,
        -6,
        -9,
        11,
        -12,
        14,
        -5,
        17
      ]
    ],
    "output": 0.56,
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "nums": [
            2,
            4,
            -6,
            -9,
            11,
            -12,
            14,
            -5,
            17
          ]
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "n": 9
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "n1": 0
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "x": 2
        }
      },
      {
        "line": 7,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "n1": 1
        }
      },
      {
        "line": 5,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "x": 4
        }
      },
      {
        "line": 7,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "n1": 2
        }
      },
      {
        "line": 5,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "x": -6
        }
      },
      {
        "line": 5,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "x": -9
        }
      },
      {
        "line": 5,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "x": 11
        }
      },
      {
        "line": 7,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "n1": 3
        }
      },
      {
        "line": 5,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "x": -12
        }
      },
      {
        "line": 5,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "x": 14
        }
      },
      {
        "line": 7,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "n1": 4
        }
      },
      {
        "line": 5,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "x": -5
        }
      },
      {
        "line": 5,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "x": 17
        }
      },
      {
        "line": 7,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "n1": 5
        }
      },
      {
        "line": 10,
        "step": 18,
        "action": "RETURN",
        "vars": {
          "__return__": 0.56
        }
      }
    ],
    "id": 1316,
    "task_id": 442,
    "exist_function": [
      "positive_count"
    ]
  }
]