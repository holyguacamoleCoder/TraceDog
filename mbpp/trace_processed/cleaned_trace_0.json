[
  {
    "code": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]",
    "entry_point": "min_cost",
    "input": [
      [
        [
          1,
          2,
          3
        ],
        [
          4,
          8,
          2
        ],
        [
          1,
          5,
          3
        ]
      ],
      2,
      2
    ],
    "output": 8,
    "traces": [
      {
        "line": 3,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "cost": [
            [
              1,
              2,
              3
            ],
            [
              4,
              8,
              2
            ],
            [
              1,
              5,
              3
            ]
          ],
          "m": 2,
          "n": 2
        }
      },
      {
        "line": 4,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "tc": [
            [
              0,
              0,
              0
            ],
            [
              0,
              0,
              0
            ],
            [
              0,
              0,
              0
            ]
          ]
        }
      },
      {
        "line": 5,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "tc[0][0]": 1
        }
      },
      {
        "line": 6,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 7,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "tc[1][0]": 5
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 7,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "tc[2][0]": 6
        }
      },
      {
        "line": 8,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "tc[0][1]": 3
        }
      },
      {
        "line": 8,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 9,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "tc[0][2]": 6
        }
      },
      {
        "line": 10,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 11,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 12,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "tc[1][1]": 9
        }
      },
      {
        "line": 11,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 12,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "tc[1][2]": 5
        }
      },
      {
        "line": 10,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 11,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 12,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "tc[2][1]": 10
        }
      },
      {
        "line": 11,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 12,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "tc[2][2]": 8
        }
      },
      {
        "line": 13,
        "step": 22,
        "action": "RETURN",
        "vars": {
          "__return__": 8
        }
      }
    ],
    "id": 0,
    "task_id": 1,
    "exist_function": [
      "min_cost"
    ]
  },
  {
    "code": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]",
    "entry_point": "min_cost",
    "input": [
      [
        [
          2,
          3,
          4
        ],
        [
          5,
          9,
          3
        ],
        [
          2,
          6,
          4
        ]
      ],
      2,
      2
    ],
    "output": 12,
    "traces": [
      {
        "line": 3,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "cost": [
            [
              2,
              3,
              4
            ],
            [
              5,
              9,
              3
            ],
            [
              2,
              6,
              4
            ]
          ],
          "m": 2,
          "n": 2
        }
      },
      {
        "line": 4,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "tc": [
            [
              0,
              0,
              0
            ],
            [
              0,
              0,
              0
            ],
            [
              0,
              0,
              0
            ]
          ]
        }
      },
      {
        "line": 5,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "tc[0][0]": 2
        }
      },
      {
        "line": 6,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 7,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "tc[1][0]": 7
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 7,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "tc[2][0]": 9
        }
      },
      {
        "line": 8,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "tc[0][1]": 5
        }
      },
      {
        "line": 8,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 9,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "tc[0][2]": 9
        }
      },
      {
        "line": 10,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 11,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 12,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "tc[1][1]": 11
        }
      },
      {
        "line": 11,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 12,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "tc[1][2]": 8
        }
      },
      {
        "line": 10,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 11,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 12,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "tc[2][1]": 13
        }
      },
      {
        "line": 11,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 12,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "tc[2][2]": 12
        }
      },
      {
        "line": 13,
        "step": 22,
        "action": "RETURN",
        "vars": {
          "__return__": 12
        }
      }
    ],
    "id": 1,
    "task_id": 1,
    "exist_function": [
      "min_cost"
    ]
  },
  {
    "code": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]",
    "entry_point": "min_cost",
    "input": [
      [
        [
          3,
          4,
          5
        ],
        [
          6,
          10,
          4
        ],
        [
          3,
          7,
          5
        ]
      ],
      2,
      2
    ],
    "output": 16,
    "traces": [
      {
        "line": 3,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "cost": [
            [
              3,
              4,
              5
            ],
            [
              6,
              10,
              4
            ],
            [
              3,
              7,
              5
            ]
          ],
          "m": 2,
          "n": 2
        }
      },
      {
        "line": 4,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "tc": [
            [
              0,
              0,
              0
            ],
            [
              0,
              0,
              0
            ],
            [
              0,
              0,
              0
            ]
          ]
        }
      },
      {
        "line": 5,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "tc[0][0]": 3
        }
      },
      {
        "line": 6,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 7,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "tc[1][0]": 9
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 7,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "tc[2][0]": 12
        }
      },
      {
        "line": 8,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "tc[0][1]": 7
        }
      },
      {
        "line": 8,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 9,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "tc[0][2]": 12
        }
      },
      {
        "line": 10,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 11,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 12,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "tc[1][1]": 13
        }
      },
      {
        "line": 11,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 12,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "tc[1][2]": 11
        }
      },
      {
        "line": 10,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 11,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 12,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "tc[2][1]": 16
        }
      },
      {
        "line": 11,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 12,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "tc[2][2]": 16
        }
      },
      {
        "line": 13,
        "step": 22,
        "action": "RETURN",
        "vars": {
          "__return__": 16
        }
      }
    ],
    "id": 2,
    "task_id": 1,
    "exist_function": [
      "min_cost"
    ]
  },
  {
    "code": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result",
    "entry_point": "is_not_prime",
    "input": [
      10
    ],
    "output": true,
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 10
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "result": false
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 6,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "result": true
        }
      },
      {
        "line": 4,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 7,
        "step": 6,
        "action": "RETURN",
        "vars": {
          "__return__": true
        }
      }
    ],
    "id": 7,
    "task_id": 3,
    "exist_function": [
      "is_not_prime"
    ]
  },
  {
    "code": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result",
    "entry_point": "is_not_prime",
    "input": [
      35
    ],
    "output": true,
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 35
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "result": false
        }
      },
      {
        "line": 4,
        "step": "3~6",
        "action": "LOOP",
        "vars": {
          "i": "2→5"
        }
      },
      {
        "line": 6,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "result": true
        }
      },
      {
        "line": 7,
        "step": 8,
        "action": "RETURN",
        "vars": {
          "__return__": true
        }
      }
    ],
    "id": 8,
    "task_id": 3,
    "exist_function": [
      "is_not_prime"
    ]
  },
  {
    "code": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n]",
    "entry_point": "count_ways",
    "input": [
      2
    ],
    "output": 3,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 2
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "A": [
            0,
            0,
            0
          ]
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "B": [
            0,
            0,
            0
          ]
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "A[0]": 1
        }
      },
      {
        "line": 7,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "B[1]": 1
        }
      },
      {
        "line": 8,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 9,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "A[2]": 3
        }
      },
      {
        "line": 11,
        "step": 8,
        "action": "RETURN",
        "vars": {
          "__return__": 3
        }
      }
    ],
    "id": 12,
    "task_id": 5,
    "exist_function": [
      "count_ways"
    ]
  },
  {
    "code": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n]",
    "entry_point": "count_ways",
    "input": [
      8
    ],
    "output": 153,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 8
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "A": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "B": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "A[0]": 1
        }
      },
      {
        "line": 7,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "B[1]": 1
        }
      },
      {
        "line": 8,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 9,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "A[2]": 3
        }
      },
      {
        "line": 8,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 10,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "B[3]": 4
        }
      },
      {
        "line": 8,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 9,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "A[4]": 11
        }
      },
      {
        "line": 8,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 10,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "B[5]": 15
        }
      },
      {
        "line": 8,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 9,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "A[6]": 41
        }
      },
      {
        "line": 8,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "i": 7
        }
      },
      {
        "line": 10,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "B[7]": 56
        }
      },
      {
        "line": 8,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "i": 8
        }
      },
      {
        "line": 9,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "A[8]": 153
        }
      },
      {
        "line": 11,
        "step": 20,
        "action": "RETURN",
        "vars": {
          "__return__": 153
        }
      }
    ],
    "id": 13,
    "task_id": 5,
    "exist_function": [
      "count_ways"
    ]
  },
  {
    "code": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n]",
    "entry_point": "count_ways",
    "input": [
      12
    ],
    "output": 2131,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 12
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "A": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "B": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "A[0]": 1
        }
      },
      {
        "line": 7,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "B[1]": 1
        }
      },
      {
        "line": 8,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 9,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "A[2]": 3
        }
      },
      {
        "line": 8,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 10,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "B[3]": 4
        }
      },
      {
        "line": 8,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 9,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "A[4]": 11
        }
      },
      {
        "line": 8,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 10,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "B[5]": 15
        }
      },
      {
        "line": 8,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 9,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "A[6]": 41
        }
      },
      {
        "line": 8,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "i": 7
        }
      },
      {
        "line": 10,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "B[7]": 56
        }
      },
      {
        "line": 8,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "i": 8
        }
      },
      {
        "line": 9,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "A[8]": 153
        }
      },
      {
        "line": 8,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "i": 9
        }
      },
      {
        "line": 10,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "B[9]": 209
        }
      },
      {
        "line": 8,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "i": 10
        }
      },
      {
        "line": 9,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "A[10]": 571
        }
      },
      {
        "line": 8,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "i": 11
        }
      },
      {
        "line": 10,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "B[11]": 780
        }
      },
      {
        "line": 8,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "i": 12
        }
      },
      {
        "line": 9,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "A[12]": 2131
        }
      },
      {
        "line": 11,
        "step": 28,
        "action": "RETURN",
        "vars": {
          "__return__": 2131
        }
      }
    ],
    "id": 14,
    "task_id": 5,
    "exist_function": [
      "count_ways"
    ]
  },
  {
    "code": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n",
    "entry_point": "find_Rotations",
    "input": [
      "aaaa"
    ],
    "output": 1,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "str": "aaaa"
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "tmp": "aaaaaaaa"
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "n": 4
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "substring": "aaaa"
        }
      },
      {
        "line": 7,
        "step": 6,
        "action": "RETURN",
        "vars": {
          "__return__": 1
        }
      }
    ],
    "id": 24,
    "task_id": 9,
    "exist_function": [
      "find_Rotations"
    ]
  },
  {
    "code": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n",
    "entry_point": "find_Rotations",
    "input": [
      "ab"
    ],
    "output": 2,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "str": "ab"
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "tmp": "abab"
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "n": 2
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "substring": "ba"
        }
      },
      {
        "line": 4,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 5,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "substring": "ab"
        }
      },
      {
        "line": 7,
        "step": 8,
        "action": "RETURN",
        "vars": {
          "__return__": 2
        }
      }
    ],
    "id": 25,
    "task_id": 9,
    "exist_function": [
      "find_Rotations"
    ]
  },
  {
    "code": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n",
    "entry_point": "find_Rotations",
    "input": [
      "abc"
    ],
    "output": 3,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "str": "abc"
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "tmp": "abcabc"
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "n": 3
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "substring": "bca"
        }
      },
      {
        "line": 4,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 5,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "substring": "cab"
        }
      },
      {
        "line": 4,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 5,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "substring": "abc"
        }
      },
      {
        "line": 7,
        "step": 10,
        "action": "RETURN",
        "vars": {
          "__return__": 3
        }
      }
    ],
    "id": 26,
    "task_id": 9,
    "exist_function": [
      "find_Rotations"
    ]
  },
  {
    "code": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s",
    "entry_point": "remove_Occ",
    "input": [
      "hello",
      "l"
    ],
    "output": "heo",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "s": "hello",
          "ch": "l"
        }
      },
      {
        "line": 2,
        "step": "2~4",
        "action": "LOOP",
        "vars": {
          "i": "0→2"
        }
      },
      {
        "line": 4,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "s": "helo"
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 6,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 8,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "s": "heo"
        }
      },
      {
        "line": 10,
        "step": 9,
        "action": "RETURN",
        "vars": {
          "__return__": "heo"
        }
      }
    ],
    "id": 30,
    "task_id": 11,
    "exist_function": [
      "remove_Occ"
    ]
  },
  {
    "code": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s",
    "entry_point": "remove_Occ",
    "input": [
      "abcda",
      "a"
    ],
    "output": "bcd",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "s": "abcda",
          "ch": "a"
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "s": "bcda"
        }
      },
      {
        "line": 6,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 8,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "s": "bcd"
        }
      },
      {
        "line": 10,
        "step": 6,
        "action": "RETURN",
        "vars": {
          "__return__": "bcd"
        }
      }
    ],
    "id": 31,
    "task_id": 11,
    "exist_function": [
      "remove_Occ"
    ]
  },
  {
    "code": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s",
    "entry_point": "remove_Occ",
    "input": [
      "PHP",
      "P"
    ],
    "output": "H",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "s": "PHP",
          "ch": "P"
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "s": "HP"
        }
      },
      {
        "line": 6,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 8,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "s": "H"
        }
      },
      {
        "line": 10,
        "step": 6,
        "action": "RETURN",
        "vars": {
          "__return__": "H"
        }
      }
    ],
    "id": 32,
    "task_id": 11,
    "exist_function": [
      "remove_Occ"
    ]
  },
  {
    "code": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)",
    "entry_point": "count_common",
    "input": [
      [
        "red",
        "green",
        "black",
        "pink",
        "black",
        "white",
        "black",
        "eyes",
        "white",
        "black",
        "orange",
        "pink",
        "pink",
        "red",
        "red",
        "white",
        "orange",
        "white",
        "black",
        "pink",
        "green",
        "green",
        "pink",
        "green",
        "pink",
        "white",
        "orange",
        "orange",
        "red"
      ]
    ],
    "output": [
      "('pink', 6)",
      "('black', 5)",
      "('white', 5)",
      "('red', 4)"
    ],
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "words": [
            "red",
            "green",
            "black",
            "pink",
            "black",
            "white",
            "black",
            "eyes",
            "white",
            "black",
            "orange",
            "pink",
            "pink",
            "red",
            "red",
            "white",
            "orange",
            "white",
            "black",
            "pink",
            "green",
            "green",
            "pink",
            "green",
            "pink",
            "white",
            "orange",
            "orange",
            "red"
          ]
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "word_counts": {
            "red": 4,
            "green": 4,
            "black": 5,
            "pink": 6,
            "white": 5,
            "eyes": 1,
            "orange": 4
          }
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "top_four": [
            "('pink', 6)",
            "('black', 5)",
            "('white', 5)",
            "('red', 4)"
          ]
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": [
            "('pink', 6)",
            "('black', 5)",
            "('white', 5)",
            "('red', 4)"
          ]
        }
      }
    ],
    "id": 36,
    "task_id": 13,
    "exist_function": [
      "count_common"
    ]
  },
  {
    "code": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)",
    "entry_point": "count_common",
    "input": [
      [
        "one",
        "two",
        "three",
        "four",
        "five",
        "one",
        "two",
        "one",
        "three",
        "one"
      ]
    ],
    "output": [
      "('one', 4)",
      "('two', 2)",
      "('three', 2)",
      "('four', 1)"
    ],
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "words": [
            "one",
            "two",
            "three",
            "four",
            "five",
            "one",
            "two",
            "one",
            "three",
            "one"
          ]
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "word_counts": {
            "one": 4,
            "two": 2,
            "three": 2,
            "four": 1,
            "five": 1
          }
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "top_four": [
            "('one', 4)",
            "('two', 2)",
            "('three', 2)",
            "('four', 1)"
          ]
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": [
            "('one', 4)",
            "('two', 2)",
            "('three', 2)",
            "('four', 1)"
          ]
        }
      }
    ],
    "id": 37,
    "task_id": 13,
    "exist_function": [
      "count_common"
    ]
  },
  {
    "code": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)",
    "entry_point": "count_common",
    "input": [
      [
        "Facebook",
        "Apple",
        "Amazon",
        "Netflix",
        "Google",
        "Apple",
        "Netflix",
        "Amazon"
      ]
    ],
    "output": [
      "('Apple', 2)",
      "('Amazon', 2)",
      "('Netflix', 2)",
      "('Facebook', 1)"
    ],
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "words": [
            "Facebook",
            "Apple",
            "Amazon",
            "Netflix",
            "Google",
            "Apple",
            "Netflix",
            "Amazon"
          ]
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "word_counts": {
            "Facebook": 1,
            "Apple": 2,
            "Amazon": 2,
            "Netflix": 2,
            "Google": 1
          }
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "top_four": [
            "('Apple', 2)",
            "('Amazon', 2)",
            "('Netflix', 2)",
            "('Facebook', 1)"
          ]
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": [
            "('Apple', 2)",
            "('Amazon', 2)",
            "('Netflix', 2)",
            "('Facebook', 1)"
          ]
        }
      }
    ],
    "id": 38,
    "task_id": 13,
    "exist_function": [
      "count_common"
    ]
  },
  {
    "code": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind])",
    "entry_point": "remove_dirty_chars",
    "input": [
      "probasscurve",
      "pros"
    ],
    "output": "bacuve",
    "traces": [
      {
        "line": 14,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "string": "probasscurve",
          "second_string": "pros"
        }
      },
      {
        "line": 15,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "count": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        }
      },
      {
        "line": 16,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 0
        }
      },
      {
        "line": 17,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "res_ind": 0
        }
      },
      {
        "line": 18,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "temp": ""
        }
      },
      {
        "line": 19,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "str_list": [
            "p",
            "r",
            "o",
            "b",
            "a",
            "s",
            "s",
            "c",
            "u",
            "r",
            "v",
            "e"
          ]
        }
      },
      {
        "line": 21,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "temp": "p"
        }
      },
      {
        "line": 25,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 1
        }
      },
      {
        "line": 21,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "temp": "r"
        }
      },
      {
        "line": 25,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 2
        }
      },
      {
        "line": 21,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "temp": "o"
        }
      },
      {
        "line": 25,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 3
        }
      },
      {
        "line": 21,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "temp": "b"
        }
      },
      {
        "line": 23,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "str_list[0]": "b"
        }
      },
      {
        "line": 24,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "res_ind": 1
        }
      },
      {
        "line": 25,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 4
        }
      },
      {
        "line": 21,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "temp": "a"
        }
      },
      {
        "line": 23,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "str_list[1]": "a"
        }
      },
      {
        "line": 24,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "res_ind": 2
        }
      },
      {
        "line": 25,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 5
        }
      },
      {
        "line": 21,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "temp": "s"
        }
      },
      {
        "line": 25,
        "step": "22~23",
        "action": "LOOP",
        "vars": {
          "ip_ind": "6→7"
        }
      },
      {
        "line": 21,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "temp": "c"
        }
      },
      {
        "line": 23,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "str_list[2]": "c"
        }
      },
      {
        "line": 24,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "res_ind": 3
        }
      },
      {
        "line": 25,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 8
        }
      },
      {
        "line": 21,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "temp": "u"
        }
      },
      {
        "line": 23,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "str_list[3]": "u"
        }
      },
      {
        "line": 24,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "res_ind": 4
        }
      },
      {
        "line": 25,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 9
        }
      },
      {
        "line": 21,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "temp": "r"
        }
      },
      {
        "line": 25,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 10
        }
      },
      {
        "line": 21,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "temp": "v"
        }
      },
      {
        "line": 23,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "str_list[4]": "v"
        }
      },
      {
        "line": 24,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "res_ind": 5
        }
      },
      {
        "line": 25,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 11
        }
      },
      {
        "line": 21,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "temp": "e"
        }
      },
      {
        "line": 23,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "str_list[5]": "e"
        }
      },
      {
        "line": 24,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "res_ind": 6
        }
      },
      {
        "line": 25,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 12
        }
      },
      {
        "line": 26,
        "step": 42,
        "action": "RETURN",
        "vars": {
          "__return__": "bacuve"
        }
      }
    ],
    "id": 51,
    "task_id": 18,
    "exist_function": [
      "str_to_list",
      "lst_to_string",
      "get_char_count_array",
      "remove_dirty_chars"
    ]
  },
  {
    "code": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind])",
    "entry_point": "remove_dirty_chars",
    "input": [
      "digitalindia",
      "talent"
    ],
    "output": "digiidi",
    "traces": [
      {
        "line": 14,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "string": "digitalindia",
          "second_string": "talent"
        }
      },
      {
        "line": 15,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "count": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            2,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        }
      },
      {
        "line": 16,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 0
        }
      },
      {
        "line": 17,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "res_ind": 0
        }
      },
      {
        "line": 18,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "temp": ""
        }
      },
      {
        "line": 19,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "str_list": [
            "d",
            "i",
            "g",
            "i",
            "t",
            "a",
            "l",
            "i",
            "n",
            "d",
            "i",
            "a"
          ]
        }
      },
      {
        "line": 21,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "temp": "d"
        }
      },
      {
        "line": 24,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "res_ind": 1
        }
      },
      {
        "line": 25,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 1
        }
      },
      {
        "line": 21,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "temp": "i"
        }
      },
      {
        "line": 24,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "res_ind": 2
        }
      },
      {
        "line": 25,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 2
        }
      },
      {
        "line": 21,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "temp": "g"
        }
      },
      {
        "line": 24,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "res_ind": 3
        }
      },
      {
        "line": 25,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 3
        }
      },
      {
        "line": 21,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "temp": "i"
        }
      },
      {
        "line": 24,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "res_ind": 4
        }
      },
      {
        "line": 25,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 4
        }
      },
      {
        "line": 21,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "temp": "t"
        }
      },
      {
        "line": 25,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 5
        }
      },
      {
        "line": 21,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "temp": "a"
        }
      },
      {
        "line": 25,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 6
        }
      },
      {
        "line": 21,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "temp": "l"
        }
      },
      {
        "line": 25,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 7
        }
      },
      {
        "line": 21,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "temp": "i"
        }
      },
      {
        "line": 23,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "str_list[4]": "i"
        }
      },
      {
        "line": 24,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "res_ind": 5
        }
      },
      {
        "line": 25,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 8
        }
      },
      {
        "line": 21,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "temp": "n"
        }
      },
      {
        "line": 25,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 9
        }
      },
      {
        "line": 21,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "temp": "d"
        }
      },
      {
        "line": 23,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "str_list[5]": "d"
        }
      },
      {
        "line": 24,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "res_ind": 6
        }
      },
      {
        "line": 25,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 10
        }
      },
      {
        "line": 21,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "temp": "i"
        }
      },
      {
        "line": 23,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "str_list[6]": "i"
        }
      },
      {
        "line": 24,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "res_ind": 7
        }
      },
      {
        "line": 25,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 11
        }
      },
      {
        "line": 21,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "temp": "a"
        }
      },
      {
        "line": 25,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 12
        }
      },
      {
        "line": 26,
        "step": 41,
        "action": "RETURN",
        "vars": {
          "__return__": "digiidi"
        }
      }
    ],
    "id": 52,
    "task_id": 18,
    "exist_function": [
      "str_to_list",
      "lst_to_string",
      "get_char_count_array",
      "remove_dirty_chars"
    ]
  },
  {
    "code": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind])",
    "entry_point": "remove_dirty_chars",
    "input": [
      "exoticmiles",
      "toxic"
    ],
    "output": "emles",
    "traces": [
      {
        "line": 14,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "string": "exoticmiles",
          "second_string": "toxic"
        }
      },
      {
        "line": 15,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "count": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        }
      },
      {
        "line": 16,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 0
        }
      },
      {
        "line": 17,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "res_ind": 0
        }
      },
      {
        "line": 18,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "temp": ""
        }
      },
      {
        "line": 19,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "str_list": [
            "e",
            "x",
            "o",
            "t",
            "i",
            "c",
            "m",
            "i",
            "l",
            "e",
            "s"
          ]
        }
      },
      {
        "line": 21,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "temp": "e"
        }
      },
      {
        "line": 24,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "res_ind": 1
        }
      },
      {
        "line": 25,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 1
        }
      },
      {
        "line": 21,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "temp": "x"
        }
      },
      {
        "line": 25,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 2
        }
      },
      {
        "line": 21,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "temp": "o"
        }
      },
      {
        "line": 25,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 3
        }
      },
      {
        "line": 21,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "temp": "t"
        }
      },
      {
        "line": 25,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 4
        }
      },
      {
        "line": 21,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "temp": "i"
        }
      },
      {
        "line": 25,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 5
        }
      },
      {
        "line": 21,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "temp": "c"
        }
      },
      {
        "line": 25,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 6
        }
      },
      {
        "line": 21,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "temp": "m"
        }
      },
      {
        "line": 23,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "str_list[1]": "m"
        }
      },
      {
        "line": 24,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "res_ind": 2
        }
      },
      {
        "line": 25,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 7
        }
      },
      {
        "line": 21,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "temp": "i"
        }
      },
      {
        "line": 25,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 8
        }
      },
      {
        "line": 21,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "temp": "l"
        }
      },
      {
        "line": 23,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "str_list[2]": "l"
        }
      },
      {
        "line": 24,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "res_ind": 3
        }
      },
      {
        "line": 25,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 9
        }
      },
      {
        "line": 21,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "temp": "e"
        }
      },
      {
        "line": 23,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "str_list[3]": "e"
        }
      },
      {
        "line": 24,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "res_ind": 4
        }
      },
      {
        "line": 25,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 10
        }
      },
      {
        "line": 21,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "temp": "s"
        }
      },
      {
        "line": 23,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "str_list[4]": "s"
        }
      },
      {
        "line": 24,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "res_ind": 5
        }
      },
      {
        "line": 25,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "ip_ind": 11
        }
      },
      {
        "line": 26,
        "step": 38,
        "action": "RETURN",
        "vars": {
          "__return__": "emles"
        }
      }
    ],
    "id": 53,
    "task_id": 18,
    "exist_function": [
      "str_to_list",
      "lst_to_string",
      "get_char_count_array",
      "remove_dirty_chars"
    ]
  },
  {
    "code": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False",
    "entry_point": "is_woodall",
    "input": [
      383
    ],
    "output": true,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "x": 383
        }
      },
      {
        "line": 6,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "x": 384
        }
      },
      {
        "line": 7,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "p": 0
        }
      },
      {
        "line": 9,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "x": 192.0
        }
      },
      {
        "line": 10,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "p": 1
        }
      },
      {
        "line": 9,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "x": 96.0
        }
      },
      {
        "line": 10,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "p": 2
        }
      },
      {
        "line": 9,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "x": 48.0
        }
      },
      {
        "line": 10,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "p": 3
        }
      },
      {
        "line": 9,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "x": 24.0
        }
      },
      {
        "line": 10,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "p": 4
        }
      },
      {
        "line": 9,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "x": 12.0
        }
      },
      {
        "line": 10,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "p": 5
        }
      },
      {
        "line": 9,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "x": 6.0
        }
      },
      {
        "line": 10,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "p": 6
        }
      },
      {
        "line": 12,
        "step": 16,
        "action": "RETURN",
        "vars": {
          "__return__": true
        }
      }
    ],
    "id": 57,
    "task_id": 20,
    "exist_function": [
      "is_woodall"
    ]
  },
  {
    "code": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate",
    "entry_point": "find_first_duplicate",
    "input": [
      [
        1,
        2,
        3,
        4,
        4,
        5
      ]
    ],
    "output": 4,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "nums": [
            1,
            2,
            3,
            4,
            4,
            5
          ]
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "no_duplicate": -1
        }
      },
      {
        "line": 5,
        "step": "3~7",
        "action": "LOOP",
        "vars": {
          "i": "0→4"
        }
      },
      {
        "line": 8,
        "step": 8,
        "action": "RETURN",
        "vars": {
          "__return__": 4
        }
      }
    ],
    "id": 63,
    "task_id": 22,
    "exist_function": [
      "find_first_duplicate"
    ]
  },
  {
    "code": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate",
    "entry_point": "find_first_duplicate",
    "input": [
      [
        1,
        2,
        3,
        4
      ]
    ],
    "output": -1,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "nums": [
            1,
            2,
            3,
            4
          ]
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "no_duplicate": -1
        }
      },
      {
        "line": 5,
        "step": "3~6",
        "action": "LOOP",
        "vars": {
          "i": "0→3"
        }
      },
      {
        "line": 12,
        "step": 7,
        "action": "RETURN",
        "vars": {
          "__return__": -1
        }
      }
    ],
    "id": 64,
    "task_id": 22,
    "exist_function": [
      "find_first_duplicate"
    ]
  },
  {
    "code": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate",
    "entry_point": "find_first_duplicate",
    "input": [
      [
        1,
        1,
        2,
        3,
        3,
        2,
        2
      ]
    ],
    "output": 1,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "nums": [
            1,
            1,
            2,
            3,
            3,
            2,
            2
          ]
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "no_duplicate": -1
        }
      },
      {
        "line": 5,
        "step": "3~4",
        "action": "LOOP",
        "vars": {
          "i": "0→1"
        }
      },
      {
        "line": 8,
        "step": 5,
        "action": "RETURN",
        "vars": {
          "__return__": 1
        }
      }
    ],
    "id": 65,
    "task_id": 22,
    "exist_function": [
      "find_first_duplicate"
    ]
  },
  {
    "code": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi",
    "entry_point": "maximum_Sum",
    "input": [
      [
        [
          1,
          2,
          3
        ],
        [
          4,
          5,
          6
        ],
        [
          10,
          11,
          12
        ],
        [
          7,
          8,
          9
        ]
      ]
    ],
    "output": 33,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list1": [
            [
              1,
              2,
              3
            ],
            [
              4,
              5,
              6
            ],
            [
              10,
              11,
              12
            ],
            [
              7,
              8,
              9
            ]
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "maxi": -100000
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "x": [
            1,
            2,
            3
          ]
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "sum": 0
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "y": 1
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "sum": 1
        }
      },
      {
        "line": 5,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "y": 2
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "sum": 3
        }
      },
      {
        "line": 5,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "y": 3
        }
      },
      {
        "line": 6,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "sum": 6
        }
      },
      {
        "line": 7,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "maxi": 6
        }
      },
      {
        "line": 3,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "x[0]": 4,
          "x[2]": 6,
          "x[1]": 5
        }
      },
      {
        "line": 4,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "sum": 0
        }
      },
      {
        "line": 5,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "y": 4
        }
      },
      {
        "line": 6,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "sum": 4
        }
      },
      {
        "line": 5,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "y": 5
        }
      },
      {
        "line": 6,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "sum": 9
        }
      },
      {
        "line": 5,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "y": 6
        }
      },
      {
        "line": 6,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "sum": 15
        }
      },
      {
        "line": 7,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "maxi": 15
        }
      },
      {
        "line": 3,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "x[0]": 10,
          "x[2]": 12,
          "x[1]": 11
        }
      },
      {
        "line": 4,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "sum": 0
        }
      },
      {
        "line": 5,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "y": 10
        }
      },
      {
        "line": 6,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "sum": 10
        }
      },
      {
        "line": 5,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "y": 11
        }
      },
      {
        "line": 6,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "sum": 21
        }
      },
      {
        "line": 5,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "y": 12
        }
      },
      {
        "line": 6,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "sum": 33
        }
      },
      {
        "line": 7,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "maxi": 33
        }
      },
      {
        "line": 3,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "x[0]": 7,
          "x[2]": 9,
          "x[1]": 8
        }
      },
      {
        "line": 4,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "sum": 0
        }
      },
      {
        "line": 5,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "y": 7
        }
      },
      {
        "line": 6,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "sum": 7
        }
      },
      {
        "line": 5,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "y": 8
        }
      },
      {
        "line": 6,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "sum": 15
        }
      },
      {
        "line": 5,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "y": 9
        }
      },
      {
        "line": 6,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "sum": 24
        }
      },
      {
        "line": 8,
        "step": 38,
        "action": "RETURN",
        "vars": {
          "__return__": 33
        }
      }
    ],
    "id": 66,
    "task_id": 23,
    "exist_function": [
      "maximum_Sum"
    ]
  },
  {
    "code": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi",
    "entry_point": "maximum_Sum",
    "input": [
      [
        [
          0,
          1,
          1
        ],
        [
          1,
          1,
          2
        ],
        [
          3,
          2,
          1
        ]
      ]
    ],
    "output": 6,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list1": [
            [
              0,
              1,
              1
            ],
            [
              1,
              1,
              2
            ],
            [
              3,
              2,
              1
            ]
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "maxi": -100000
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "x": [
            0,
            1,
            1
          ]
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "sum": 0
        }
      },
      {
        "line": 5,
        "step": "5~6",
        "action": "LOOP",
        "vars": {
          "y": "0→1"
        }
      },
      {
        "line": 6,
        "step": "7~8",
        "action": "LOOP",
        "vars": {
          "sum": "1→2"
        }
      },
      {
        "line": 7,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "maxi": 2
        }
      },
      {
        "line": 3,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "x[0]": 1,
          "x[2]": 2
        }
      },
      {
        "line": 4,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "sum": 0
        }
      },
      {
        "line": 6,
        "step": "12~13",
        "action": "LOOP",
        "vars": {
          "sum": "1→2"
        }
      },
      {
        "line": 5,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "y": 2
        }
      },
      {
        "line": 6,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "sum": 4
        }
      },
      {
        "line": 7,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "maxi": 4
        }
      },
      {
        "line": 3,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "x[0]": 3,
          "x[2]": 1,
          "x[1]": 2
        }
      },
      {
        "line": 4,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "sum": 0
        }
      },
      {
        "line": 5,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "y": 3
        }
      },
      {
        "line": 6,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "sum": 3
        }
      },
      {
        "line": 5,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "y": 2
        }
      },
      {
        "line": 6,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "sum": 5
        }
      },
      {
        "line": 5,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "y": 1
        }
      },
      {
        "line": 6,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "sum": 6
        }
      },
      {
        "line": 7,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "maxi": 6
        }
      },
      {
        "line": 8,
        "step": 26,
        "action": "RETURN",
        "vars": {
          "__return__": 6
        }
      }
    ],
    "id": 67,
    "task_id": 23,
    "exist_function": [
      "maximum_Sum"
    ]
  },
  {
    "code": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi",
    "entry_point": "maximum_Sum",
    "input": [
      [
        [
          0,
          1,
          3
        ],
        [
          1,
          2,
          1
        ],
        [
          9,
          8,
          2
        ],
        [
          0,
          1,
          0
        ],
        [
          6,
          4,
          8
        ]
      ]
    ],
    "output": 19,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list1": [
            [
              0,
              1,
              3
            ],
            [
              1,
              2,
              1
            ],
            [
              9,
              8,
              2
            ],
            [
              0,
              1,
              0
            ],
            [
              6,
              4,
              8
            ]
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "maxi": -100000
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "x": [
            0,
            1,
            3
          ]
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "sum": 0
        }
      },
      {
        "line": 5,
        "step": "5~6",
        "action": "LOOP",
        "vars": {
          "y": "0→1"
        }
      },
      {
        "line": 6,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "sum": 1
        }
      },
      {
        "line": 5,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "y": 3
        }
      },
      {
        "line": 6,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "sum": 4
        }
      },
      {
        "line": 7,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "maxi": 4
        }
      },
      {
        "line": 3,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "x[0]": 1,
          "x[2]": 1,
          "x[1]": 2
        }
      },
      {
        "line": 4,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "sum": 0
        }
      },
      {
        "line": 5,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "y": 1
        }
      },
      {
        "line": 6,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "sum": 1
        }
      },
      {
        "line": 5,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "y": 2
        }
      },
      {
        "line": 6,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "sum": 3
        }
      },
      {
        "line": 5,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "y": 1
        }
      },
      {
        "line": 6,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "sum": 4
        }
      },
      {
        "line": 3,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "x[0]": 9,
          "x[2]": 2,
          "x[1]": 8
        }
      },
      {
        "line": 4,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "sum": 0
        }
      },
      {
        "line": 5,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "y": 9
        }
      },
      {
        "line": 6,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "sum": 9
        }
      },
      {
        "line": 5,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "y": 8
        }
      },
      {
        "line": 6,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "sum": 17
        }
      },
      {
        "line": 5,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "y": 2
        }
      },
      {
        "line": 6,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "sum": 19
        }
      },
      {
        "line": 7,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "maxi": 19
        }
      },
      {
        "line": 3,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "x[0]": 0,
          "x[2]": 0,
          "x[1]": 1
        }
      },
      {
        "line": 4,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "sum": 0
        }
      },
      {
        "line": 5,
        "step": "30~31",
        "action": "LOOP",
        "vars": {
          "y": "0→1"
        }
      },
      {
        "line": 6,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "sum": 1
        }
      },
      {
        "line": 5,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "y": 0
        }
      },
      {
        "line": 3,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "x[0]": 6,
          "x[2]": 8,
          "x[1]": 4
        }
      },
      {
        "line": 4,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "sum": 0
        }
      },
      {
        "line": 5,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "y": 6
        }
      },
      {
        "line": 6,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "sum": 6
        }
      },
      {
        "line": 5,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "y": 4
        }
      },
      {
        "line": 6,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "sum": 10
        }
      },
      {
        "line": 5,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "y": 8
        }
      },
      {
        "line": 6,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "sum": 18
        }
      },
      {
        "line": 8,
        "step": 42,
        "action": "RETURN",
        "vars": {
          "__return__": 19
        }
      }
    ],
    "id": 68,
    "task_id": 23,
    "exist_function": [
      "maximum_Sum"
    ]
  },
  {
    "code": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)",
    "entry_point": "binary_to_decimal",
    "input": [
      100
    ],
    "output": 4,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "binary": 100
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "binary1": 100
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "decimal": 0,
          "i": 0,
          "n": 0
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "dec": 0
        }
      },
      {
        "line": 7,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "binary": 10
        }
      },
      {
        "line": 8,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 7,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "binary": 1
        }
      },
      {
        "line": 8,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 5,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "dec": 1
        }
      },
      {
        "line": 6,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "decimal": 4
        }
      },
      {
        "line": 7,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "binary": 0
        }
      },
      {
        "line": 8,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 9,
        "step": 13,
        "action": "RETURN",
        "vars": {
          "__return__": 4
        }
      }
    ],
    "id": 69,
    "task_id": 24,
    "exist_function": [
      "binary_to_decimal"
    ]
  },
  {
    "code": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)",
    "entry_point": "binary_to_decimal",
    "input": [
      1011
    ],
    "output": 11,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "binary": 1011
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "binary1": 1011
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "decimal": 0,
          "i": 0,
          "n": 0
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "dec": 1
        }
      },
      {
        "line": 6,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "decimal": 1
        }
      },
      {
        "line": 7,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "binary": 101
        }
      },
      {
        "line": 8,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "decimal": 3
        }
      },
      {
        "line": 7,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "binary": 10
        }
      },
      {
        "line": 8,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 5,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "dec": 0
        }
      },
      {
        "line": 7,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "binary": 1
        }
      },
      {
        "line": 8,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 5,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "dec": 1
        }
      },
      {
        "line": 6,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "decimal": 11
        }
      },
      {
        "line": 7,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "binary": 0
        }
      },
      {
        "line": 8,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 9,
        "step": 18,
        "action": "RETURN",
        "vars": {
          "__return__": 11
        }
      }
    ],
    "id": 70,
    "task_id": 24,
    "exist_function": [
      "binary_to_decimal"
    ]
  },
  {
    "code": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)",
    "entry_point": "binary_to_decimal",
    "input": [
      1101101
    ],
    "output": 109,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "binary": 1101101
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "binary1": 1101101
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "decimal": 0,
          "i": 0,
          "n": 0
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "dec": 1
        }
      },
      {
        "line": 6,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "decimal": 1
        }
      },
      {
        "line": 7,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "binary": 110110
        }
      },
      {
        "line": 8,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 5,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "dec": 0
        }
      },
      {
        "line": 7,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "binary": 11011
        }
      },
      {
        "line": 8,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 5,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "dec": 1
        }
      },
      {
        "line": 6,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "decimal": 5
        }
      },
      {
        "line": 7,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "binary": 1101
        }
      },
      {
        "line": 8,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 6,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "decimal": 13
        }
      },
      {
        "line": 7,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "binary": 110
        }
      },
      {
        "line": 8,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 5,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "dec": 0
        }
      },
      {
        "line": 7,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "binary": 11
        }
      },
      {
        "line": 8,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 5,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "dec": 1
        }
      },
      {
        "line": 6,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "decimal": 45
        }
      },
      {
        "line": 7,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "binary": 1
        }
      },
      {
        "line": 8,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 6,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "decimal": 109
        }
      },
      {
        "line": 7,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "binary": 0
        }
      },
      {
        "line": 8,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "i": 7
        }
      },
      {
        "line": 9,
        "step": 28,
        "action": "RETURN",
        "vars": {
          "__return__": 109
        }
      }
    ],
    "id": 71,
    "task_id": 24,
    "exist_function": [
      "binary_to_decimal"
    ]
  },
  {
    "code": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod;",
    "entry_point": "find_Product",
    "input": [
      [
        1,
        1,
        2,
        3
      ],
      4
    ],
    "output": 6,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "arr": [
            1,
            1,
            2,
            3
          ],
          "n": 4
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "prod": 1
        }
      },
      {
        "line": 4,
        "step": "3~5",
        "action": "LOOP",
        "vars": {
          "i": "0→2"
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "prod": 2
        }
      },
      {
        "line": 4,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "prod": 6
        }
      },
      {
        "line": 7,
        "step": 9,
        "action": "RETURN",
        "vars": {
          "__return__": 6
        }
      }
    ],
    "id": 72,
    "task_id": 25,
    "exist_function": [
      "find_Product"
    ]
  },
  {
    "code": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod;",
    "entry_point": "find_Product",
    "input": [
      [
        1,
        1,
        1,
        2,
        3
      ],
      5
    ],
    "output": 6,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "arr": [
            1,
            2,
            3,
            1,
            1
          ],
          "n": 5
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "arr[4]": 3,
          "arr[3]": 2,
          "arr[1]": 1,
          "arr[2]": 1
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "prod": 1
        }
      },
      {
        "line": 4,
        "step": "4~7",
        "action": "LOOP",
        "vars": {
          "i": "0→3"
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "prod": 2
        }
      },
      {
        "line": 4,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 6,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "prod": 6
        }
      },
      {
        "line": 7,
        "step": 11,
        "action": "RETURN",
        "vars": {
          "__return__": 6
        }
      }
    ],
    "id": 73,
    "task_id": 25,
    "exist_function": [
      "find_Product"
    ]
  },
  {
    "code": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod;",
    "entry_point": "find_Product",
    "input": [
      [
        1,
        1,
        4,
        5,
        6
      ],
      5
    ],
    "output": 120,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "arr": [
            1,
            1,
            4,
            5,
            6
          ],
          "n": 5
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "prod": 1
        }
      },
      {
        "line": 4,
        "step": "3~5",
        "action": "LOOP",
        "vars": {
          "i": "0→2"
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "prod": 4
        }
      },
      {
        "line": 4,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "prod": 20
        }
      },
      {
        "line": 4,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 6,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "prod": 120
        }
      },
      {
        "line": 7,
        "step": 11,
        "action": "RETURN",
        "vars": {
          "__return__": 120
        }
      }
    ],
    "id": 74,
    "task_id": 25,
    "exist_function": [
      "find_Product"
    ]
  },
  {
    "code": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res)",
    "entry_point": "check_k_elements",
    "input": [
      [
        "(4, 4)",
        "(4, 4, 4)",
        "(4, 4)",
        "(4, 4, 4, 4)",
        "(4,)"
      ],
      4
    ],
    "output": true,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "test_list": [
            "(4, 4)",
            "(4, 4, 4)",
            "(4, 4)",
            "(4, 4, 4, 4)",
            "(4,)"
          ],
          "K": 4
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "res": true
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "tup": "(4, 4)"
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "ele": 4
        }
      },
      {
        "line": 3,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "tup[2]": 4
        }
      },
      {
        "line": 3,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "tup": "(4, 4)"
        }
      },
      {
        "line": 3,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "tup[2]": 4,
          "tup[3]": 4
        }
      },
      {
        "line": 3,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "tup": "(4,)"
        }
      },
      {
        "line": 7,
        "step": 9,
        "action": "RETURN",
        "vars": {
          "__return__": true
        }
      }
    ],
    "id": 75,
    "task_id": 26,
    "exist_function": [
      "check_k_elements"
    ]
  },
  {
    "code": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res)",
    "entry_point": "check_k_elements",
    "input": [
      [
        "(7, 7, 7)",
        "(7, 7)"
      ],
      7
    ],
    "output": true,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "test_list": [
            "(7, 7, 7)",
            "(7, 7)"
          ],
          "K": 7
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "res": true
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "tup": "(7, 7, 7)"
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "ele": 7
        }
      },
      {
        "line": 3,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "tup": "(7, 7)"
        }
      },
      {
        "line": 7,
        "step": 6,
        "action": "RETURN",
        "vars": {
          "__return__": true
        }
      }
    ],
    "id": 76,
    "task_id": 26,
    "exist_function": [
      "check_k_elements"
    ]
  },
  {
    "code": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list",
    "entry_point": "remove",
    "input": [
      [
        "4words",
        "3letters",
        "4digits"
      ]
    ],
    "output": [
      "words",
      "letters",
      "digits"
    ],
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list": [
            "4words",
            "3letters",
            "4digits"
          ]
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "pattern": "[0-9]"
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "list[0]": "words",
          "list[1]": "letters",
          "list[2]": "digits"
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": [
            "words",
            "letters",
            "digits"
          ]
        }
      }
    ],
    "id": 78,
    "task_id": 27,
    "exist_function": [
      "remove"
    ]
  },
  {
    "code": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list",
    "entry_point": "remove",
    "input": [
      [
        "28Jan",
        "12Jan",
        "11Jan"
      ]
    ],
    "output": [
      "Jan",
      "Jan",
      "Jan"
    ],
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list": [
            "28Jan",
            "12Jan",
            "11Jan"
          ]
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "pattern": "[0-9]"
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "list[0]": "Jan",
          "list[1]": "Jan",
          "list[2]": "Jan"
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": [
            "Jan",
            "Jan",
            "Jan"
          ]
        }
      }
    ],
    "id": 79,
    "task_id": 27,
    "exist_function": [
      "remove"
    ]
  },
  {
    "code": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list",
    "entry_point": "remove",
    "input": [
      [
        "wonder1",
        "wonder2",
        "wonder3"
      ]
    ],
    "output": [
      "wonder",
      "wonder",
      "wonder"
    ],
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list": [
            "wonder1",
            "wonder2",
            "wonder3"
          ]
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "pattern": "[0-9]"
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "list[0]": "wonder",
          "list[1]": "wonder",
          "list[2]": "wonder"
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": [
            "wonder",
            "wonder",
            "wonder"
          ]
        }
      }
    ],
    "id": 80,
    "task_id": 27,
    "exist_function": [
      "remove"
    ]
  },
  {
    "code": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)",
    "entry_point": "binomial_Coeff",
    "input": [
      5,
      2
    ],
    "output": 10,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 2,
          "k": 2
        }
      },
      {
        "line": 5,
        "step": 2,
        "action": "RETURN",
        "vars": {
          "__return__": 1
        }
      },
      {
        "line": 5,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "n": 2
        }
      },
      {
        "line": 6,
        "step": 3,
        "action": "RETURN",
        "vars": {
          "__return__": 3
        }
      },
      {
        "line": 5,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "n": 2
        }
      },
      {
        "line": 6,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": 6
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "n": 2
        }
      },
      {
        "line": 6,
        "step": 5,
        "action": "RETURN",
        "vars": {
          "__return__": 10
        }
      }
    ],
    "id": 81,
    "task_id": 28,
    "exist_function": [
      "binomial_Coeff"
    ]
  },
  {
    "code": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1",
    "entry_point": "get_Odd_Occurrence",
    "input": [
      [
        1,
        2,
        3,
        1,
        2,
        3,
        1
      ],
      7
    ],
    "output": 1,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "arr": [
            1,
            2,
            3,
            1,
            2,
            3,
            1
          ],
          "arr_size": 7
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 6,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "count": 1
        }
      },
      {
        "line": 4,
        "step": "6~8",
        "action": "LOOP",
        "vars": {
          "j": "1→3"
        }
      },
      {
        "line": 6,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "count": 2
        }
      },
      {
        "line": 4,
        "step": "10~12",
        "action": "LOOP",
        "vars": {
          "j": "4→6"
        }
      },
      {
        "line": 6,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "count": 3
        }
      },
      {
        "line": 8,
        "step": 14,
        "action": "RETURN",
        "vars": {
          "__return__": 1
        }
      }
    ],
    "id": 84,
    "task_id": 29,
    "exist_function": [
      "get_Odd_Occurrence"
    ]
  },
  {
    "code": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1",
    "entry_point": "get_Odd_Occurrence",
    "input": [
      [
        1,
        2,
        3,
        2,
        3,
        1,
        3
      ],
      7
    ],
    "output": 3,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "arr": [
            1,
            2,
            3,
            2,
            3,
            1,
            3
          ],
          "arr_size": 7
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 6,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "count": 1
        }
      },
      {
        "line": 4,
        "step": "6~10",
        "action": "LOOP",
        "vars": {
          "j": "1→5"
        }
      },
      {
        "line": 6,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "count": 2
        }
      },
      {
        "line": 4,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 2,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 3,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 4,
        "step": "15~16",
        "action": "LOOP",
        "vars": {
          "j": "0→1"
        }
      },
      {
        "line": 6,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "count": 1
        }
      },
      {
        "line": 4,
        "step": "18~19",
        "action": "LOOP",
        "vars": {
          "j": "2→3"
        }
      },
      {
        "line": 6,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "count": 2
        }
      },
      {
        "line": 4,
        "step": "21~23",
        "action": "LOOP",
        "vars": {
          "j": "4→6"
        }
      },
      {
        "line": 2,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 3,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 4,
        "step": "26~28",
        "action": "LOOP",
        "vars": {
          "j": "0→2"
        }
      },
      {
        "line": 6,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "count": 1
        }
      },
      {
        "line": 4,
        "step": "30~31",
        "action": "LOOP",
        "vars": {
          "j": "3→4"
        }
      },
      {
        "line": 6,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "count": 2
        }
      },
      {
        "line": 4,
        "step": "33~34",
        "action": "LOOP",
        "vars": {
          "j": "5→6"
        }
      },
      {
        "line": 6,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "count": 3
        }
      },
      {
        "line": 8,
        "step": 36,
        "action": "RETURN",
        "vars": {
          "__return__": 3
        }
      }
    ],
    "id": 85,
    "task_id": 29,
    "exist_function": [
      "get_Odd_Occurrence"
    ]
  },
  {
    "code": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1",
    "entry_point": "get_Odd_Occurrence",
    "input": [
      [
        2,
        3,
        5,
        4,
        5,
        2,
        4,
        3,
        5,
        2,
        4,
        4,
        2
      ],
      13
    ],
    "output": 5,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "arr": [
            2,
            3,
            5,
            4,
            5,
            2,
            4,
            3,
            5,
            2,
            4,
            4,
            2
          ],
          "arr_size": 13
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 6,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "count": 1
        }
      },
      {
        "line": 4,
        "step": "6~10",
        "action": "LOOP",
        "vars": {
          "j": "1→5"
        }
      },
      {
        "line": 6,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "count": 2
        }
      },
      {
        "line": 4,
        "step": "12~15",
        "action": "LOOP",
        "vars": {
          "j": "6→9"
        }
      },
      {
        "line": 6,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "count": 3
        }
      },
      {
        "line": 4,
        "step": "17~19",
        "action": "LOOP",
        "vars": {
          "j": "10→12"
        }
      },
      {
        "line": 6,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "count": 4
        }
      },
      {
        "line": 2,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 3,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 4,
        "step": "23~24",
        "action": "LOOP",
        "vars": {
          "j": "0→1"
        }
      },
      {
        "line": 6,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "count": 1
        }
      },
      {
        "line": 4,
        "step": "26~31",
        "action": "LOOP",
        "vars": {
          "j": "2→7"
        }
      },
      {
        "line": 6,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "count": 2
        }
      },
      {
        "line": 4,
        "step": "33~37",
        "action": "LOOP",
        "vars": {
          "j": "8→12"
        }
      },
      {
        "line": 2,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 3,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 4,
        "step": "40~42",
        "action": "LOOP",
        "vars": {
          "j": "0→2"
        }
      },
      {
        "line": 6,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "count": 1
        }
      },
      {
        "line": 4,
        "step": "44~45",
        "action": "LOOP",
        "vars": {
          "j": "3→4"
        }
      },
      {
        "line": 6,
        "step": 46,
        "action": "EXECUTE",
        "vars": {
          "count": 2
        }
      },
      {
        "line": 4,
        "step": "47~50",
        "action": "LOOP",
        "vars": {
          "j": "5→8"
        }
      },
      {
        "line": 6,
        "step": 51,
        "action": "EXECUTE",
        "vars": {
          "count": 3
        }
      },
      {
        "line": 4,
        "step": "52~55",
        "action": "LOOP",
        "vars": {
          "j": "9→12"
        }
      },
      {
        "line": 8,
        "step": 56,
        "action": "RETURN",
        "vars": {
          "__return__": 5
        }
      }
    ],
    "id": 86,
    "task_id": 29,
    "exist_function": [
      "get_Odd_Occurrence"
    ]
  },
  {
    "code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result;",
    "entry_point": "count_Substring_With_Equal_Ends",
    "input": [
      "abc"
    ],
    "output": 3,
    "traces": [
      {
        "line": 3,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "s": "abc"
        }
      },
      {
        "line": 4,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "result": 0
        }
      },
      {
        "line": 5,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "n": 3
        }
      },
      {
        "line": 6,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 7,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "result": 1
        }
      },
      {
        "line": 7,
        "step": "7~8",
        "action": "LOOP",
        "vars": {
          "j": "2→3"
        }
      },
      {
        "line": 6,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 7,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "result": 2
        }
      },
      {
        "line": 7,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 6,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 7,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "result": 3
        }
      },
      {
        "line": 10,
        "step": 16,
        "action": "RETURN",
        "vars": {
          "__return__": 3
        }
      }
    ],
    "id": 87,
    "task_id": 30,
    "exist_function": [
      "check_Equality",
      "count_Substring_With_Equal_Ends"
    ]
  },
  {
    "code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result;",
    "entry_point": "count_Substring_With_Equal_Ends",
    "input": [
      "abcda"
    ],
    "output": 6,
    "traces": [
      {
        "line": 3,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "s": "abcda"
        }
      },
      {
        "line": 4,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "result": 0
        }
      },
      {
        "line": 5,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "n": 5
        }
      },
      {
        "line": 6,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 7,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "result": 1
        }
      },
      {
        "line": 7,
        "step": "7~10",
        "action": "LOOP",
        "vars": {
          "j": "2→5"
        }
      },
      {
        "line": 9,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "result": 2
        }
      },
      {
        "line": 6,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 7,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "result": 3
        }
      },
      {
        "line": 7,
        "step": "15~17",
        "action": "LOOP",
        "vars": {
          "j": "2→4"
        }
      },
      {
        "line": 6,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 7,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "result": 4
        }
      },
      {
        "line": 7,
        "step": "21~22",
        "action": "LOOP",
        "vars": {
          "j": "2→3"
        }
      },
      {
        "line": 6,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 7,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "result": 5
        }
      },
      {
        "line": 7,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 6,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 7,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "result": 6
        }
      },
      {
        "line": 10,
        "step": 30,
        "action": "RETURN",
        "vars": {
          "__return__": 6
        }
      }
    ],
    "id": 88,
    "task_id": 30,
    "exist_function": [
      "check_Equality",
      "count_Substring_With_Equal_Ends"
    ]
  },
  {
    "code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result;",
    "entry_point": "count_Substring_With_Equal_Ends",
    "input": [
      "ab"
    ],
    "output": 2,
    "traces": [
      {
        "line": 3,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "s": "ab"
        }
      },
      {
        "line": 4,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "result": 0
        }
      },
      {
        "line": 5,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "n": 2
        }
      },
      {
        "line": 6,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 7,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "result": 1
        }
      },
      {
        "line": 7,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 7,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "result": 2
        }
      },
      {
        "line": 10,
        "step": 11,
        "action": "RETURN",
        "vars": {
          "__return__": 2
        }
      }
    ],
    "id": 89,
    "task_id": 30,
    "exist_function": [
      "check_Equality",
      "count_Substring_With_Equal_Ends"
    ]
  },
  {
    "code": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result",
    "entry_point": "func",
    "input": [
      [
        [
          1,
          2,
          6
        ],
        [
          1,
          3,
          4,
          5,
          7,
          8
        ],
        [
          1,
          3,
          5,
          6,
          8,
          9
        ],
        [
          2,
          5,
          7,
          11
        ],
        [
          1,
          4,
          7,
          8,
          12
        ]
      ],
      3
    ],
    "output": [
      5,
      7,
      1
    ],
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "nums": [
            [
              1,
              2,
              6
            ],
            [
              1,
              3,
              4,
              5,
              7,
              8
            ],
            [
              1,
              3,
              5,
              6,
              8,
              9
            ],
            [
              2,
              5,
              7,
              11
            ],
            [
              1,
              4,
              7,
              8,
              12
            ]
          ],
          "k": 3
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "d": {}
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "row": [
            1,
            2,
            6
          ]
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 6,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 1
          }
        }
      },
      {
        "line": 5,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 6,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 1,
            "2": 1
          }
        }
      },
      {
        "line": 5,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 6,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 1,
            "2": 1,
            "6": 1
          }
        }
      },
      {
        "line": 4,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "row[1]": 3,
          "row[4]": 7,
          "row[2]": 4,
          "row[5]": 8,
          "row[3]": 5
        }
      },
      {
        "line": 5,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 6,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 2,
            "2": 1,
            "6": 1
          }
        }
      },
      {
        "line": 5,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 6,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 2,
            "2": 1,
            "6": 1,
            "3": 1
          }
        }
      },
      {
        "line": 5,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 6,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 2,
            "2": 1,
            "6": 1,
            "3": 1,
            "4": 1
          }
        }
      },
      {
        "line": 5,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 6,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 2,
            "2": 1,
            "6": 1,
            "3": 1,
            "4": 1,
            "5": 1
          }
        }
      },
      {
        "line": 5,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "i": 7
        }
      },
      {
        "line": 6,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 2,
            "2": 1,
            "6": 1,
            "3": 1,
            "4": 1,
            "5": 1,
            "7": 1
          }
        }
      },
      {
        "line": 5,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "i": 8
        }
      },
      {
        "line": 6,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 2,
            "2": 1,
            "6": 1,
            "3": 1,
            "4": 1,
            "5": 1,
            "7": 1,
            "8": 1
          }
        }
      },
      {
        "line": 4,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "row[4]": 8,
          "row[2]": 5,
          "row[5]": 9,
          "row[3]": 6
        }
      },
      {
        "line": 5,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 6,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 1,
            "6": 1,
            "3": 1,
            "4": 1,
            "5": 1,
            "7": 1,
            "8": 1
          }
        }
      },
      {
        "line": 5,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 6,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 1,
            "6": 1,
            "3": 2,
            "4": 1,
            "5": 1,
            "7": 1,
            "8": 1
          }
        }
      },
      {
        "line": 5,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 6,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 1,
            "6": 1,
            "3": 2,
            "4": 1,
            "5": 2,
            "7": 1,
            "8": 1
          }
        }
      },
      {
        "line": 5,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 6,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 1,
            "6": 2,
            "3": 2,
            "4": 1,
            "5": 2,
            "7": 1,
            "8": 1
          }
        }
      },
      {
        "line": 5,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "i": 8
        }
      },
      {
        "line": 6,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 1,
            "6": 2,
            "3": 2,
            "4": 1,
            "5": 2,
            "7": 1,
            "8": 2
          }
        }
      },
      {
        "line": 5,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "i": 9
        }
      },
      {
        "line": 6,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 1,
            "6": 2,
            "3": 2,
            "4": 1,
            "5": 2,
            "7": 1,
            "8": 2,
            "9": 1
          }
        }
      },
      {
        "line": 4,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "row[1]": 5,
          "row[2]": 7,
          "row[3]": 11,
          "row[0]": 2
        }
      },
      {
        "line": 5,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 6,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 1,
            "5": 2,
            "7": 1,
            "8": 2,
            "9": 1
          }
        }
      },
      {
        "line": 5,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 6,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 1,
            "5": 3,
            "7": 1,
            "8": 2,
            "9": 1
          }
        }
      },
      {
        "line": 5,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "i": 7
        }
      },
      {
        "line": 6,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 1,
            "5": 3,
            "7": 2,
            "8": 2,
            "9": 1
          }
        }
      },
      {
        "line": 5,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "i": 11
        }
      },
      {
        "line": 6,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 1,
            "5": 3,
            "7": 2,
            "8": 2,
            "9": 1,
            "11": 1
          }
        }
      },
      {
        "line": 4,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "row[1]": 4,
          "row[4]": 12,
          "row[3]": 8,
          "row[0]": 1
        }
      },
      {
        "line": 5,
        "step": 46,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 6,
        "step": 47,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 4,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 1,
            "5": 3,
            "7": 2,
            "8": 2,
            "9": 1,
            "11": 1
          }
        }
      },
      {
        "line": 5,
        "step": 48,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 6,
        "step": 49,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 4,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 2,
            "5": 3,
            "7": 2,
            "8": 2,
            "9": 1,
            "11": 1
          }
        }
      },
      {
        "line": 5,
        "step": 50,
        "action": "EXECUTE",
        "vars": {
          "i": 7
        }
      },
      {
        "line": 6,
        "step": 51,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 4,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 2,
            "5": 3,
            "7": 3,
            "8": 2,
            "9": 1,
            "11": 1
          }
        }
      },
      {
        "line": 5,
        "step": 52,
        "action": "EXECUTE",
        "vars": {
          "i": 8
        }
      },
      {
        "line": 6,
        "step": 53,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 4,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 2,
            "5": 3,
            "7": 3,
            "8": 3,
            "9": 1,
            "11": 1
          }
        }
      },
      {
        "line": 5,
        "step": 54,
        "action": "EXECUTE",
        "vars": {
          "i": 12
        }
      },
      {
        "line": 6,
        "step": 55,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 4,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 2,
            "5": 3,
            "7": 3,
            "8": 3,
            "9": 1,
            "11": 1,
            "12": 1
          }
        }
      },
      {
        "line": 7,
        "step": 56,
        "action": "EXECUTE",
        "vars": {
          "temp": []
        }
      },
      {
        "line": 9,
        "step": 57,
        "action": "EXECUTE",
        "vars": {
          "key": 1,
          "v": 4
        }
      },
      {
        "line": 11,
        "step": 58,
        "action": "EXECUTE",
        "vars": {
          "temp[0]": "(4, 1)"
        }
      },
      {
        "line": 9,
        "step": 59,
        "action": "EXECUTE",
        "vars": {
          "key": 2,
          "v": 2
        }
      },
      {
        "line": 11,
        "step": 60,
        "action": "EXECUTE",
        "vars": {
          "temp[1]": "(2, 2)"
        }
      },
      {
        "line": 9,
        "step": 61,
        "action": "EXECUTE",
        "vars": {
          "key": 6
        }
      },
      {
        "line": 11,
        "step": 62,
        "action": "EXECUTE",
        "vars": {
          "temp[2]": "(2, 6)"
        }
      },
      {
        "line": 13,
        "step": 63,
        "action": "EXECUTE",
        "vars": {
          "temp[0][1]": 2,
          "temp[0][0]": 2,
          "temp[1][1]": 1,
          "temp[1][0]": 4
        }
      },
      {
        "line": 9,
        "step": "64~65",
        "action": "LOOP",
        "vars": {
          "key": "3→4"
        }
      },
      {
        "line": 9,
        "step": 66,
        "action": "EXECUTE",
        "vars": {
          "key": 5,
          "v": 3
        }
      },
      {
        "line": 16,
        "step": 67,
        "action": "EXECUTE",
        "vars": {
          "temp[0][1]": 6
        }
      },
      {
        "line": 17,
        "step": 68,
        "action": "EXECUTE",
        "vars": {
          "temp[2]": "(3, 5)"
        }
      },
      {
        "line": 9,
        "step": 69,
        "action": "EXECUTE",
        "vars": {
          "key": 7
        }
      },
      {
        "line": 16,
        "step": 70,
        "action": "EXECUTE",
        "vars": {
          "temp[0][0]": 3,
          "temp[0][1]": 5
        }
      },
      {
        "line": 17,
        "step": 71,
        "action": "EXECUTE",
        "vars": {
          "temp[2]": "(3, 7)"
        }
      },
      {
        "line": 9,
        "step": 72,
        "action": "EXECUTE",
        "vars": {
          "key": 8
        }
      },
      {
        "line": 9,
        "step": 73,
        "action": "EXECUTE",
        "vars": {
          "key": 9,
          "v": 1
        }
      },
      {
        "line": 9,
        "step": "74~75",
        "action": "LOOP",
        "vars": {
          "key": "11→12"
        }
      },
      {
        "line": 18,
        "step": 76,
        "action": "EXECUTE",
        "vars": {
          "result": []
        }
      },
      {
        "line": 20,
        "step": 77,
        "action": "EXECUTE",
        "vars": {
          "temp[0][1]": 7,
          "key": 5,
          "v": 3
        }
      },
      {
        "line": 21,
        "step": 78,
        "action": "EXECUTE",
        "vars": {
          "result[0]": 5
        }
      },
      {
        "line": 20,
        "step": 79,
        "action": "EXECUTE",
        "vars": {
          "temp[0][1]": 1,
          "temp[0][0]": 4,
          "key": 7
        }
      },
      {
        "line": 21,
        "step": 80,
        "action": "EXECUTE",
        "vars": {
          "result[1]": 7
        }
      },
      {
        "line": 20,
        "step": 81,
        "action": "EXECUTE",
        "vars": {
          "temp": [],
          "key": 1,
          "v": 4
        }
      },
      {
        "line": 21,
        "step": 82,
        "action": "EXECUTE",
        "vars": {
          "result[2]": 1
        }
      },
      {
        "line": 22,
        "step": 83,
        "action": "RETURN",
        "vars": {
          "__return__": [
            5,
            7,
            1
          ]
        }
      }
    ],
    "id": 90,
    "task_id": 31,
    "exist_function": [
      "func"
    ]
  },
  {
    "code": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result",
    "entry_point": "func",
    "input": [
      [
        [
          1,
          2,
          6
        ],
        [
          1,
          3,
          4,
          5,
          7,
          8
        ],
        [
          1,
          3,
          5,
          6,
          8,
          9
        ],
        [
          2,
          5,
          7,
          11
        ],
        [
          1,
          4,
          7,
          8,
          12
        ]
      ],
      1
    ],
    "output": [
      1
    ],
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "nums": [
            [
              1,
              2,
              6
            ],
            [
              1,
              3,
              4,
              5,
              7,
              8
            ],
            [
              1,
              3,
              5,
              6,
              8,
              9
            ],
            [
              2,
              5,
              7,
              11
            ],
            [
              1,
              4,
              7,
              8,
              12
            ]
          ],
          "k": 1
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "d": {}
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "row": [
            1,
            2,
            6
          ]
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 6,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 1
          }
        }
      },
      {
        "line": 5,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 6,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 1,
            "2": 1
          }
        }
      },
      {
        "line": 5,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 6,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 1,
            "2": 1,
            "6": 1
          }
        }
      },
      {
        "line": 4,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "row[1]": 3,
          "row[4]": 7,
          "row[2]": 4,
          "row[5]": 8,
          "row[3]": 5
        }
      },
      {
        "line": 5,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 6,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 2,
            "2": 1,
            "6": 1
          }
        }
      },
      {
        "line": 5,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 6,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 2,
            "2": 1,
            "6": 1,
            "3": 1
          }
        }
      },
      {
        "line": 5,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 6,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 2,
            "2": 1,
            "6": 1,
            "3": 1,
            "4": 1
          }
        }
      },
      {
        "line": 5,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 6,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 2,
            "2": 1,
            "6": 1,
            "3": 1,
            "4": 1,
            "5": 1
          }
        }
      },
      {
        "line": 5,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "i": 7
        }
      },
      {
        "line": 6,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 2,
            "2": 1,
            "6": 1,
            "3": 1,
            "4": 1,
            "5": 1,
            "7": 1
          }
        }
      },
      {
        "line": 5,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "i": 8
        }
      },
      {
        "line": 6,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 2,
            "2": 1,
            "6": 1,
            "3": 1,
            "4": 1,
            "5": 1,
            "7": 1,
            "8": 1
          }
        }
      },
      {
        "line": 4,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "row[4]": 8,
          "row[2]": 5,
          "row[5]": 9,
          "row[3]": 6
        }
      },
      {
        "line": 5,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 6,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 1,
            "6": 1,
            "3": 1,
            "4": 1,
            "5": 1,
            "7": 1,
            "8": 1
          }
        }
      },
      {
        "line": 5,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 6,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 1,
            "6": 1,
            "3": 2,
            "4": 1,
            "5": 1,
            "7": 1,
            "8": 1
          }
        }
      },
      {
        "line": 5,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 6,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 1,
            "6": 1,
            "3": 2,
            "4": 1,
            "5": 2,
            "7": 1,
            "8": 1
          }
        }
      },
      {
        "line": 5,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 6,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 1,
            "6": 2,
            "3": 2,
            "4": 1,
            "5": 2,
            "7": 1,
            "8": 1
          }
        }
      },
      {
        "line": 5,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "i": 8
        }
      },
      {
        "line": 6,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 1,
            "6": 2,
            "3": 2,
            "4": 1,
            "5": 2,
            "7": 1,
            "8": 2
          }
        }
      },
      {
        "line": 5,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "i": 9
        }
      },
      {
        "line": 6,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 1,
            "6": 2,
            "3": 2,
            "4": 1,
            "5": 2,
            "7": 1,
            "8": 2,
            "9": 1
          }
        }
      },
      {
        "line": 4,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "row[1]": 5,
          "row[2]": 7,
          "row[3]": 11,
          "row[0]": 2
        }
      },
      {
        "line": 5,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 6,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 1,
            "5": 2,
            "7": 1,
            "8": 2,
            "9": 1
          }
        }
      },
      {
        "line": 5,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 6,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 1,
            "5": 3,
            "7": 1,
            "8": 2,
            "9": 1
          }
        }
      },
      {
        "line": 5,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "i": 7
        }
      },
      {
        "line": 6,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 1,
            "5": 3,
            "7": 2,
            "8": 2,
            "9": 1
          }
        }
      },
      {
        "line": 5,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "i": 11
        }
      },
      {
        "line": 6,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 1,
            "5": 3,
            "7": 2,
            "8": 2,
            "9": 1,
            "11": 1
          }
        }
      },
      {
        "line": 4,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "row[1]": 4,
          "row[4]": 12,
          "row[3]": 8,
          "row[0]": 1
        }
      },
      {
        "line": 5,
        "step": 46,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 6,
        "step": 47,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 4,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 1,
            "5": 3,
            "7": 2,
            "8": 2,
            "9": 1,
            "11": 1
          }
        }
      },
      {
        "line": 5,
        "step": 48,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 6,
        "step": 49,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 4,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 2,
            "5": 3,
            "7": 2,
            "8": 2,
            "9": 1,
            "11": 1
          }
        }
      },
      {
        "line": 5,
        "step": 50,
        "action": "EXECUTE",
        "vars": {
          "i": 7
        }
      },
      {
        "line": 6,
        "step": 51,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 4,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 2,
            "5": 3,
            "7": 3,
            "8": 2,
            "9": 1,
            "11": 1
          }
        }
      },
      {
        "line": 5,
        "step": 52,
        "action": "EXECUTE",
        "vars": {
          "i": 8
        }
      },
      {
        "line": 6,
        "step": 53,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 4,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 2,
            "5": 3,
            "7": 3,
            "8": 3,
            "9": 1,
            "11": 1
          }
        }
      },
      {
        "line": 5,
        "step": 54,
        "action": "EXECUTE",
        "vars": {
          "i": 12
        }
      },
      {
        "line": 6,
        "step": 55,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 4,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 2,
            "5": 3,
            "7": 3,
            "8": 3,
            "9": 1,
            "11": 1,
            "12": 1
          }
        }
      },
      {
        "line": 7,
        "step": 56,
        "action": "EXECUTE",
        "vars": {
          "temp": []
        }
      },
      {
        "line": 9,
        "step": 57,
        "action": "EXECUTE",
        "vars": {
          "key": 1,
          "v": 4
        }
      },
      {
        "line": 11,
        "step": 58,
        "action": "EXECUTE",
        "vars": {
          "temp[0]": "(4, 1)"
        }
      },
      {
        "line": 9,
        "step": 59,
        "action": "EXECUTE",
        "vars": {
          "key": 2,
          "v": 2
        }
      },
      {
        "line": 9,
        "step": 60,
        "action": "EXECUTE",
        "vars": {
          "key": 6
        }
      },
      {
        "line": 9,
        "step": "61~62",
        "action": "LOOP",
        "vars": {
          "key": "3→4"
        }
      },
      {
        "line": 9,
        "step": 63,
        "action": "EXECUTE",
        "vars": {
          "key": 5,
          "v": 3
        }
      },
      {
        "line": 9,
        "step": "64~65",
        "action": "LOOP",
        "vars": {
          "key": "7→8"
        }
      },
      {
        "line": 9,
        "step": 66,
        "action": "EXECUTE",
        "vars": {
          "key": 9,
          "v": 1
        }
      },
      {
        "line": 9,
        "step": "67~68",
        "action": "LOOP",
        "vars": {
          "key": "11→12"
        }
      },
      {
        "line": 18,
        "step": 69,
        "action": "EXECUTE",
        "vars": {
          "result": []
        }
      },
      {
        "line": 20,
        "step": 70,
        "action": "EXECUTE",
        "vars": {
          "temp": [],
          "key": 1,
          "v": 4
        }
      },
      {
        "line": 21,
        "step": 71,
        "action": "EXECUTE",
        "vars": {
          "result[0]": 1
        }
      },
      {
        "line": 22,
        "step": 72,
        "action": "RETURN",
        "vars": {
          "__return__": [
            1
          ]
        }
      }
    ],
    "id": 91,
    "task_id": 31,
    "exist_function": [
      "func"
    ]
  },
  {
    "code": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result",
    "entry_point": "func",
    "input": [
      [
        [
          1,
          2,
          6
        ],
        [
          1,
          3,
          4,
          5,
          7,
          8
        ],
        [
          1,
          3,
          5,
          6,
          8,
          9
        ],
        [
          2,
          5,
          7,
          11
        ],
        [
          1,
          4,
          7,
          8,
          12
        ]
      ],
      5
    ],
    "output": [
      6,
      5,
      7,
      8,
      1
    ],
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "nums": [
            [
              1,
              2,
              6
            ],
            [
              1,
              3,
              4,
              5,
              7,
              8
            ],
            [
              1,
              3,
              5,
              6,
              8,
              9
            ],
            [
              2,
              5,
              7,
              11
            ],
            [
              1,
              4,
              7,
              8,
              12
            ]
          ],
          "k": 5
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "d": {}
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "row": [
            1,
            2,
            6
          ]
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 6,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 1
          }
        }
      },
      {
        "line": 5,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 6,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 1,
            "2": 1
          }
        }
      },
      {
        "line": 5,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 6,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 1,
            "2": 1,
            "6": 1
          }
        }
      },
      {
        "line": 4,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "row[1]": 3,
          "row[4]": 7,
          "row[2]": 4,
          "row[5]": 8,
          "row[3]": 5
        }
      },
      {
        "line": 5,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 6,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 2,
            "2": 1,
            "6": 1
          }
        }
      },
      {
        "line": 5,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 6,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 2,
            "2": 1,
            "6": 1,
            "3": 1
          }
        }
      },
      {
        "line": 5,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 6,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 2,
            "2": 1,
            "6": 1,
            "3": 1,
            "4": 1
          }
        }
      },
      {
        "line": 5,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 6,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 2,
            "2": 1,
            "6": 1,
            "3": 1,
            "4": 1,
            "5": 1
          }
        }
      },
      {
        "line": 5,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "i": 7
        }
      },
      {
        "line": 6,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 2,
            "2": 1,
            "6": 1,
            "3": 1,
            "4": 1,
            "5": 1,
            "7": 1
          }
        }
      },
      {
        "line": 5,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "i": 8
        }
      },
      {
        "line": 6,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 2,
            "2": 1,
            "6": 1,
            "3": 1,
            "4": 1,
            "5": 1,
            "7": 1,
            "8": 1
          }
        }
      },
      {
        "line": 4,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "row[4]": 8,
          "row[2]": 5,
          "row[5]": 9,
          "row[3]": 6
        }
      },
      {
        "line": 5,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 6,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 1,
            "6": 1,
            "3": 1,
            "4": 1,
            "5": 1,
            "7": 1,
            "8": 1
          }
        }
      },
      {
        "line": 5,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 6,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 1,
            "6": 1,
            "3": 2,
            "4": 1,
            "5": 1,
            "7": 1,
            "8": 1
          }
        }
      },
      {
        "line": 5,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 6,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 1,
            "6": 1,
            "3": 2,
            "4": 1,
            "5": 2,
            "7": 1,
            "8": 1
          }
        }
      },
      {
        "line": 5,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 6,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 1,
            "6": 2,
            "3": 2,
            "4": 1,
            "5": 2,
            "7": 1,
            "8": 1
          }
        }
      },
      {
        "line": 5,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "i": 8
        }
      },
      {
        "line": 6,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 1,
            "6": 2,
            "3": 2,
            "4": 1,
            "5": 2,
            "7": 1,
            "8": 2
          }
        }
      },
      {
        "line": 5,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "i": 9
        }
      },
      {
        "line": 6,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 1,
            "6": 2,
            "3": 2,
            "4": 1,
            "5": 2,
            "7": 1,
            "8": 2,
            "9": 1
          }
        }
      },
      {
        "line": 4,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "row[1]": 5,
          "row[2]": 7,
          "row[3]": 11,
          "row[0]": 2
        }
      },
      {
        "line": 5,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 6,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 1,
            "5": 2,
            "7": 1,
            "8": 2,
            "9": 1
          }
        }
      },
      {
        "line": 5,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 6,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 1,
            "5": 3,
            "7": 1,
            "8": 2,
            "9": 1
          }
        }
      },
      {
        "line": 5,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "i": 7
        }
      },
      {
        "line": 6,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 1,
            "5": 3,
            "7": 2,
            "8": 2,
            "9": 1
          }
        }
      },
      {
        "line": 5,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "i": 11
        }
      },
      {
        "line": 6,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 3,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 1,
            "5": 3,
            "7": 2,
            "8": 2,
            "9": 1,
            "11": 1
          }
        }
      },
      {
        "line": 4,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "row[1]": 4,
          "row[4]": 12,
          "row[3]": 8,
          "row[0]": 1
        }
      },
      {
        "line": 5,
        "step": 46,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 6,
        "step": 47,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 4,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 1,
            "5": 3,
            "7": 2,
            "8": 2,
            "9": 1,
            "11": 1
          }
        }
      },
      {
        "line": 5,
        "step": 48,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 6,
        "step": 49,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 4,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 2,
            "5": 3,
            "7": 2,
            "8": 2,
            "9": 1,
            "11": 1
          }
        }
      },
      {
        "line": 5,
        "step": 50,
        "action": "EXECUTE",
        "vars": {
          "i": 7
        }
      },
      {
        "line": 6,
        "step": 51,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 4,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 2,
            "5": 3,
            "7": 3,
            "8": 2,
            "9": 1,
            "11": 1
          }
        }
      },
      {
        "line": 5,
        "step": 52,
        "action": "EXECUTE",
        "vars": {
          "i": 8
        }
      },
      {
        "line": 6,
        "step": 53,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 4,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 2,
            "5": 3,
            "7": 3,
            "8": 3,
            "9": 1,
            "11": 1
          }
        }
      },
      {
        "line": 5,
        "step": 54,
        "action": "EXECUTE",
        "vars": {
          "i": 12
        }
      },
      {
        "line": 6,
        "step": 55,
        "action": "EXECUTE",
        "vars": {
          "d": {
            "1": 4,
            "2": 2,
            "6": 2,
            "3": 2,
            "4": 2,
            "5": 3,
            "7": 3,
            "8": 3,
            "9": 1,
            "11": 1,
            "12": 1
          }
        }
      },
      {
        "line": 7,
        "step": 56,
        "action": "EXECUTE",
        "vars": {
          "temp": []
        }
      },
      {
        "line": 9,
        "step": 57,
        "action": "EXECUTE",
        "vars": {
          "key": 1,
          "v": 4
        }
      },
      {
        "line": 11,
        "step": 58,
        "action": "EXECUTE",
        "vars": {
          "temp[0]": "(4, 1)"
        }
      },
      {
        "line": 9,
        "step": 59,
        "action": "EXECUTE",
        "vars": {
          "key": 2,
          "v": 2
        }
      },
      {
        "line": 11,
        "step": 60,
        "action": "EXECUTE",
        "vars": {
          "temp[1]": "(2, 2)"
        }
      },
      {
        "line": 9,
        "step": 61,
        "action": "EXECUTE",
        "vars": {
          "key": 6
        }
      },
      {
        "line": 11,
        "step": 62,
        "action": "EXECUTE",
        "vars": {
          "temp[2]": "(2, 6)"
        }
      },
      {
        "line": 9,
        "step": 63,
        "action": "EXECUTE",
        "vars": {
          "key": 3
        }
      },
      {
        "line": 11,
        "step": 64,
        "action": "EXECUTE",
        "vars": {
          "temp[3]": "(2, 3)"
        }
      },
      {
        "line": 9,
        "step": 65,
        "action": "EXECUTE",
        "vars": {
          "key": 4
        }
      },
      {
        "line": 11,
        "step": 66,
        "action": "EXECUTE",
        "vars": {
          "temp[4]": "(2, 4)"
        }
      },
      {
        "line": 13,
        "step": 67,
        "action": "EXECUTE",
        "vars": {
          "temp[3][1]": 1,
          "temp[3][0]": 4,
          "temp[0][1]": 2,
          "temp[0][0]": 2,
          "temp[1][1]": 3
        }
      },
      {
        "line": 9,
        "step": 68,
        "action": "EXECUTE",
        "vars": {
          "key": 5,
          "v": 3
        }
      },
      {
        "line": 16,
        "step": 69,
        "action": "EXECUTE",
        "vars": {
          "temp[1][1]": 4,
          "temp[0][1]": 3
        }
      },
      {
        "line": 17,
        "step": 70,
        "action": "EXECUTE",
        "vars": {
          "temp[4]": "(3, 5)"
        }
      },
      {
        "line": 9,
        "step": 71,
        "action": "EXECUTE",
        "vars": {
          "key": 7
        }
      },
      {
        "line": 16,
        "step": 72,
        "action": "EXECUTE",
        "vars": {
          "temp[0][1]": 4,
          "temp[1][1]": 5,
          "temp[1][0]": 3
        }
      },
      {
        "line": 17,
        "step": 73,
        "action": "EXECUTE",
        "vars": {
          "temp[4]": "(3, 7)"
        }
      },
      {
        "line": 9,
        "step": 74,
        "action": "EXECUTE",
        "vars": {
          "key": 8
        }
      },
      {
        "line": 16,
        "step": 75,
        "action": "EXECUTE",
        "vars": {
          "temp[2][1]": 7,
          "temp[0][1]": 6,
          "temp[2][0]": 3
        }
      },
      {
        "line": 17,
        "step": 76,
        "action": "EXECUTE",
        "vars": {
          "temp[4]": "(3, 8)"
        }
      },
      {
        "line": 9,
        "step": 77,
        "action": "EXECUTE",
        "vars": {
          "key": 9,
          "v": 1
        }
      },
      {
        "line": 9,
        "step": "78~79",
        "action": "LOOP",
        "vars": {
          "key": "11→12"
        }
      },
      {
        "line": 18,
        "step": 80,
        "action": "EXECUTE",
        "vars": {
          "result": []
        }
      },
      {
        "line": 20,
        "step": 81,
        "action": "EXECUTE",
        "vars": {
          "temp[0][1]": 5,
          "temp[0][0]": 3,
          "temp[1][1]": 8,
          "key": 6,
          "v": 2
        }
      },
      {
        "line": 21,
        "step": 82,
        "action": "EXECUTE",
        "vars": {
          "result[0]": 6
        }
      },
      {
        "line": 20,
        "step": 83,
        "action": "EXECUTE",
        "vars": {
          "temp[2][0]": 4,
          "temp[2][1]": 1,
          "temp[0][1]": 7,
          "key": 5,
          "v": 3
        }
      },
      {
        "line": 21,
        "step": 84,
        "action": "EXECUTE",
        "vars": {
          "result[1]": 5
        }
      },
      {
        "line": 20,
        "step": 85,
        "action": "EXECUTE",
        "vars": {
          "temp[0][1]": 8,
          "temp[1][1]": 1,
          "temp[1][0]": 4,
          "key": 7
        }
      },
      {
        "line": 21,
        "step": 86,
        "action": "EXECUTE",
        "vars": {
          "result[2]": 7
        }
      },
      {
        "line": 20,
        "step": 87,
        "action": "EXECUTE",
        "vars": {
          "temp[0][1]": 1,
          "temp[0][0]": 4,
          "key": 8
        }
      },
      {
        "line": 21,
        "step": 88,
        "action": "EXECUTE",
        "vars": {
          "result[3]": 8
        }
      },
      {
        "line": 20,
        "step": 89,
        "action": "EXECUTE",
        "vars": {
          "temp": [],
          "key": 1,
          "v": 4
        }
      },
      {
        "line": 21,
        "step": 90,
        "action": "EXECUTE",
        "vars": {
          "result[4]": 1
        }
      },
      {
        "line": 22,
        "step": 91,
        "action": "RETURN",
        "vars": {
          "__return__": [
            6,
            5,
            7,
            8,
            1
          ]
        }
      }
    ],
    "id": 92,
    "task_id": 31,
    "exist_function": [
      "func"
    ]
  },
  {
    "code": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)",
    "entry_point": "max_Prime_Factors",
    "input": [
      15
    ],
    "output": 5,
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 15
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "maxPrime": -1
        }
      },
      {
        "line": 7,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 9,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "maxPrime": 3
        }
      },
      {
        "line": 10,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "n": 5.0
        }
      },
      {
        "line": 12,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "maxPrime": 5.0
        }
      },
      {
        "line": 13,
        "step": 7,
        "action": "RETURN",
        "vars": {
          "__return__": 5
        }
      }
    ],
    "id": 93,
    "task_id": 32,
    "exist_function": [
      "max_Prime_Factors"
    ]
  },
  {
    "code": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)",
    "entry_point": "max_Prime_Factors",
    "input": [
      6
    ],
    "output": 3,
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 6
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "maxPrime": -1
        }
      },
      {
        "line": 5,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "maxPrime": 2
        }
      },
      {
        "line": 6,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "n": 3
        }
      },
      {
        "line": 12,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "maxPrime": 3
        }
      },
      {
        "line": 13,
        "step": 6,
        "action": "RETURN",
        "vars": {
          "__return__": 3
        }
      }
    ],
    "id": 94,
    "task_id": 32,
    "exist_function": [
      "max_Prime_Factors"
    ]
  }
]