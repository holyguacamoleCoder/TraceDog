[
  {
    "code": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max",
    "entry_point": "largest_neg",
    "input": [
      [
        1,
        2,
        3,
        -4,
        -6
      ]
    ],
    "output": -6,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list1": [
            1,
            2,
            3,
            -4,
            -6
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "max": 1
        }
      },
      {
        "line": 3,
        "step": "3~5",
        "action": "LOOP",
        "vars": {
          "x": "1→3"
        }
      },
      {
        "line": 3,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "x": -4
        }
      },
      {
        "line": 5,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "max": -4
        }
      },
      {
        "line": 3,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "x": -6
        }
      },
      {
        "line": 5,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "max": -6
        }
      },
      {
        "line": 6,
        "step": 10,
        "action": "RETURN",
        "vars": {
          "__return__": -6
        }
      }
    ],
    "id": 1317,
    "task_id": 443,
    "exist_function": [
      "largest_neg"
    ]
  },
  {
    "code": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max",
    "entry_point": "largest_neg",
    "input": [
      [
        1,
        2,
        3,
        -8,
        -9
      ]
    ],
    "output": -9,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list1": [
            1,
            2,
            3,
            -8,
            -9
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "max": 1
        }
      },
      {
        "line": 3,
        "step": "3~5",
        "action": "LOOP",
        "vars": {
          "x": "1→3"
        }
      },
      {
        "line": 3,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "x": -8
        }
      },
      {
        "line": 5,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "max": -8
        }
      },
      {
        "line": 3,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "x": -9
        }
      },
      {
        "line": 5,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "max": -9
        }
      },
      {
        "line": 6,
        "step": 10,
        "action": "RETURN",
        "vars": {
          "__return__": -9
        }
      }
    ],
    "id": 1318,
    "task_id": 443,
    "exist_function": [
      "largest_neg"
    ]
  },
  {
    "code": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max",
    "entry_point": "largest_neg",
    "input": [
      [
        1,
        2,
        3,
        4,
        -1
      ]
    ],
    "output": -1,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list1": [
            1,
            2,
            3,
            4,
            -1
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "max": 1
        }
      },
      {
        "line": 3,
        "step": "3~6",
        "action": "LOOP",
        "vars": {
          "x": "1→4"
        }
      },
      {
        "line": 3,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "x": -1
        }
      },
      {
        "line": 5,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "max": -1
        }
      },
      {
        "line": 6,
        "step": 9,
        "action": "RETURN",
        "vars": {
          "__return__": -1
        }
      }
    ],
    "id": 1319,
    "task_id": 443,
    "exist_function": [
      "largest_neg"
    ]
  },
  {
    "code": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res))",
    "entry_point": "trim_tuple",
    "input": [
      [
        "(5, 3, 2, 1, 4)",
        "(3, 4, 9, 2, 1)",
        "(9, 1, 2, 3, 5)",
        "(4, 8, 2, 1, 7)"
      ],
      2
    ],
    "output": "[(2,), (9,), (2,), (2,)]",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "test_list": [
            "(5, 3, 2, 1, 4)",
            "(3, 4, 9, 2, 1)",
            "(9, 1, 2, 3, 5)",
            "(4, 8, 2, 1, 7)"
          ],
          "K": 2
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "res": []
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "ele": "(5, 3, 2, 1, 4)"
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "N": 5
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "res[0]": "(2,)"
        }
      },
      {
        "line": 3,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "ele[3]": 2,
          "ele[1]": 4,
          "ele[4]": 1,
          "ele[2]": 9,
          "ele[0]": 3
        }
      },
      {
        "line": 5,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "res[1]": "(9,)"
        }
      },
      {
        "line": 3,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "ele[3]": 3,
          "ele[1]": 1,
          "ele[4]": 5,
          "ele[2]": 2,
          "ele[0]": 9
        }
      },
      {
        "line": 5,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "res[2]": "(2,)"
        }
      },
      {
        "line": 3,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "ele[3]": 1,
          "ele[1]": 8,
          "ele[4]": 7,
          "ele[0]": 4
        }
      },
      {
        "line": 5,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "res[3]": "(2,)"
        }
      },
      {
        "line": 6,
        "step": 12,
        "action": "RETURN",
        "vars": {
          "__return__": "[(2,), (9,), (2,), (2,)]"
        }
      }
    ],
    "id": 1320,
    "task_id": 444,
    "exist_function": [
      "trim_tuple"
    ]
  },
  {
    "code": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res))",
    "entry_point": "trim_tuple",
    "input": [
      [
        "(5, 3, 2, 1, 4)",
        "(3, 4, 9, 2, 1)",
        "(9, 1, 2, 3, 5)",
        "(4, 8, 2, 1, 7)"
      ],
      1
    ],
    "output": "[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "test_list": [
            "(5, 3, 2, 1, 4)",
            "(3, 4, 9, 2, 1)",
            "(9, 1, 2, 3, 5)",
            "(4, 8, 2, 1, 7)"
          ],
          "K": 1
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "res": []
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "ele": "(5, 3, 2, 1, 4)"
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "N": 5
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "res[0]": "(3, 2, 1)"
        }
      },
      {
        "line": 3,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "ele[3]": 2,
          "ele[1]": 4,
          "ele[4]": 1,
          "ele[2]": 9,
          "ele[0]": 3
        }
      },
      {
        "line": 5,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "res[1]": "(4, 9, 2)"
        }
      },
      {
        "line": 3,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "ele[3]": 3,
          "ele[1]": 1,
          "ele[4]": 5,
          "ele[2]": 2,
          "ele[0]": 9
        }
      },
      {
        "line": 5,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "res[2]": "(1, 2, 3)"
        }
      },
      {
        "line": 3,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "ele[3]": 1,
          "ele[1]": 8,
          "ele[4]": 7,
          "ele[0]": 4
        }
      },
      {
        "line": 5,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "res[3]": "(8, 2, 1)"
        }
      },
      {
        "line": 6,
        "step": 12,
        "action": "RETURN",
        "vars": {
          "__return__": "[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]"
        }
      }
    ],
    "id": 1321,
    "task_id": 444,
    "exist_function": [
      "trim_tuple"
    ]
  },
  {
    "code": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res))",
    "entry_point": "trim_tuple",
    "input": [
      [
        "(7, 8, 4, 9)",
        "(11, 8, 12, 4)",
        "(4, 1, 7, 8)",
        "(3, 6, 9, 7)"
      ],
      1
    ],
    "output": "[(8, 4), (8, 12), (1, 7), (6, 9)]",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "test_list": [
            "(7, 8, 4, 9)",
            "(11, 8, 12, 4)",
            "(4, 1, 7, 8)",
            "(3, 6, 9, 7)"
          ],
          "K": 1
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "res": []
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "ele": "(7, 8, 4, 9)"
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "N": 4
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "res[0]": "(8, 4)"
        }
      },
      {
        "line": 3,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "ele[3]": 4,
          "ele[0]": 11,
          "ele[2]": 12
        }
      },
      {
        "line": 5,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "res[1]": "(8, 12)"
        }
      },
      {
        "line": 3,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "ele[3]": 8,
          "ele[1]": 1,
          "ele[2]": 7,
          "ele[0]": 4
        }
      },
      {
        "line": 5,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "res[2]": "(1, 7)"
        }
      },
      {
        "line": 3,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "ele[3]": 7,
          "ele[1]": 6,
          "ele[2]": 9,
          "ele[0]": 3
        }
      },
      {
        "line": 5,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "res[3]": "(6, 9)"
        }
      },
      {
        "line": 6,
        "step": 12,
        "action": "RETURN",
        "vars": {
          "__return__": "[(8, 4), (8, 12), (1, 7), (6, 9)]"
        }
      }
    ],
    "id": 1322,
    "task_id": 444,
    "exist_function": [
      "trim_tuple"
    ]
  },
  {
    "code": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count",
    "entry_point": "count_Occurrence",
    "input": [
      "('a', 'a', 'c', 'b', 'd')",
      [
        "a",
        "b"
      ]
    ],
    "output": 3,
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "tup": "('a', 'a', 'c', 'b', 'd')",
          "lst": [
            "a",
            "b"
          ]
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "item": "a"
        }
      },
      {
        "line": 6,
        "step": "4~5",
        "action": "LOOP",
        "vars": {
          "count": "1→2"
        }
      },
      {
        "line": 4,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "item": "c"
        }
      },
      {
        "line": 4,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "item": "b"
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "count": 3
        }
      },
      {
        "line": 4,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "item": "d"
        }
      },
      {
        "line": 7,
        "step": 10,
        "action": "RETURN",
        "vars": {
          "__return__": 3
        }
      }
    ],
    "id": 1326,
    "task_id": 446,
    "exist_function": [
      "count_Occurrence"
    ]
  },
  {
    "code": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count",
    "entry_point": "count_Occurrence",
    "input": [
      "(1, 2, 3, 1, 4, 6, 7, 1, 4)",
      [
        1,
        4,
        7
      ]
    ],
    "output": 6,
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "tup": "(1, 2, 3, 1, 4, 6, 7, 1, 4)",
          "lst": [
            1,
            4,
            7
          ]
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "item": 1
        }
      },
      {
        "line": 6,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "count": 1
        }
      },
      {
        "line": 4,
        "step": "5~6",
        "action": "LOOP",
        "vars": {
          "item": "2→3"
        }
      },
      {
        "line": 4,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "item": 1
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "count": 2
        }
      },
      {
        "line": 4,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "item": 4
        }
      },
      {
        "line": 6,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "count": 3
        }
      },
      {
        "line": 4,
        "step": "11~12",
        "action": "LOOP",
        "vars": {
          "item": "6→7"
        }
      },
      {
        "line": 6,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "count": 4
        }
      },
      {
        "line": 4,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "item": 1
        }
      },
      {
        "line": 6,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "count": 5
        }
      },
      {
        "line": 4,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "item": 4
        }
      },
      {
        "line": 6,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "count": 6
        }
      },
      {
        "line": 7,
        "step": 18,
        "action": "RETURN",
        "vars": {
          "__return__": 6
        }
      }
    ],
    "id": 1327,
    "task_id": 446,
    "exist_function": [
      "count_Occurrence"
    ]
  },
  {
    "code": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count",
    "entry_point": "count_Occurrence",
    "input": [
      "(1, 2, 3, 4, 5, 6)",
      [
        1,
        2
      ]
    ],
    "output": 2,
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "tup": "(1, 2, 3, 4, 5, 6)",
          "lst": [
            1,
            2
          ]
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "item": 1
        }
      },
      {
        "line": 6,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "count": 1
        }
      },
      {
        "line": 4,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "item": 2
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "count": 2
        }
      },
      {
        "line": 4,
        "step": "7~10",
        "action": "LOOP",
        "vars": {
          "item": "3→6"
        }
      },
      {
        "line": 7,
        "step": 11,
        "action": "RETURN",
        "vars": {
          "__return__": 2
        }
      }
    ],
    "id": 1328,
    "task_id": 446,
    "exist_function": [
      "count_Occurrence"
    ]
  },
  {
    "code": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum",
    "entry_point": "cal_sum",
    "input": [
      9
    ],
    "output": 49,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 9
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "a": 3
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "b": 0
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "c": 2
        }
      },
      {
        "line": 11,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "sum": 5
        }
      },
      {
        "line": 13,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "d": 3
        }
      },
      {
        "line": 14,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "sum": 8
        }
      },
      {
        "line": 15,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "a": 0
        }
      },
      {
        "line": 16,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "b": 2
        }
      },
      {
        "line": 17,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "c": 3
        }
      },
      {
        "line": 18,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "n": 8
        }
      },
      {
        "line": 13,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "d": 2
        }
      },
      {
        "line": 14,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "sum": 10
        }
      },
      {
        "line": 15,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "a": 2
        }
      },
      {
        "line": 16,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "b": 3
        }
      },
      {
        "line": 17,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "c": 2
        }
      },
      {
        "line": 18,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "n": 7
        }
      },
      {
        "line": 13,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "d": 5
        }
      },
      {
        "line": 14,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "sum": 15
        }
      },
      {
        "line": 15,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "a": 3
        }
      },
      {
        "line": 16,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "b": 2
        }
      },
      {
        "line": 17,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "c": 5
        }
      },
      {
        "line": 18,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "n": 6
        }
      },
      {
        "line": 14,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "sum": 20
        }
      },
      {
        "line": 15,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "a": 2
        }
      },
      {
        "line": 16,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "b": 5
        }
      },
      {
        "line": 18,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "n": 5
        }
      },
      {
        "line": 13,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "d": 7
        }
      },
      {
        "line": 14,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "sum": 27
        }
      },
      {
        "line": 15,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "a": 5
        }
      },
      {
        "line": 17,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "c": 7
        }
      },
      {
        "line": 18,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "n": 4
        }
      },
      {
        "line": 13,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "d": 10
        }
      },
      {
        "line": 14,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "sum": 37
        }
      },
      {
        "line": 16,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "b": 7
        }
      },
      {
        "line": 17,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "c": 10
        }
      },
      {
        "line": 18,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "n": 3
        }
      },
      {
        "line": 13,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "d": 12
        }
      },
      {
        "line": 14,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "sum": 49
        }
      },
      {
        "line": 15,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "a": 7
        }
      },
      {
        "line": 16,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "b": 10
        }
      },
      {
        "line": 17,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "c": 12
        }
      },
      {
        "line": 18,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "n": 2
        }
      },
      {
        "line": 19,
        "step": 44,
        "action": "RETURN",
        "vars": {
          "__return__": 49
        }
      }
    ],
    "id": 1332,
    "task_id": 448,
    "exist_function": [
      "cal_sum"
    ]
  },
  {
    "code": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum",
    "entry_point": "cal_sum",
    "input": [
      10
    ],
    "output": 66,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 10
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "a": 3
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "b": 0
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "c": 2
        }
      },
      {
        "line": 11,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "sum": 5
        }
      },
      {
        "line": 13,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "d": 3
        }
      },
      {
        "line": 14,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "sum": 8
        }
      },
      {
        "line": 15,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "a": 0
        }
      },
      {
        "line": 16,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "b": 2
        }
      },
      {
        "line": 17,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "c": 3
        }
      },
      {
        "line": 18,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "n": 9
        }
      },
      {
        "line": 13,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "d": 2
        }
      },
      {
        "line": 14,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "sum": 10
        }
      },
      {
        "line": 15,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "a": 2
        }
      },
      {
        "line": 16,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "b": 3
        }
      },
      {
        "line": 17,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "c": 2
        }
      },
      {
        "line": 18,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "n": 8
        }
      },
      {
        "line": 13,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "d": 5
        }
      },
      {
        "line": 14,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "sum": 15
        }
      },
      {
        "line": 15,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "a": 3
        }
      },
      {
        "line": 16,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "b": 2
        }
      },
      {
        "line": 17,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "c": 5
        }
      },
      {
        "line": 18,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "n": 7
        }
      },
      {
        "line": 14,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "sum": 20
        }
      },
      {
        "line": 15,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "a": 2
        }
      },
      {
        "line": 16,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "b": 5
        }
      },
      {
        "line": 18,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "n": 6
        }
      },
      {
        "line": 13,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "d": 7
        }
      },
      {
        "line": 14,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "sum": 27
        }
      },
      {
        "line": 15,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "a": 5
        }
      },
      {
        "line": 17,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "c": 7
        }
      },
      {
        "line": 18,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "n": 5
        }
      },
      {
        "line": 13,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "d": 10
        }
      },
      {
        "line": 14,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "sum": 37
        }
      },
      {
        "line": 16,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "b": 7
        }
      },
      {
        "line": 17,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "c": 10
        }
      },
      {
        "line": 18,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "n": 4
        }
      },
      {
        "line": 13,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "d": 12
        }
      },
      {
        "line": 14,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "sum": 49
        }
      },
      {
        "line": 15,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "a": 7
        }
      },
      {
        "line": 16,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "b": 10
        }
      },
      {
        "line": 17,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "c": 12
        }
      },
      {
        "line": 18,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "n": 3
        }
      },
      {
        "line": 13,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "d": 17
        }
      },
      {
        "line": 14,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "sum": 66
        }
      },
      {
        "line": 15,
        "step": 46,
        "action": "EXECUTE",
        "vars": {
          "a": 10
        }
      },
      {
        "line": 16,
        "step": 47,
        "action": "EXECUTE",
        "vars": {
          "b": 12
        }
      },
      {
        "line": 17,
        "step": 48,
        "action": "EXECUTE",
        "vars": {
          "c": 17
        }
      },
      {
        "line": 18,
        "step": 49,
        "action": "EXECUTE",
        "vars": {
          "n": 2
        }
      },
      {
        "line": 19,
        "step": 50,
        "action": "RETURN",
        "vars": {
          "__return__": 66
        }
      }
    ],
    "id": 1333,
    "task_id": 448,
    "exist_function": [
      "cal_sum"
    ]
  },
  {
    "code": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum",
    "entry_point": "cal_sum",
    "input": [
      11
    ],
    "output": 88,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 11
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "a": 3
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "b": 0
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "c": 2
        }
      },
      {
        "line": 11,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "sum": 5
        }
      },
      {
        "line": 13,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "d": 3
        }
      },
      {
        "line": 14,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "sum": 8
        }
      },
      {
        "line": 15,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "a": 0
        }
      },
      {
        "line": 16,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "b": 2
        }
      },
      {
        "line": 17,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "c": 3
        }
      },
      {
        "line": 18,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "n": 10
        }
      },
      {
        "line": 13,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "d": 2
        }
      },
      {
        "line": 14,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "sum": 10
        }
      },
      {
        "line": 15,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "a": 2
        }
      },
      {
        "line": 16,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "b": 3
        }
      },
      {
        "line": 17,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "c": 2
        }
      },
      {
        "line": 18,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "n": 9
        }
      },
      {
        "line": 13,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "d": 5
        }
      },
      {
        "line": 14,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "sum": 15
        }
      },
      {
        "line": 15,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "a": 3
        }
      },
      {
        "line": 16,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "b": 2
        }
      },
      {
        "line": 17,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "c": 5
        }
      },
      {
        "line": 18,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "n": 8
        }
      },
      {
        "line": 14,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "sum": 20
        }
      },
      {
        "line": 15,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "a": 2
        }
      },
      {
        "line": 16,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "b": 5
        }
      },
      {
        "line": 18,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "n": 7
        }
      },
      {
        "line": 13,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "d": 7
        }
      },
      {
        "line": 14,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "sum": 27
        }
      },
      {
        "line": 15,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "a": 5
        }
      },
      {
        "line": 17,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "c": 7
        }
      },
      {
        "line": 18,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "n": 6
        }
      },
      {
        "line": 13,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "d": 10
        }
      },
      {
        "line": 14,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "sum": 37
        }
      },
      {
        "line": 16,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "b": 7
        }
      },
      {
        "line": 17,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "c": 10
        }
      },
      {
        "line": 18,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "n": 5
        }
      },
      {
        "line": 13,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "d": 12
        }
      },
      {
        "line": 14,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "sum": 49
        }
      },
      {
        "line": 15,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "a": 7
        }
      },
      {
        "line": 16,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "b": 10
        }
      },
      {
        "line": 17,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "c": 12
        }
      },
      {
        "line": 18,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "n": 4
        }
      },
      {
        "line": 13,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "d": 17
        }
      },
      {
        "line": 14,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "sum": 66
        }
      },
      {
        "line": 15,
        "step": 46,
        "action": "EXECUTE",
        "vars": {
          "a": 10
        }
      },
      {
        "line": 16,
        "step": 47,
        "action": "EXECUTE",
        "vars": {
          "b": 12
        }
      },
      {
        "line": 17,
        "step": 48,
        "action": "EXECUTE",
        "vars": {
          "c": 17
        }
      },
      {
        "line": 18,
        "step": 49,
        "action": "EXECUTE",
        "vars": {
          "n": 3
        }
      },
      {
        "line": 13,
        "step": 50,
        "action": "EXECUTE",
        "vars": {
          "d": 22
        }
      },
      {
        "line": 14,
        "step": 51,
        "action": "EXECUTE",
        "vars": {
          "sum": 88
        }
      },
      {
        "line": 15,
        "step": 52,
        "action": "EXECUTE",
        "vars": {
          "a": 12
        }
      },
      {
        "line": 16,
        "step": 53,
        "action": "EXECUTE",
        "vars": {
          "b": 17
        }
      },
      {
        "line": 17,
        "step": 54,
        "action": "EXECUTE",
        "vars": {
          "c": 22
        }
      },
      {
        "line": 18,
        "step": 55,
        "action": "EXECUTE",
        "vars": {
          "n": 2
        }
      },
      {
        "line": 19,
        "step": 56,
        "action": "RETURN",
        "vars": {
          "__return__": 88
        }
      }
    ],
    "id": 1334,
    "task_id": 448,
    "exist_function": [
      "cal_sum"
    ]
  },
  {
    "code": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res",
    "entry_point": "sumofFactors",
    "input": [
      18
    ],
    "output": 26,
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 18
        }
      },
      {
        "line": 5,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "res": 1
        }
      },
      {
        "line": 6,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 7,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 8,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "curr_sum": 1
        }
      },
      {
        "line": 9,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "curr_term": 1
        }
      },
      {
        "line": 11,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "count": 1
        }
      },
      {
        "line": 12,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "n": 9
        }
      },
      {
        "line": 14,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "curr_sum": 0
        }
      },
      {
        "line": 15,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "curr_term": 2
        }
      },
      {
        "line": 16,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "curr_sum": 2
        }
      },
      {
        "line": 17,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "res": 2
        }
      },
      {
        "line": 6,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 7,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 8,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "curr_sum": 1
        }
      },
      {
        "line": 9,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "curr_term": 1
        }
      },
      {
        "line": 11,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "count": 1
        }
      },
      {
        "line": 12,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "n": 3
        }
      },
      {
        "line": 15,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "curr_term": 3
        }
      },
      {
        "line": 16,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "curr_sum": 4
        }
      },
      {
        "line": 11,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "count": 2
        }
      },
      {
        "line": 12,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "n": 1
        }
      },
      {
        "line": 15,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "curr_term": 9
        }
      },
      {
        "line": 16,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "curr_sum": 13
        }
      },
      {
        "line": 17,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "res": 26
        }
      },
      {
        "line": 6,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 7,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 8,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "curr_sum": 1
        }
      },
      {
        "line": 9,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "curr_term": 1
        }
      },
      {
        "line": 20,
        "step": 30,
        "action": "RETURN",
        "vars": {
          "__return__": 26
        }
      }
    ],
    "id": 1347,
    "task_id": 453,
    "exist_function": [
      "sumofFactors"
    ]
  },
  {
    "code": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res",
    "entry_point": "sumofFactors",
    "input": [
      30
    ],
    "output": 48,
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 30
        }
      },
      {
        "line": 5,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "res": 1
        }
      },
      {
        "line": 6,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 7,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 8,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "curr_sum": 1
        }
      },
      {
        "line": 9,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "curr_term": 1
        }
      },
      {
        "line": 11,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "count": 1
        }
      },
      {
        "line": 12,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "n": 15
        }
      },
      {
        "line": 14,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "curr_sum": 0
        }
      },
      {
        "line": 15,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "curr_term": 2
        }
      },
      {
        "line": 16,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "curr_sum": 2
        }
      },
      {
        "line": 17,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "res": 2
        }
      },
      {
        "line": 6,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 7,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 8,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "curr_sum": 1
        }
      },
      {
        "line": 9,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "curr_term": 1
        }
      },
      {
        "line": 11,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "count": 1
        }
      },
      {
        "line": 12,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "n": 5
        }
      },
      {
        "line": 15,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "curr_term": 3
        }
      },
      {
        "line": 16,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "curr_sum": 4
        }
      },
      {
        "line": 17,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "res": 8
        }
      },
      {
        "line": 6,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 7,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 8,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "curr_sum": 1
        }
      },
      {
        "line": 9,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "curr_term": 1
        }
      },
      {
        "line": 6,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 11,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "count": 1
        }
      },
      {
        "line": 12,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "n": 1
        }
      },
      {
        "line": 15,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "curr_term": 5
        }
      },
      {
        "line": 16,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "curr_sum": 6
        }
      },
      {
        "line": 17,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "res": 48
        }
      },
      {
        "line": 20,
        "step": 32,
        "action": "RETURN",
        "vars": {
          "__return__": 48
        }
      }
    ],
    "id": 1348,
    "task_id": 453,
    "exist_function": [
      "sumofFactors"
    ]
  },
  {
    "code": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res",
    "entry_point": "sumofFactors",
    "input": [
      6
    ],
    "output": 8,
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 6
        }
      },
      {
        "line": 5,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "res": 1
        }
      },
      {
        "line": 6,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 7,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "count": 0
        }
      },
      {
        "line": 8,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "curr_sum": 1
        }
      },
      {
        "line": 9,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "curr_term": 1
        }
      },
      {
        "line": 11,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "count": 1
        }
      },
      {
        "line": 12,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "n": 3
        }
      },
      {
        "line": 14,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "curr_sum": 0
        }
      },
      {
        "line": 15,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "curr_term": 2
        }
      },
      {
        "line": 16,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "curr_sum": 2
        }
      },
      {
        "line": 17,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "res": 2
        }
      },
      {
        "line": 19,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "res": 8
        }
      },
      {
        "line": 20,
        "step": 14,
        "action": "RETURN",
        "vars": {
          "__return__": 8
        }
      }
    ],
    "id": 1349,
    "task_id": 453,
    "exist_function": [
      "sumofFactors"
    ]
  },
  {
    "code": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr",
    "entry_point": "upper_ctr",
    "input": [
      "PYthon"
    ],
    "output": 1,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "str": "PYthon"
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "upper_ctr": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "upper_ctr": 1
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "RETURN",
        "vars": {
          "__return__": 1
        }
      }
    ],
    "id": 1371,
    "task_id": 461,
    "exist_function": [
      "upper_ctr"
    ]
  },
  {
    "code": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr",
    "entry_point": "upper_ctr",
    "input": [
      "BigData"
    ],
    "output": 1,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "str": "BigData"
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "upper_ctr": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "upper_ctr": 1
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "RETURN",
        "vars": {
          "__return__": 1
        }
      }
    ],
    "id": 1372,
    "task_id": 461,
    "exist_function": [
      "upper_ctr"
    ]
  },
  {
    "code": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result",
    "entry_point": "combinations_list",
    "input": [
      [
        "orange",
        "red",
        "green",
        "blue"
      ]
    ],
    "output": [
      [],
      [
        "orange"
      ],
      [
        "red"
      ],
      [
        "red",
        "orange"
      ],
      [
        "green"
      ],
      [
        "green",
        "orange"
      ],
      [
        "green",
        "red"
      ],
      [
        "green",
        "red",
        "orange"
      ],
      [
        "blue"
      ],
      [
        "blue",
        "orange"
      ],
      [
        "blue",
        "red"
      ],
      [
        "blue",
        "red",
        "orange"
      ],
      [
        "blue",
        "green"
      ],
      [
        "blue",
        "green",
        "orange"
      ],
      [
        "blue",
        "green",
        "red"
      ],
      [
        "blue",
        "green",
        "red",
        "orange"
      ]
    ],
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list1": []
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "RETURN",
        "vars": {
          "__return__": [
            []
          ]
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "list1[0]": "blue",
          "el": [],
          "result": []
        }
      },
      {
        "line": 6,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "result[0]": [],
          "result[1]": [
            "blue"
          ]
        }
      },
      {
        "line": 7,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": [
            [],
            [
              "blue"
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "list1[0]": "green",
          "list1[1]": "blue",
          "result": []
        }
      },
      {
        "line": 6,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "result[0]": [],
          "result[1]": [
            "green"
          ]
        }
      },
      {
        "line": 5,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "blue"
        }
      },
      {
        "line": 6,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "result[3]": [
            "blue",
            "green"
          ],
          "result[2]": [
            "blue"
          ]
        }
      },
      {
        "line": 7,
        "step": 8,
        "action": "RETURN",
        "vars": {
          "__return__": [
            [],
            [
              "green"
            ],
            [
              "blue"
            ],
            [
              "blue",
              "green"
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "list1[0]": "red",
          "list1[1]": "green",
          "list1[2]": "blue",
          "el": [],
          "result": []
        }
      },
      {
        "line": 6,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "result[0]": [],
          "result[1]": [
            "red"
          ]
        }
      },
      {
        "line": 5,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "green"
        }
      },
      {
        "line": 6,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "result[3]": [
            "green",
            "red"
          ],
          "result[2]": [
            "green"
          ]
        }
      },
      {
        "line": 5,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "blue"
        }
      },
      {
        "line": 6,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "result[5]": [
            "blue",
            "red"
          ],
          "result[4]": [
            "blue"
          ]
        }
      },
      {
        "line": 5,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "green"
        }
      },
      {
        "line": 6,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "result[6]": [
            "blue",
            "green"
          ],
          "result[7]": [
            "blue",
            "green",
            "red"
          ]
        }
      },
      {
        "line": 7,
        "step": 16,
        "action": "RETURN",
        "vars": {
          "__return__": [
            [],
            [
              "red"
            ],
            [
              "green"
            ],
            [
              "green",
              "red"
            ],
            [
              "blue"
            ],
            [
              "blue",
              "red"
            ],
            [
              "blue",
              "green"
            ],
            [
              "blue",
              "green",
              "red"
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "list1[0]": "orange",
          "list1[1]": "red",
          "list1[2]": "green",
          "list1[3]": "blue",
          "el": [],
          "result": []
        }
      },
      {
        "line": 6,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "result[0]": [],
          "result[1]": [
            "orange"
          ]
        }
      },
      {
        "line": 5,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "red"
        }
      },
      {
        "line": 6,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "result[3]": [
            "red",
            "orange"
          ],
          "result[2]": [
            "red"
          ]
        }
      },
      {
        "line": 5,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "green"
        }
      },
      {
        "line": 6,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "result[5]": [
            "green",
            "orange"
          ],
          "result[4]": [
            "green"
          ]
        }
      },
      {
        "line": 5,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "red"
        }
      },
      {
        "line": 6,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "result[6]": [
            "green",
            "red"
          ],
          "result[7]": [
            "green",
            "red",
            "orange"
          ]
        }
      },
      {
        "line": 5,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "blue"
        }
      },
      {
        "line": 6,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "result[8]": [
            "blue"
          ],
          "result[9]": [
            "blue",
            "orange"
          ]
        }
      },
      {
        "line": 5,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "red"
        }
      },
      {
        "line": 6,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "result[10]": [
            "blue",
            "red"
          ],
          "result[11]": [
            "blue",
            "red",
            "orange"
          ]
        }
      },
      {
        "line": 5,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "green"
        }
      },
      {
        "line": 6,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "result[13]": [
            "blue",
            "green",
            "orange"
          ],
          "result[12]": [
            "blue",
            "green"
          ]
        }
      },
      {
        "line": 5,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "el[2]": "red"
        }
      },
      {
        "line": 6,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "result[15]": [
            "blue",
            "green",
            "red",
            "orange"
          ],
          "result[14]": [
            "blue",
            "green",
            "red"
          ]
        }
      },
      {
        "line": 7,
        "step": 32,
        "action": "RETURN",
        "vars": {
          "__return__": [
            [],
            [
              "orange"
            ],
            [
              "red"
            ],
            [
              "red",
              "orange"
            ],
            [
              "green"
            ],
            [
              "green",
              "orange"
            ],
            [
              "green",
              "red"
            ],
            [
              "green",
              "red",
              "orange"
            ],
            [
              "blue"
            ],
            [
              "blue",
              "orange"
            ],
            [
              "blue",
              "red"
            ],
            [
              "blue",
              "red",
              "orange"
            ],
            [
              "blue",
              "green"
            ],
            [
              "blue",
              "green",
              "orange"
            ],
            [
              "blue",
              "green",
              "red"
            ],
            [
              "blue",
              "green",
              "red",
              "orange"
            ]
          ]
        }
      }
    ],
    "id": 1374,
    "task_id": 462,
    "exist_function": [
      "combinations_list"
    ]
  },
  {
    "code": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result",
    "entry_point": "combinations_list",
    "input": [
      [
        "red",
        "green",
        "blue",
        "white",
        "black",
        "orange"
      ]
    ],
    "output": [
      [],
      [
        "red"
      ],
      [
        "green"
      ],
      [
        "green",
        "red"
      ],
      [
        "blue"
      ],
      [
        "blue",
        "red"
      ],
      [
        "blue",
        "green"
      ],
      [
        "blue",
        "green",
        "red"
      ],
      [
        "white"
      ],
      [
        "white",
        "red"
      ],
      [
        "white",
        "green"
      ],
      [
        "white",
        "green",
        "red"
      ],
      [
        "white",
        "blue"
      ],
      [
        "white",
        "blue",
        "red"
      ],
      [
        "white",
        "blue",
        "green"
      ],
      [
        "white",
        "blue",
        "green",
        "red"
      ],
      [
        "black"
      ],
      [
        "black",
        "red"
      ],
      [
        "black",
        "green"
      ],
      [
        "black",
        "green",
        "red"
      ],
      [
        "black",
        "blue"
      ],
      [
        "black",
        "blue",
        "red"
      ],
      [
        "black",
        "blue",
        "green"
      ],
      [
        "black",
        "blue",
        "green",
        "red"
      ],
      [
        "black",
        "white"
      ],
      [
        "black",
        "white",
        "red"
      ],
      [
        "black",
        "white",
        "green"
      ],
      [
        "black",
        "white",
        "green",
        "red"
      ],
      [
        "black",
        "white",
        "blue"
      ],
      [
        "black",
        "white",
        "blue",
        "red"
      ],
      [
        "black",
        "white",
        "blue",
        "green"
      ],
      [
        "black",
        "white",
        "blue",
        "green",
        "red"
      ],
      [
        "orange"
      ],
      [
        "orange",
        "red"
      ],
      [
        "orange",
        "green"
      ],
      [
        "orange",
        "green",
        "red"
      ],
      [
        "orange",
        "blue"
      ],
      [
        "orange",
        "blue",
        "red"
      ],
      [
        "orange",
        "blue",
        "green"
      ],
      [
        "orange",
        "blue",
        "green",
        "red"
      ],
      [
        "orange",
        "white"
      ],
      [
        "orange",
        "white",
        "red"
      ],
      [
        "orange",
        "white",
        "green"
      ],
      [
        "orange",
        "white",
        "green",
        "red"
      ],
      [
        "orange",
        "white",
        "blue"
      ],
      [
        "orange",
        "white",
        "blue",
        "red"
      ],
      [
        "orange",
        "white",
        "blue",
        "green"
      ],
      [
        "orange",
        "white",
        "blue",
        "green",
        "red"
      ],
      [
        "orange",
        "black"
      ],
      [
        "orange",
        "black",
        "red"
      ],
      [
        "orange",
        "black",
        "green"
      ],
      [
        "orange",
        "black",
        "green",
        "red"
      ],
      [
        "orange",
        "black",
        "blue"
      ],
      [
        "orange",
        "black",
        "blue",
        "red"
      ],
      [
        "orange",
        "black",
        "blue",
        "green"
      ],
      [
        "orange",
        "black",
        "blue",
        "green",
        "red"
      ],
      [
        "orange",
        "black",
        "white"
      ],
      [
        "orange",
        "black",
        "white",
        "red"
      ],
      [
        "orange",
        "black",
        "white",
        "green"
      ],
      [
        "orange",
        "black",
        "white",
        "green",
        "red"
      ],
      [
        "orange",
        "black",
        "white",
        "blue"
      ],
      [
        "orange",
        "black",
        "white",
        "blue",
        "red"
      ],
      [
        "orange",
        "black",
        "white",
        "blue",
        "green"
      ],
      [
        "orange",
        "black",
        "white",
        "blue",
        "green",
        "red"
      ]
    ],
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list1": []
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "RETURN",
        "vars": {
          "__return__": [
            []
          ]
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "list1[0]": "orange",
          "el": [],
          "result": []
        }
      },
      {
        "line": 6,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "result[0]": [],
          "result[1]": [
            "orange"
          ]
        }
      },
      {
        "line": 7,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": [
            [],
            [
              "orange"
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "list1[0]": "black",
          "list1[1]": "orange",
          "result": []
        }
      },
      {
        "line": 6,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "result[0]": [],
          "result[1]": [
            "black"
          ]
        }
      },
      {
        "line": 5,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "orange"
        }
      },
      {
        "line": 6,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "result[3]": [
            "orange",
            "black"
          ],
          "result[2]": [
            "orange"
          ]
        }
      },
      {
        "line": 7,
        "step": 8,
        "action": "RETURN",
        "vars": {
          "__return__": [
            [],
            [
              "black"
            ],
            [
              "orange"
            ],
            [
              "orange",
              "black"
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "list1[0]": "white",
          "list1[1]": "black",
          "list1[2]": "orange",
          "el": [],
          "result": []
        }
      },
      {
        "line": 6,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "result[0]": [],
          "result[1]": [
            "white"
          ]
        }
      },
      {
        "line": 5,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "black"
        }
      },
      {
        "line": 6,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "result[3]": [
            "black",
            "white"
          ],
          "result[2]": [
            "black"
          ]
        }
      },
      {
        "line": 5,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "orange"
        }
      },
      {
        "line": 6,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "result[5]": [
            "orange",
            "white"
          ],
          "result[4]": [
            "orange"
          ]
        }
      },
      {
        "line": 5,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "black"
        }
      },
      {
        "line": 6,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "result[6]": [
            "orange",
            "black"
          ],
          "result[7]": [
            "orange",
            "black",
            "white"
          ]
        }
      },
      {
        "line": 7,
        "step": 16,
        "action": "RETURN",
        "vars": {
          "__return__": [
            [],
            [
              "white"
            ],
            [
              "black"
            ],
            [
              "black",
              "white"
            ],
            [
              "orange"
            ],
            [
              "orange",
              "white"
            ],
            [
              "orange",
              "black"
            ],
            [
              "orange",
              "black",
              "white"
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "list1[0]": "blue",
          "list1[1]": "white",
          "list1[2]": "black",
          "list1[3]": "orange",
          "el": [],
          "result": []
        }
      },
      {
        "line": 6,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "result[0]": [],
          "result[1]": [
            "blue"
          ]
        }
      },
      {
        "line": 5,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "white"
        }
      },
      {
        "line": 6,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "result[3]": [
            "white",
            "blue"
          ],
          "result[2]": [
            "white"
          ]
        }
      },
      {
        "line": 5,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "black"
        }
      },
      {
        "line": 6,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "result[5]": [
            "black",
            "blue"
          ],
          "result[4]": [
            "black"
          ]
        }
      },
      {
        "line": 5,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "white"
        }
      },
      {
        "line": 6,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "result[6]": [
            "black",
            "white"
          ],
          "result[7]": [
            "black",
            "white",
            "blue"
          ]
        }
      },
      {
        "line": 5,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "orange"
        }
      },
      {
        "line": 6,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "result[8]": [
            "orange"
          ],
          "result[9]": [
            "orange",
            "blue"
          ]
        }
      },
      {
        "line": 5,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "white"
        }
      },
      {
        "line": 6,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "result[10]": [
            "orange",
            "white"
          ],
          "result[11]": [
            "orange",
            "white",
            "blue"
          ]
        }
      },
      {
        "line": 5,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "black"
        }
      },
      {
        "line": 6,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "result[13]": [
            "orange",
            "black",
            "blue"
          ],
          "result[12]": [
            "orange",
            "black"
          ]
        }
      },
      {
        "line": 5,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "el[2]": "white"
        }
      },
      {
        "line": 6,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "result[15]": [
            "orange",
            "black",
            "white",
            "blue"
          ],
          "result[14]": [
            "orange",
            "black",
            "white"
          ]
        }
      },
      {
        "line": 7,
        "step": 32,
        "action": "RETURN",
        "vars": {
          "__return__": [
            [],
            [
              "blue"
            ],
            [
              "white"
            ],
            [
              "white",
              "blue"
            ],
            [
              "black"
            ],
            [
              "black",
              "blue"
            ],
            [
              "black",
              "white"
            ],
            [
              "black",
              "white",
              "blue"
            ],
            [
              "orange"
            ],
            [
              "orange",
              "blue"
            ],
            [
              "orange",
              "white"
            ],
            [
              "orange",
              "white",
              "blue"
            ],
            [
              "orange",
              "black"
            ],
            [
              "orange",
              "black",
              "blue"
            ],
            [
              "orange",
              "black",
              "white"
            ],
            [
              "orange",
              "black",
              "white",
              "blue"
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "list1[1]": "blue",
          "list1[2]": "white",
          "list1[4]": "orange",
          "list1[3]": "black",
          "list1[0]": "green",
          "el": [],
          "result": []
        }
      },
      {
        "line": 6,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "result[0]": [],
          "result[1]": [
            "green"
          ]
        }
      },
      {
        "line": 5,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "blue"
        }
      },
      {
        "line": 6,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "result[3]": [
            "blue",
            "green"
          ],
          "result[2]": [
            "blue"
          ]
        }
      },
      {
        "line": 5,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "white"
        }
      },
      {
        "line": 6,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "result[5]": [
            "white",
            "green"
          ],
          "result[4]": [
            "white"
          ]
        }
      },
      {
        "line": 5,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "blue"
        }
      },
      {
        "line": 6,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "result[6]": [
            "white",
            "blue"
          ],
          "result[7]": [
            "white",
            "blue",
            "green"
          ]
        }
      },
      {
        "line": 5,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "black"
        }
      },
      {
        "line": 6,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "result[8]": [
            "black"
          ],
          "result[9]": [
            "black",
            "green"
          ]
        }
      },
      {
        "line": 5,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "blue"
        }
      },
      {
        "line": 6,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "result[10]": [
            "black",
            "blue"
          ],
          "result[11]": [
            "black",
            "blue",
            "green"
          ]
        }
      },
      {
        "line": 5,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "white"
        }
      },
      {
        "line": 6,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "result[13]": [
            "black",
            "white",
            "green"
          ],
          "result[12]": [
            "black",
            "white"
          ]
        }
      },
      {
        "line": 5,
        "step": 46,
        "action": "EXECUTE",
        "vars": {
          "el[2]": "blue"
        }
      },
      {
        "line": 6,
        "step": 47,
        "action": "EXECUTE",
        "vars": {
          "result[15]": [
            "black",
            "white",
            "blue",
            "green"
          ],
          "result[14]": [
            "black",
            "white",
            "blue"
          ]
        }
      },
      {
        "line": 5,
        "step": 48,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "orange"
        }
      },
      {
        "line": 6,
        "step": 49,
        "action": "EXECUTE",
        "vars": {
          "result[16]": [
            "orange"
          ],
          "result[17]": [
            "orange",
            "green"
          ]
        }
      },
      {
        "line": 5,
        "step": 50,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "blue"
        }
      },
      {
        "line": 6,
        "step": 51,
        "action": "EXECUTE",
        "vars": {
          "result[18]": [
            "orange",
            "blue"
          ],
          "result[19]": [
            "orange",
            "blue",
            "green"
          ]
        }
      },
      {
        "line": 5,
        "step": 52,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "white"
        }
      },
      {
        "line": 6,
        "step": 53,
        "action": "EXECUTE",
        "vars": {
          "result[21]": [
            "orange",
            "white",
            "green"
          ],
          "result[20]": [
            "orange",
            "white"
          ]
        }
      },
      {
        "line": 5,
        "step": 54,
        "action": "EXECUTE",
        "vars": {
          "el[2]": "blue"
        }
      },
      {
        "line": 6,
        "step": 55,
        "action": "EXECUTE",
        "vars": {
          "result[22]": [
            "orange",
            "white",
            "blue"
          ],
          "result[23]": [
            "orange",
            "white",
            "blue",
            "green"
          ]
        }
      },
      {
        "line": 5,
        "step": 56,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "black"
        }
      },
      {
        "line": 6,
        "step": 57,
        "action": "EXECUTE",
        "vars": {
          "result[25]": [
            "orange",
            "black",
            "green"
          ],
          "result[24]": [
            "orange",
            "black"
          ]
        }
      },
      {
        "line": 5,
        "step": 58,
        "action": "EXECUTE",
        "vars": {
          "el[2]": "blue"
        }
      },
      {
        "line": 6,
        "step": 59,
        "action": "EXECUTE",
        "vars": {
          "result[27]": [
            "orange",
            "black",
            "blue",
            "green"
          ],
          "result[26]": [
            "orange",
            "black",
            "blue"
          ]
        }
      },
      {
        "line": 5,
        "step": 60,
        "action": "EXECUTE",
        "vars": {
          "el[2]": "white"
        }
      },
      {
        "line": 6,
        "step": 61,
        "action": "EXECUTE",
        "vars": {
          "result[29]": [
            "orange",
            "black",
            "white",
            "green"
          ],
          "result[28]": [
            "orange",
            "black",
            "white"
          ]
        }
      },
      {
        "line": 5,
        "step": 62,
        "action": "EXECUTE",
        "vars": {
          "el[3]": "blue"
        }
      },
      {
        "line": 6,
        "step": 63,
        "action": "EXECUTE",
        "vars": {
          "result[30]": [
            "orange",
            "black",
            "white",
            "blue"
          ],
          "result[31]": [
            "orange",
            "black",
            "white",
            "blue",
            "green"
          ]
        }
      },
      {
        "line": 7,
        "step": 64,
        "action": "RETURN",
        "vars": {
          "__return__": [
            [],
            [
              "green"
            ],
            [
              "blue"
            ],
            [
              "blue",
              "green"
            ],
            [
              "white"
            ],
            [
              "white",
              "green"
            ],
            [
              "white",
              "blue"
            ],
            [
              "white",
              "blue",
              "green"
            ],
            [
              "black"
            ],
            [
              "black",
              "green"
            ],
            [
              "black",
              "blue"
            ],
            [
              "black",
              "blue",
              "green"
            ],
            [
              "black",
              "white"
            ],
            [
              "black",
              "white",
              "green"
            ],
            [
              "black",
              "white",
              "blue"
            ],
            [
              "black",
              "white",
              "blue",
              "green"
            ],
            [
              "orange"
            ],
            [
              "orange",
              "green"
            ],
            [
              "orange",
              "blue"
            ],
            [
              "orange",
              "blue",
              "green"
            ],
            [
              "orange",
              "white"
            ],
            [
              "orange",
              "white",
              "green"
            ],
            [
              "orange",
              "white",
              "blue"
            ],
            [
              "orange",
              "white",
              "blue",
              "green"
            ],
            [
              "orange",
              "black"
            ],
            [
              "orange",
              "black",
              "green"
            ],
            [
              "orange",
              "black",
              "blue"
            ],
            [
              "orange",
              "black",
              "blue",
              "green"
            ],
            [
              "orange",
              "black",
              "white"
            ],
            [
              "orange",
              "black",
              "white",
              "green"
            ],
            [
              "orange",
              "black",
              "white",
              "blue"
            ],
            [
              "orange",
              "black",
              "white",
              "blue",
              "green"
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 64,
        "action": "EXECUTE",
        "vars": {
          "list1[5]": "orange",
          "list1[1]": "green",
          "list1[2]": "blue",
          "list1[4]": "black",
          "list1[3]": "white",
          "list1[0]": "red",
          "el": [],
          "result": []
        }
      },
      {
        "line": 6,
        "step": 65,
        "action": "EXECUTE",
        "vars": {
          "result[0]": [],
          "result[1]": [
            "red"
          ]
        }
      },
      {
        "line": 5,
        "step": 66,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "green"
        }
      },
      {
        "line": 6,
        "step": 67,
        "action": "EXECUTE",
        "vars": {
          "result[3]": [
            "green",
            "red"
          ],
          "result[2]": [
            "green"
          ]
        }
      },
      {
        "line": 5,
        "step": 68,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "blue"
        }
      },
      {
        "line": 6,
        "step": 69,
        "action": "EXECUTE",
        "vars": {
          "result[5]": [
            "blue",
            "red"
          ],
          "result[4]": [
            "blue"
          ]
        }
      },
      {
        "line": 5,
        "step": 70,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "green"
        }
      },
      {
        "line": 6,
        "step": 71,
        "action": "EXECUTE",
        "vars": {
          "result[6]": [
            "blue",
            "green"
          ],
          "result[7]": [
            "blue",
            "green",
            "red"
          ]
        }
      },
      {
        "line": 5,
        "step": 72,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "white"
        }
      },
      {
        "line": 6,
        "step": 73,
        "action": "EXECUTE",
        "vars": {
          "result[8]": [
            "white"
          ],
          "result[9]": [
            "white",
            "red"
          ]
        }
      },
      {
        "line": 5,
        "step": 74,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "green"
        }
      },
      {
        "line": 6,
        "step": 75,
        "action": "EXECUTE",
        "vars": {
          "result[10]": [
            "white",
            "green"
          ],
          "result[11]": [
            "white",
            "green",
            "red"
          ]
        }
      },
      {
        "line": 5,
        "step": 76,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "blue"
        }
      },
      {
        "line": 6,
        "step": 77,
        "action": "EXECUTE",
        "vars": {
          "result[13]": [
            "white",
            "blue",
            "red"
          ],
          "result[12]": [
            "white",
            "blue"
          ]
        }
      },
      {
        "line": 5,
        "step": 78,
        "action": "EXECUTE",
        "vars": {
          "el[2]": "green"
        }
      },
      {
        "line": 6,
        "step": 79,
        "action": "EXECUTE",
        "vars": {
          "result[15]": [
            "white",
            "blue",
            "green",
            "red"
          ],
          "result[14]": [
            "white",
            "blue",
            "green"
          ]
        }
      },
      {
        "line": 5,
        "step": 80,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "black"
        }
      },
      {
        "line": 6,
        "step": 81,
        "action": "EXECUTE",
        "vars": {
          "result[16]": [
            "black"
          ],
          "result[17]": [
            "black",
            "red"
          ]
        }
      },
      {
        "line": 5,
        "step": 82,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "green"
        }
      },
      {
        "line": 6,
        "step": 83,
        "action": "EXECUTE",
        "vars": {
          "result[18]": [
            "black",
            "green"
          ],
          "result[19]": [
            "black",
            "green",
            "red"
          ]
        }
      },
      {
        "line": 5,
        "step": 84,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "blue"
        }
      },
      {
        "line": 6,
        "step": 85,
        "action": "EXECUTE",
        "vars": {
          "result[21]": [
            "black",
            "blue",
            "red"
          ],
          "result[20]": [
            "black",
            "blue"
          ]
        }
      },
      {
        "line": 5,
        "step": 86,
        "action": "EXECUTE",
        "vars": {
          "el[2]": "green"
        }
      },
      {
        "line": 6,
        "step": 87,
        "action": "EXECUTE",
        "vars": {
          "result[22]": [
            "black",
            "blue",
            "green"
          ],
          "result[23]": [
            "black",
            "blue",
            "green",
            "red"
          ]
        }
      },
      {
        "line": 5,
        "step": 88,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "white"
        }
      },
      {
        "line": 6,
        "step": 89,
        "action": "EXECUTE",
        "vars": {
          "result[25]": [
            "black",
            "white",
            "red"
          ],
          "result[24]": [
            "black",
            "white"
          ]
        }
      },
      {
        "line": 5,
        "step": 90,
        "action": "EXECUTE",
        "vars": {
          "el[2]": "green"
        }
      },
      {
        "line": 6,
        "step": 91,
        "action": "EXECUTE",
        "vars": {
          "result[27]": [
            "black",
            "white",
            "green",
            "red"
          ],
          "result[26]": [
            "black",
            "white",
            "green"
          ]
        }
      },
      {
        "line": 5,
        "step": 92,
        "action": "EXECUTE",
        "vars": {
          "el[2]": "blue"
        }
      },
      {
        "line": 6,
        "step": 93,
        "action": "EXECUTE",
        "vars": {
          "result[29]": [
            "black",
            "white",
            "blue",
            "red"
          ],
          "result[28]": [
            "black",
            "white",
            "blue"
          ]
        }
      },
      {
        "line": 5,
        "step": 94,
        "action": "EXECUTE",
        "vars": {
          "el[3]": "green"
        }
      },
      {
        "line": 6,
        "step": 95,
        "action": "EXECUTE",
        "vars": {
          "result[30]": [
            "black",
            "white",
            "blue",
            "green"
          ],
          "result[31]": [
            "black",
            "white",
            "blue",
            "green",
            "red"
          ]
        }
      },
      {
        "line": 5,
        "step": 96,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "orange"
        }
      },
      {
        "line": 6,
        "step": 97,
        "action": "EXECUTE",
        "vars": {
          "result[33]": [
            "orange",
            "red"
          ],
          "result[32]": [
            "orange"
          ]
        }
      },
      {
        "line": 5,
        "step": 98,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "green"
        }
      },
      {
        "line": 6,
        "step": 99,
        "action": "EXECUTE",
        "vars": {
          "result[34]": [
            "orange",
            "green"
          ],
          "result[35]": [
            "orange",
            "green",
            "red"
          ]
        }
      },
      {
        "line": 5,
        "step": 100,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "blue"
        }
      },
      {
        "line": 6,
        "step": 101,
        "action": "EXECUTE",
        "vars": {
          "result[36]": [
            "orange",
            "blue"
          ],
          "result[37]": [
            "orange",
            "blue",
            "red"
          ]
        }
      },
      {
        "line": 5,
        "step": 102,
        "action": "EXECUTE",
        "vars": {
          "el[2]": "green"
        }
      },
      {
        "line": 6,
        "step": 103,
        "action": "EXECUTE",
        "vars": {
          "result[39]": [
            "orange",
            "blue",
            "green",
            "red"
          ],
          "result[38]": [
            "orange",
            "blue",
            "green"
          ]
        }
      },
      {
        "line": 5,
        "step": 104,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "white"
        }
      },
      {
        "line": 6,
        "step": 105,
        "action": "EXECUTE",
        "vars": {
          "result[40]": [
            "orange",
            "white"
          ],
          "result[41]": [
            "orange",
            "white",
            "red"
          ]
        }
      },
      {
        "line": 5,
        "step": 106,
        "action": "EXECUTE",
        "vars": {
          "el[2]": "green"
        }
      },
      {
        "line": 6,
        "step": 107,
        "action": "EXECUTE",
        "vars": {
          "result[43]": [
            "orange",
            "white",
            "green",
            "red"
          ],
          "result[42]": [
            "orange",
            "white",
            "green"
          ]
        }
      },
      {
        "line": 5,
        "step": 108,
        "action": "EXECUTE",
        "vars": {
          "el[2]": "blue"
        }
      },
      {
        "line": 6,
        "step": 109,
        "action": "EXECUTE",
        "vars": {
          "result[44]": [
            "orange",
            "white",
            "blue"
          ],
          "result[45]": [
            "orange",
            "white",
            "blue",
            "red"
          ]
        }
      },
      {
        "line": 5,
        "step": 110,
        "action": "EXECUTE",
        "vars": {
          "el[3]": "green"
        }
      },
      {
        "line": 6,
        "step": 111,
        "action": "EXECUTE",
        "vars": {
          "result[47]": [
            "orange",
            "white",
            "blue",
            "green",
            "red"
          ],
          "result[46]": [
            "orange",
            "white",
            "blue",
            "green"
          ]
        }
      },
      {
        "line": 5,
        "step": 112,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "black"
        }
      },
      {
        "line": 6,
        "step": 113,
        "action": "EXECUTE",
        "vars": {
          "result[49]": [
            "orange",
            "black",
            "red"
          ],
          "result[48]": [
            "orange",
            "black"
          ]
        }
      },
      {
        "line": 5,
        "step": 114,
        "action": "EXECUTE",
        "vars": {
          "el[2]": "green"
        }
      },
      {
        "line": 6,
        "step": 115,
        "action": "EXECUTE",
        "vars": {
          "result[51]": [
            "orange",
            "black",
            "green",
            "red"
          ],
          "result[50]": [
            "orange",
            "black",
            "green"
          ]
        }
      },
      {
        "line": 5,
        "step": 116,
        "action": "EXECUTE",
        "vars": {
          "el[2]": "blue"
        }
      },
      {
        "line": 6,
        "step": 117,
        "action": "EXECUTE",
        "vars": {
          "result[53]": [
            "orange",
            "black",
            "blue",
            "red"
          ],
          "result[52]": [
            "orange",
            "black",
            "blue"
          ]
        }
      },
      {
        "line": 5,
        "step": 118,
        "action": "EXECUTE",
        "vars": {
          "el[3]": "green"
        }
      },
      {
        "line": 6,
        "step": 119,
        "action": "EXECUTE",
        "vars": {
          "result[55]": [
            "orange",
            "black",
            "blue",
            "green",
            "red"
          ],
          "result[54]": [
            "orange",
            "black",
            "blue",
            "green"
          ]
        }
      },
      {
        "line": 5,
        "step": 120,
        "action": "EXECUTE",
        "vars": {
          "el[2]": "white"
        }
      },
      {
        "line": 6,
        "step": 121,
        "action": "EXECUTE",
        "vars": {
          "result[57]": [
            "orange",
            "black",
            "white",
            "red"
          ],
          "result[56]": [
            "orange",
            "black",
            "white"
          ]
        }
      },
      {
        "line": 5,
        "step": 122,
        "action": "EXECUTE",
        "vars": {
          "el[3]": "green"
        }
      },
      {
        "line": 6,
        "step": 123,
        "action": "EXECUTE",
        "vars": {
          "result[58]": [
            "orange",
            "black",
            "white",
            "green"
          ],
          "result[59]": [
            "orange",
            "black",
            "white",
            "green",
            "red"
          ]
        }
      },
      {
        "line": 5,
        "step": 124,
        "action": "EXECUTE",
        "vars": {
          "el[3]": "blue"
        }
      },
      {
        "line": 6,
        "step": 125,
        "action": "EXECUTE",
        "vars": {
          "result[61]": [
            "orange",
            "black",
            "white",
            "blue",
            "red"
          ],
          "result[60]": [
            "orange",
            "black",
            "white",
            "blue"
          ]
        }
      },
      {
        "line": 5,
        "step": 126,
        "action": "EXECUTE",
        "vars": {
          "el[4]": "green"
        }
      },
      {
        "line": 6,
        "step": 127,
        "action": "EXECUTE",
        "vars": {
          "result[62]": [
            "orange",
            "black",
            "white",
            "blue",
            "green"
          ],
          "result[63]": [
            "orange",
            "black",
            "white",
            "blue",
            "green",
            "red"
          ]
        }
      },
      {
        "line": 7,
        "step": 128,
        "action": "RETURN",
        "vars": {
          "__return__": [
            [],
            [
              "red"
            ],
            [
              "green"
            ],
            [
              "green",
              "red"
            ],
            [
              "blue"
            ],
            [
              "blue",
              "red"
            ],
            [
              "blue",
              "green"
            ],
            [
              "blue",
              "green",
              "red"
            ],
            [
              "white"
            ],
            [
              "white",
              "red"
            ],
            [
              "white",
              "green"
            ],
            [
              "white",
              "green",
              "red"
            ],
            [
              "white",
              "blue"
            ],
            [
              "white",
              "blue",
              "red"
            ],
            [
              "white",
              "blue",
              "green"
            ],
            [
              "white",
              "blue",
              "green",
              "red"
            ],
            [
              "black"
            ],
            [
              "black",
              "red"
            ],
            [
              "black",
              "green"
            ],
            [
              "black",
              "green",
              "red"
            ],
            [
              "black",
              "blue"
            ],
            [
              "black",
              "blue",
              "red"
            ],
            [
              "black",
              "blue",
              "green"
            ],
            [
              "black",
              "blue",
              "green",
              "red"
            ],
            [
              "black",
              "white"
            ],
            [
              "black",
              "white",
              "red"
            ],
            [
              "black",
              "white",
              "green"
            ],
            [
              "black",
              "white",
              "green",
              "red"
            ],
            [
              "black",
              "white",
              "blue"
            ],
            [
              "black",
              "white",
              "blue",
              "red"
            ],
            [
              "black",
              "white",
              "blue",
              "green"
            ],
            [
              "black",
              "white",
              "blue",
              "green",
              "red"
            ],
            [
              "orange"
            ],
            [
              "orange",
              "red"
            ],
            [
              "orange",
              "green"
            ],
            [
              "orange",
              "green",
              "red"
            ],
            [
              "orange",
              "blue"
            ],
            [
              "orange",
              "blue",
              "red"
            ],
            [
              "orange",
              "blue",
              "green"
            ],
            [
              "orange",
              "blue",
              "green",
              "red"
            ],
            [
              "orange",
              "white"
            ],
            [
              "orange",
              "white",
              "red"
            ],
            [
              "orange",
              "white",
              "green"
            ],
            [
              "orange",
              "white",
              "green",
              "red"
            ],
            [
              "orange",
              "white",
              "blue"
            ],
            [
              "orange",
              "white",
              "blue",
              "red"
            ],
            [
              "orange",
              "white",
              "blue",
              "green"
            ],
            [
              "orange",
              "white",
              "blue",
              "green",
              "red"
            ],
            [
              "orange",
              "black"
            ],
            [
              "orange",
              "black",
              "red"
            ],
            [
              "orange",
              "black",
              "green"
            ],
            [
              "orange",
              "black",
              "green",
              "red"
            ],
            [
              "orange",
              "black",
              "blue"
            ],
            [
              "orange",
              "black",
              "blue",
              "red"
            ],
            [
              "orange",
              "black",
              "blue",
              "green"
            ],
            [
              "orange",
              "black",
              "blue",
              "green",
              "red"
            ],
            [
              "orange",
              "black",
              "white"
            ],
            [
              "orange",
              "black",
              "white",
              "red"
            ],
            [
              "orange",
              "black",
              "white",
              "green"
            ],
            [
              "orange",
              "black",
              "white",
              "green",
              "red"
            ],
            [
              "orange",
              "black",
              "white",
              "blue"
            ],
            [
              "orange",
              "black",
              "white",
              "blue",
              "red"
            ],
            [
              "orange",
              "black",
              "white",
              "blue",
              "green"
            ],
            [
              "orange",
              "black",
              "white",
              "blue",
              "green",
              "red"
            ]
          ]
        }
      }
    ],
    "id": 1375,
    "task_id": 462,
    "exist_function": [
      "combinations_list"
    ]
  },
  {
    "code": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result",
    "entry_point": "combinations_list",
    "input": [
      [
        "red",
        "green",
        "black",
        "orange"
      ]
    ],
    "output": [
      [],
      [
        "red"
      ],
      [
        "green"
      ],
      [
        "green",
        "red"
      ],
      [
        "black"
      ],
      [
        "black",
        "red"
      ],
      [
        "black",
        "green"
      ],
      [
        "black",
        "green",
        "red"
      ],
      [
        "orange"
      ],
      [
        "orange",
        "red"
      ],
      [
        "orange",
        "green"
      ],
      [
        "orange",
        "green",
        "red"
      ],
      [
        "orange",
        "black"
      ],
      [
        "orange",
        "black",
        "red"
      ],
      [
        "orange",
        "black",
        "green"
      ],
      [
        "orange",
        "black",
        "green",
        "red"
      ]
    ],
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "list1": []
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "RETURN",
        "vars": {
          "__return__": [
            []
          ]
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "list1[0]": "orange",
          "el": [],
          "result": []
        }
      },
      {
        "line": 6,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "result[0]": [],
          "result[1]": [
            "orange"
          ]
        }
      },
      {
        "line": 7,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": [
            [],
            [
              "orange"
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "list1[0]": "black",
          "list1[1]": "orange",
          "result": []
        }
      },
      {
        "line": 6,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "result[0]": [],
          "result[1]": [
            "black"
          ]
        }
      },
      {
        "line": 5,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "orange"
        }
      },
      {
        "line": 6,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "result[3]": [
            "orange",
            "black"
          ],
          "result[2]": [
            "orange"
          ]
        }
      },
      {
        "line": 7,
        "step": 8,
        "action": "RETURN",
        "vars": {
          "__return__": [
            [],
            [
              "black"
            ],
            [
              "orange"
            ],
            [
              "orange",
              "black"
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "list1[0]": "green",
          "list1[1]": "black",
          "list1[2]": "orange",
          "el": [],
          "result": []
        }
      },
      {
        "line": 6,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "result[0]": [],
          "result[1]": [
            "green"
          ]
        }
      },
      {
        "line": 5,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "black"
        }
      },
      {
        "line": 6,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "result[3]": [
            "black",
            "green"
          ],
          "result[2]": [
            "black"
          ]
        }
      },
      {
        "line": 5,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "orange"
        }
      },
      {
        "line": 6,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "result[5]": [
            "orange",
            "green"
          ],
          "result[4]": [
            "orange"
          ]
        }
      },
      {
        "line": 5,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "black"
        }
      },
      {
        "line": 6,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "result[6]": [
            "orange",
            "black"
          ],
          "result[7]": [
            "orange",
            "black",
            "green"
          ]
        }
      },
      {
        "line": 7,
        "step": 16,
        "action": "RETURN",
        "vars": {
          "__return__": [
            [],
            [
              "green"
            ],
            [
              "black"
            ],
            [
              "black",
              "green"
            ],
            [
              "orange"
            ],
            [
              "orange",
              "green"
            ],
            [
              "orange",
              "black"
            ],
            [
              "orange",
              "black",
              "green"
            ]
          ]
        }
      },
      {
        "line": 7,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "list1[0]": "red",
          "list1[1]": "green",
          "list1[2]": "black",
          "list1[3]": "orange",
          "el": [],
          "result": []
        }
      },
      {
        "line": 6,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "result[0]": [],
          "result[1]": [
            "red"
          ]
        }
      },
      {
        "line": 5,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "green"
        }
      },
      {
        "line": 6,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "result[3]": [
            "green",
            "red"
          ],
          "result[2]": [
            "green"
          ]
        }
      },
      {
        "line": 5,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "black"
        }
      },
      {
        "line": 6,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "result[5]": [
            "black",
            "red"
          ],
          "result[4]": [
            "black"
          ]
        }
      },
      {
        "line": 5,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "green"
        }
      },
      {
        "line": 6,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "result[6]": [
            "black",
            "green"
          ],
          "result[7]": [
            "black",
            "green",
            "red"
          ]
        }
      },
      {
        "line": 5,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "el[0]": "orange"
        }
      },
      {
        "line": 6,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "result[8]": [
            "orange"
          ],
          "result[9]": [
            "orange",
            "red"
          ]
        }
      },
      {
        "line": 5,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "green"
        }
      },
      {
        "line": 6,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "result[10]": [
            "orange",
            "green"
          ],
          "result[11]": [
            "orange",
            "green",
            "red"
          ]
        }
      },
      {
        "line": 5,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "el[1]": "black"
        }
      },
      {
        "line": 6,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "result[13]": [
            "orange",
            "black",
            "red"
          ],
          "result[12]": [
            "orange",
            "black"
          ]
        }
      },
      {
        "line": 5,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "el[2]": "green"
        }
      },
      {
        "line": 6,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "result[15]": [
            "orange",
            "black",
            "green",
            "red"
          ],
          "result[14]": [
            "orange",
            "black",
            "green"
          ]
        }
      },
      {
        "line": 7,
        "step": 32,
        "action": "RETURN",
        "vars": {
          "__return__": [
            [],
            [
              "red"
            ],
            [
              "green"
            ],
            [
              "green",
              "red"
            ],
            [
              "black"
            ],
            [
              "black",
              "red"
            ],
            [
              "black",
              "green"
            ],
            [
              "black",
              "green",
              "red"
            ],
            [
              "orange"
            ],
            [
              "orange",
              "red"
            ],
            [
              "orange",
              "green"
            ],
            [
              "orange",
              "green",
              "red"
            ],
            [
              "orange",
              "black"
            ],
            [
              "orange",
              "black",
              "red"
            ],
            [
              "orange",
              "black",
              "green"
            ],
            [
              "orange",
              "black",
              "green",
              "red"
            ]
          ]
        }
      }
    ],
    "id": 1376,
    "task_id": 462,
    "exist_function": [
      "combinations_list"
    ]
  },
  {
    "code": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far",
    "entry_point": "max_subarray_product",
    "input": [
      [
        1,
        -2,
        -3,
        0,
        7,
        -8,
        -2
      ]
    ],
    "output": 112,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "arr": [
            1,
            -2,
            -3,
            0,
            7,
            -8,
            -2
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "n": 7
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 1
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "min_ending_here": 1
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "flag": 0
        }
      },
      {
        "line": 7,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 11,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "flag": 1
        }
      },
      {
        "line": 20,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 1
        }
      },
      {
        "line": 7,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 16,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "temp": 1
        }
      },
      {
        "line": 18,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "min_ending_here": -2
        }
      },
      {
        "line": 7,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 17,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 6
        }
      },
      {
        "line": 18,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "min_ending_here": -3
        }
      },
      {
        "line": 20,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 6
        }
      },
      {
        "line": 7,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 13,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 1
        }
      },
      {
        "line": 14,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "min_ending_here": 1
        }
      },
      {
        "line": 7,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 9,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 7
        }
      },
      {
        "line": 20,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 7
        }
      },
      {
        "line": 7,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 16,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "temp": 7
        }
      },
      {
        "line": 17,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 1
        }
      },
      {
        "line": 18,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "min_ending_here": -56
        }
      },
      {
        "line": 7,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 16,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "temp": 1
        }
      },
      {
        "line": 17,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 112
        }
      },
      {
        "line": 18,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "min_ending_here": -2
        }
      },
      {
        "line": 20,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 112
        }
      },
      {
        "line": 23,
        "step": 32,
        "action": "RETURN",
        "vars": {
          "__return__": 112
        }
      }
    ],
    "id": 1377,
    "task_id": 463,
    "exist_function": [
      "max_subarray_product"
    ]
  },
  {
    "code": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far",
    "entry_point": "max_subarray_product",
    "input": [
      [
        6,
        -3,
        -10,
        0,
        2
      ]
    ],
    "output": 180,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "arr": [
            6,
            -3,
            -10,
            0,
            2
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "n": 5
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 1
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "min_ending_here": 1
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "flag": 0
        }
      },
      {
        "line": 7,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 9,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 6
        }
      },
      {
        "line": 11,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "flag": 1
        }
      },
      {
        "line": 20,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 6
        }
      },
      {
        "line": 7,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 16,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "temp": 6
        }
      },
      {
        "line": 17,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 1
        }
      },
      {
        "line": 18,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "min_ending_here": -18
        }
      },
      {
        "line": 7,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 16,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "temp": 1
        }
      },
      {
        "line": 17,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 180
        }
      },
      {
        "line": 18,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "min_ending_here": -10
        }
      },
      {
        "line": 20,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 180
        }
      },
      {
        "line": 7,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 13,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 1
        }
      },
      {
        "line": 14,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "min_ending_here": 1
        }
      },
      {
        "line": 7,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 9,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 2
        }
      },
      {
        "line": 23,
        "step": 25,
        "action": "RETURN",
        "vars": {
          "__return__": 180
        }
      }
    ],
    "id": 1378,
    "task_id": 463,
    "exist_function": [
      "max_subarray_product"
    ]
  },
  {
    "code": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far",
    "entry_point": "max_subarray_product",
    "input": [
      [
        -2,
        -40,
        0,
        -2,
        -3
      ]
    ],
    "output": 80,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "arr": [
            -2,
            -40,
            0,
            -2,
            -3
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "n": 5
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 1
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "min_ending_here": 1
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "flag": 0
        }
      },
      {
        "line": 7,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 16,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "temp": 1
        }
      },
      {
        "line": 18,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "min_ending_here": -2
        }
      },
      {
        "line": 20,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 1
        }
      },
      {
        "line": 7,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 17,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 80
        }
      },
      {
        "line": 18,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "min_ending_here": -40
        }
      },
      {
        "line": 20,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 80
        }
      },
      {
        "line": 7,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 13,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 1
        }
      },
      {
        "line": 14,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "min_ending_here": 1
        }
      },
      {
        "line": 7,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 18,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "min_ending_here": -2
        }
      },
      {
        "line": 7,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 17,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "max_ending_here": 6
        }
      },
      {
        "line": 18,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "min_ending_here": -3
        }
      },
      {
        "line": 23,
        "step": 23,
        "action": "RETURN",
        "vars": {
          "__return__": 80
        }
      }
    ],
    "id": 1379,
    "task_id": 463,
    "exist_function": [
      "max_subarray_product"
    ]
  },
  {
    "code": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)",
    "entry_point": "decimal_to_Octal",
    "input": [
      10
    ],
    "output": 12,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "deciNum": 10
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "octalNum": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "countval": 1
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "dNo": 10
        }
      },
      {
        "line": 6,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "remainder": 2
        }
      },
      {
        "line": 7,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "octalNum": 2
        }
      },
      {
        "line": 8,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "countval": 10
        }
      },
      {
        "line": 9,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "deciNum": 1
        }
      },
      {
        "line": 6,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "remainder": 1
        }
      },
      {
        "line": 7,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "octalNum": 12
        }
      },
      {
        "line": 8,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "countval": 100
        }
      },
      {
        "line": 9,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "deciNum": 0
        }
      },
      {
        "line": 10,
        "step": 13,
        "action": "RETURN",
        "vars": {
          "__return__": 12
        }
      }
    ],
    "id": 1389,
    "task_id": 467,
    "exist_function": [
      "decimal_to_Octal"
    ]
  },
  {
    "code": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)",
    "entry_point": "decimal_to_Octal",
    "input": [
      2
    ],
    "output": 2,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "deciNum": 2
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "octalNum": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "countval": 1
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "dNo": 2
        }
      },
      {
        "line": 6,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "remainder": 2
        }
      },
      {
        "line": 7,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "octalNum": 2
        }
      },
      {
        "line": 8,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "countval": 10
        }
      },
      {
        "line": 9,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "deciNum": 0
        }
      },
      {
        "line": 10,
        "step": 9,
        "action": "RETURN",
        "vars": {
          "__return__": 2
        }
      }
    ],
    "id": 1390,
    "task_id": 467,
    "exist_function": [
      "decimal_to_Octal"
    ]
  },
  {
    "code": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)",
    "entry_point": "decimal_to_Octal",
    "input": [
      33
    ],
    "output": 41,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "deciNum": 33
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "octalNum": 0
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "countval": 1
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "dNo": 33
        }
      },
      {
        "line": 6,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "remainder": 1
        }
      },
      {
        "line": 7,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "octalNum": 1
        }
      },
      {
        "line": 8,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "countval": 10
        }
      },
      {
        "line": 9,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "deciNum": 4
        }
      },
      {
        "line": 6,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "remainder": 4
        }
      },
      {
        "line": 7,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "octalNum": 41
        }
      },
      {
        "line": 8,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "countval": 100
        }
      },
      {
        "line": 9,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "deciNum": 0
        }
      },
      {
        "line": 10,
        "step": 13,
        "action": "RETURN",
        "vars": {
          "__return__": 41
        }
      }
    ],
    "id": 1391,
    "task_id": 467,
    "exist_function": [
      "decimal_to_Octal"
    ]
  },
  {
    "code": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)",
    "entry_point": "max_product",
    "input": [
      [
        3,
        100,
        4,
        5,
        150,
        6
      ],
      6
    ],
    "output": 45000,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "arr": [
            3,
            100,
            4,
            5,
            150,
            6
          ],
          "n": 6
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "mpis": [
            0,
            0,
            0,
            0,
            0,
            0
          ]
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "mpis[0]": 3
        }
      },
      {
        "line": 3,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 4,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "mpis[1]": 100
        }
      },
      {
        "line": 3,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 4,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "mpis[2]": 4
        }
      },
      {
        "line": 3,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 4,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "mpis[3]": 5
        }
      },
      {
        "line": 3,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 4,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "mpis[4]": 150
        }
      },
      {
        "line": 3,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 4,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "mpis[5]": 6
        }
      },
      {
        "line": 5,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 6,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 9,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "mpis[1]": 300
        }
      },
      {
        "line": 5,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 9,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "mpis[2]": 12
        }
      },
      {
        "line": 6,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 5,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 6,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 9,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "mpis[3]": 15
        }
      },
      {
        "line": 6,
        "step": "24~25",
        "action": "LOOP",
        "vars": {
          "j": "1→2"
        }
      },
      {
        "line": 9,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "mpis[3]": 60
        }
      },
      {
        "line": 5,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 6,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 9,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "mpis[4]": 450
        }
      },
      {
        "line": 6,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "mpis[4]": 45000
        }
      },
      {
        "line": 6,
        "step": "32~33",
        "action": "LOOP",
        "vars": {
          "j": "2→3"
        }
      },
      {
        "line": 5,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 6,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 9,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "mpis[5]": 18
        }
      },
      {
        "line": 6,
        "step": "37~38",
        "action": "LOOP",
        "vars": {
          "j": "1→2"
        }
      },
      {
        "line": 9,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "mpis[5]": 72
        }
      },
      {
        "line": 6,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 9,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "mpis[5]": 360
        }
      },
      {
        "line": 6,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 10,
        "step": 43,
        "action": "RETURN",
        "vars": {
          "__return__": 45000
        }
      }
    ],
    "id": 1392,
    "task_id": 468,
    "exist_function": [
      "max_product"
    ]
  },
  {
    "code": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)",
    "entry_point": "max_product",
    "input": [
      [
        4,
        42,
        55,
        68,
        80
      ],
      5
    ],
    "output": 50265600,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "arr": [
            4,
            42,
            55,
            68,
            80
          ],
          "n": 5
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "mpis": [
            0,
            0,
            0,
            0,
            0
          ]
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "mpis[0]": 4
        }
      },
      {
        "line": 3,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 4,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "mpis[1]": 42
        }
      },
      {
        "line": 3,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 4,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "mpis[2]": 55
        }
      },
      {
        "line": 3,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 4,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "mpis[3]": 68
        }
      },
      {
        "line": 3,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 4,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "mpis[4]": 80
        }
      },
      {
        "line": 5,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 6,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 9,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "mpis[1]": 168
        }
      },
      {
        "line": 5,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 9,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "mpis[2]": 220
        }
      },
      {
        "line": 6,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "mpis[2]": 9240
        }
      },
      {
        "line": 5,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 6,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 9,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "mpis[3]": 272
        }
      },
      {
        "line": 6,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "mpis[3]": 11424
        }
      },
      {
        "line": 6,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 9,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "mpis[3]": 628320
        }
      },
      {
        "line": 5,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 6,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 9,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "mpis[4]": 320
        }
      },
      {
        "line": 6,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "mpis[4]": 13440
        }
      },
      {
        "line": 6,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 9,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "mpis[4]": 739200
        }
      },
      {
        "line": 6,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 9,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "mpis[4]": 50265600
        }
      },
      {
        "line": 10,
        "step": 36,
        "action": "RETURN",
        "vars": {
          "__return__": 50265600
        }
      }
    ],
    "id": 1393,
    "task_id": 468,
    "exist_function": [
      "max_product"
    ]
  },
  {
    "code": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)",
    "entry_point": "max_product",
    "input": [
      [
        10,
        22,
        9,
        33,
        21,
        50,
        41,
        60
      ],
      8
    ],
    "output": 21780000,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "arr": [
            10,
            22,
            9,
            33,
            21,
            50,
            41,
            60
          ],
          "n": 8
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "mpis": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "mpis[0]": 10
        }
      },
      {
        "line": 3,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 4,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "mpis[1]": 22
        }
      },
      {
        "line": 3,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 4,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "mpis[2]": 9
        }
      },
      {
        "line": 3,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 4,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "mpis[3]": 33
        }
      },
      {
        "line": 3,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 4,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "mpis[4]": 21
        }
      },
      {
        "line": 3,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 4,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "mpis[5]": 50
        }
      },
      {
        "line": 3,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 4,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "mpis[6]": 41
        }
      },
      {
        "line": 3,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "i": 7
        }
      },
      {
        "line": 4,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "mpis[7]": 60
        }
      },
      {
        "line": 5,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 6,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 9,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "mpis[1]": 220
        }
      },
      {
        "line": 5,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 6,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 5,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 6,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 9,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "mpis[3]": 330
        }
      },
      {
        "line": 6,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "mpis[3]": 7260
        }
      },
      {
        "line": 6,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 5,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 6,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 9,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "mpis[4]": 210
        }
      },
      {
        "line": 6,
        "step": "33~35",
        "action": "LOOP",
        "vars": {
          "j": "1→3"
        }
      },
      {
        "line": 5,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 6,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 9,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "mpis[5]": 500
        }
      },
      {
        "line": 6,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "mpis[5]": 11000
        }
      },
      {
        "line": 6,
        "step": "41~42",
        "action": "LOOP",
        "vars": {
          "j": "2→3"
        }
      },
      {
        "line": 9,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "mpis[5]": 363000
        }
      },
      {
        "line": 6,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 5,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "i": 6
        }
      },
      {
        "line": 6,
        "step": 46,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 9,
        "step": 47,
        "action": "EXECUTE",
        "vars": {
          "mpis[6]": 410
        }
      },
      {
        "line": 6,
        "step": 48,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 49,
        "action": "EXECUTE",
        "vars": {
          "mpis[6]": 9020
        }
      },
      {
        "line": 6,
        "step": "50~51",
        "action": "LOOP",
        "vars": {
          "j": "2→3"
        }
      },
      {
        "line": 9,
        "step": 52,
        "action": "EXECUTE",
        "vars": {
          "mpis[6]": 297660
        }
      },
      {
        "line": 6,
        "step": "53~54",
        "action": "LOOP",
        "vars": {
          "j": "4→5"
        }
      },
      {
        "line": 5,
        "step": 55,
        "action": "EXECUTE",
        "vars": {
          "i": 7
        }
      },
      {
        "line": 6,
        "step": 56,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 9,
        "step": 57,
        "action": "EXECUTE",
        "vars": {
          "mpis[7]": 600
        }
      },
      {
        "line": 6,
        "step": 58,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 59,
        "action": "EXECUTE",
        "vars": {
          "mpis[7]": 13200
        }
      },
      {
        "line": 6,
        "step": "60~61",
        "action": "LOOP",
        "vars": {
          "j": "2→3"
        }
      },
      {
        "line": 9,
        "step": 62,
        "action": "EXECUTE",
        "vars": {
          "mpis[7]": 435600
        }
      },
      {
        "line": 6,
        "step": "63~64",
        "action": "LOOP",
        "vars": {
          "j": "4→5"
        }
      },
      {
        "line": 9,
        "step": 65,
        "action": "EXECUTE",
        "vars": {
          "mpis[7]": 21780000
        }
      },
      {
        "line": 6,
        "step": 66,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 10,
        "step": 67,
        "action": "RETURN",
        "vars": {
          "__return__": 21780000
        }
      }
    ],
    "id": 1394,
    "task_id": 468,
    "exist_function": [
      "max_product"
    ]
  },
  {
    "code": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]",
    "entry_point": "max_profit",
    "input": [
      [
        1,
        5,
        2,
        3,
        7,
        6,
        4,
        5
      ],
      3
    ],
    "output": 10,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "price": [
            1,
            5,
            2,
            3,
            7,
            6,
            4,
            5
          ],
          "k": 3
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "n": 8
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "final_profit": [
            [
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null
            ],
            [
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null
            ],
            [
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null
            ],
            [
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null
            ]
          ]
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 7,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "final_profit[0][0]": 0
        }
      },
      {
        "line": 5,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 7,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "final_profit[0][1]": 0
        }
      },
      {
        "line": 5,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 7,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "final_profit[0][2]": 0
        }
      },
      {
        "line": 5,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 7,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "final_profit[0][3]": 0
        }
      },
      {
        "line": 5,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 7,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "final_profit[0][4]": 0
        }
      },
      {
        "line": 5,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 7,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "final_profit[0][5]": 0
        }
      },
      {
        "line": 5,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 7,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "final_profit[0][6]": 0
        }
      },
      {
        "line": 5,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "j": 7
        }
      },
      {
        "line": 7,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "final_profit[0][7]": 0
        }
      },
      {
        "line": 4,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 5,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 7,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "final_profit[1][0]": 0
        }
      },
      {
        "line": 5,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 4
        }
      },
      {
        "line": 13,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 4
        }
      },
      {
        "line": 14,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "final_profit[1][1]": 4
        }
      },
      {
        "line": 5,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 9,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 11,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 1
        }
      },
      {
        "line": 13,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 1
        }
      },
      {
        "line": 10,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "x": 1
        }
      },
      {
        "line": 11,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -3
        }
      },
      {
        "line": 14,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "final_profit[1][2]": 4
        }
      },
      {
        "line": 5,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 9,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 2
        }
      },
      {
        "line": 13,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 2
        }
      },
      {
        "line": 10,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "x": 1
        }
      },
      {
        "line": 11,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -2
        }
      },
      {
        "line": 10,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "x": 2
        }
      },
      {
        "line": 11,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 1
        }
      },
      {
        "line": 14,
        "step": 46,
        "action": "EXECUTE",
        "vars": {
          "final_profit[1][3]": 4
        }
      },
      {
        "line": 5,
        "step": 47,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 9,
        "step": 48,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 49,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 50,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 6
        }
      },
      {
        "line": 13,
        "step": 51,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 6
        }
      },
      {
        "line": 10,
        "step": 52,
        "action": "EXECUTE",
        "vars": {
          "x": 1
        }
      },
      {
        "line": 11,
        "step": 53,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 2
        }
      },
      {
        "line": 10,
        "step": 54,
        "action": "EXECUTE",
        "vars": {
          "x": 2
        }
      },
      {
        "line": 11,
        "step": 55,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 5
        }
      },
      {
        "line": 10,
        "step": 56,
        "action": "EXECUTE",
        "vars": {
          "x": 3
        }
      },
      {
        "line": 11,
        "step": 57,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 4
        }
      },
      {
        "line": 14,
        "step": 58,
        "action": "EXECUTE",
        "vars": {
          "final_profit[1][4]": 6
        }
      },
      {
        "line": 5,
        "step": 59,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 9,
        "step": 60,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 61,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 62,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 5
        }
      },
      {
        "line": 13,
        "step": 63,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 5
        }
      },
      {
        "line": 10,
        "step": 64,
        "action": "EXECUTE",
        "vars": {
          "x": 1
        }
      },
      {
        "line": 11,
        "step": 65,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 1
        }
      },
      {
        "line": 10,
        "step": 66,
        "action": "EXECUTE",
        "vars": {
          "x": 2
        }
      },
      {
        "line": 11,
        "step": 67,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 4
        }
      },
      {
        "line": 10,
        "step": 68,
        "action": "EXECUTE",
        "vars": {
          "x": 3
        }
      },
      {
        "line": 11,
        "step": 69,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 3
        }
      },
      {
        "line": 10,
        "step": 70,
        "action": "EXECUTE",
        "vars": {
          "x": 4
        }
      },
      {
        "line": 11,
        "step": 71,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -1
        }
      },
      {
        "line": 14,
        "step": 72,
        "action": "EXECUTE",
        "vars": {
          "final_profit[1][5]": 6
        }
      },
      {
        "line": 5,
        "step": 73,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 9,
        "step": 74,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 75,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 76,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 3
        }
      },
      {
        "line": 13,
        "step": 77,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 3
        }
      },
      {
        "line": 10,
        "step": 78,
        "action": "EXECUTE",
        "vars": {
          "x": 1
        }
      },
      {
        "line": 11,
        "step": 79,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -1
        }
      },
      {
        "line": 10,
        "step": 80,
        "action": "EXECUTE",
        "vars": {
          "x": 2
        }
      },
      {
        "line": 11,
        "step": 81,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 2
        }
      },
      {
        "line": 10,
        "step": 82,
        "action": "EXECUTE",
        "vars": {
          "x": 3
        }
      },
      {
        "line": 11,
        "step": 83,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 1
        }
      },
      {
        "line": 10,
        "step": 84,
        "action": "EXECUTE",
        "vars": {
          "x": 4
        }
      },
      {
        "line": 11,
        "step": 85,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -3
        }
      },
      {
        "line": 10,
        "step": 86,
        "action": "EXECUTE",
        "vars": {
          "x": 5
        }
      },
      {
        "line": 11,
        "step": 87,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -2
        }
      },
      {
        "line": 14,
        "step": 88,
        "action": "EXECUTE",
        "vars": {
          "final_profit[1][6]": 6
        }
      },
      {
        "line": 5,
        "step": 89,
        "action": "EXECUTE",
        "vars": {
          "j": 7
        }
      },
      {
        "line": 9,
        "step": 90,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 91,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 92,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 4
        }
      },
      {
        "line": 13,
        "step": 93,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 4
        }
      },
      {
        "line": 10,
        "step": 94,
        "action": "EXECUTE",
        "vars": {
          "x": 1
        }
      },
      {
        "line": 11,
        "step": 95,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 0
        }
      },
      {
        "line": 10,
        "step": 96,
        "action": "EXECUTE",
        "vars": {
          "x": 2
        }
      },
      {
        "line": 11,
        "step": 97,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 3
        }
      },
      {
        "line": 10,
        "step": 98,
        "action": "EXECUTE",
        "vars": {
          "x": 3
        }
      },
      {
        "line": 11,
        "step": 99,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 2
        }
      },
      {
        "line": 10,
        "step": 100,
        "action": "EXECUTE",
        "vars": {
          "x": 4
        }
      },
      {
        "line": 11,
        "step": 101,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -2
        }
      },
      {
        "line": 10,
        "step": 102,
        "action": "EXECUTE",
        "vars": {
          "x": 5
        }
      },
      {
        "line": 11,
        "step": 103,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -1
        }
      },
      {
        "line": 10,
        "step": 104,
        "action": "EXECUTE",
        "vars": {
          "x": 6
        }
      },
      {
        "line": 11,
        "step": 105,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 1
        }
      },
      {
        "line": 14,
        "step": 106,
        "action": "EXECUTE",
        "vars": {
          "final_profit[1][7]": 6
        }
      },
      {
        "line": 4,
        "step": 107,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 5,
        "step": 108,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 7,
        "step": 109,
        "action": "EXECUTE",
        "vars": {
          "final_profit[2][0]": 0
        }
      },
      {
        "line": 5,
        "step": 110,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 111,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 112,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 113,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 4
        }
      },
      {
        "line": 13,
        "step": 114,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 4
        }
      },
      {
        "line": 14,
        "step": 115,
        "action": "EXECUTE",
        "vars": {
          "final_profit[2][1]": 4
        }
      },
      {
        "line": 5,
        "step": 116,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 9,
        "step": 117,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 11,
        "step": 118,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 1
        }
      },
      {
        "line": 13,
        "step": 119,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 1
        }
      },
      {
        "line": 10,
        "step": 120,
        "action": "EXECUTE",
        "vars": {
          "x": 1
        }
      },
      {
        "line": 14,
        "step": 121,
        "action": "EXECUTE",
        "vars": {
          "final_profit[2][2]": 4
        }
      },
      {
        "line": 5,
        "step": 122,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 9,
        "step": 123,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 124,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 125,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 2
        }
      },
      {
        "line": 13,
        "step": 126,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 2
        }
      },
      {
        "line": 10,
        "step": "127~128",
        "action": "LOOP",
        "vars": {
          "x": "1→2"
        }
      },
      {
        "line": 11,
        "step": 129,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 5
        }
      },
      {
        "line": 13,
        "step": 130,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 5
        }
      },
      {
        "line": 14,
        "step": 131,
        "action": "EXECUTE",
        "vars": {
          "final_profit[2][3]": 5
        }
      },
      {
        "line": 5,
        "step": 132,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 9,
        "step": 133,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 134,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 135,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 6
        }
      },
      {
        "line": 13,
        "step": 136,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 6
        }
      },
      {
        "line": 10,
        "step": "137~138",
        "action": "LOOP",
        "vars": {
          "x": "1→2"
        }
      },
      {
        "line": 11,
        "step": 139,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 9
        }
      },
      {
        "line": 13,
        "step": 140,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 9
        }
      },
      {
        "line": 10,
        "step": 141,
        "action": "EXECUTE",
        "vars": {
          "x": 3
        }
      },
      {
        "line": 11,
        "step": 142,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 8
        }
      },
      {
        "line": 14,
        "step": 143,
        "action": "EXECUTE",
        "vars": {
          "final_profit[2][4]": 9
        }
      },
      {
        "line": 5,
        "step": 144,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 9,
        "step": 145,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 146,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 147,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 5
        }
      },
      {
        "line": 13,
        "step": 148,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 5
        }
      },
      {
        "line": 10,
        "step": "149~150",
        "action": "LOOP",
        "vars": {
          "x": "1→2"
        }
      },
      {
        "line": 11,
        "step": 151,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 8
        }
      },
      {
        "line": 13,
        "step": 152,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 8
        }
      },
      {
        "line": 10,
        "step": 153,
        "action": "EXECUTE",
        "vars": {
          "x": 3
        }
      },
      {
        "line": 11,
        "step": 154,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 7
        }
      },
      {
        "line": 10,
        "step": 155,
        "action": "EXECUTE",
        "vars": {
          "x": 4
        }
      },
      {
        "line": 11,
        "step": 156,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 5
        }
      },
      {
        "line": 14,
        "step": 157,
        "action": "EXECUTE",
        "vars": {
          "final_profit[2][5]": 9
        }
      },
      {
        "line": 5,
        "step": 158,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 9,
        "step": 159,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 160,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 161,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 3
        }
      },
      {
        "line": 13,
        "step": 162,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 3
        }
      },
      {
        "line": 10,
        "step": "163~164",
        "action": "LOOP",
        "vars": {
          "x": "1→2"
        }
      },
      {
        "line": 11,
        "step": 165,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 6
        }
      },
      {
        "line": 13,
        "step": 166,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 6
        }
      },
      {
        "line": 10,
        "step": 167,
        "action": "EXECUTE",
        "vars": {
          "x": 3
        }
      },
      {
        "line": 11,
        "step": 168,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 5
        }
      },
      {
        "line": 10,
        "step": 169,
        "action": "EXECUTE",
        "vars": {
          "x": 4
        }
      },
      {
        "line": 11,
        "step": 170,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 3
        }
      },
      {
        "line": 10,
        "step": 171,
        "action": "EXECUTE",
        "vars": {
          "x": 5
        }
      },
      {
        "line": 11,
        "step": 172,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 4
        }
      },
      {
        "line": 14,
        "step": 173,
        "action": "EXECUTE",
        "vars": {
          "final_profit[2][6]": 9
        }
      },
      {
        "line": 5,
        "step": 174,
        "action": "EXECUTE",
        "vars": {
          "j": 7
        }
      },
      {
        "line": 9,
        "step": 175,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 176,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 13,
        "step": 177,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 4
        }
      },
      {
        "line": 10,
        "step": "178~179",
        "action": "LOOP",
        "vars": {
          "x": "1→2"
        }
      },
      {
        "line": 11,
        "step": 180,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 7
        }
      },
      {
        "line": 13,
        "step": 181,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 7
        }
      },
      {
        "line": 10,
        "step": 182,
        "action": "EXECUTE",
        "vars": {
          "x": 3
        }
      },
      {
        "line": 11,
        "step": 183,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 6
        }
      },
      {
        "line": 10,
        "step": 184,
        "action": "EXECUTE",
        "vars": {
          "x": 4
        }
      },
      {
        "line": 11,
        "step": 185,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 4
        }
      },
      {
        "line": 10,
        "step": 186,
        "action": "EXECUTE",
        "vars": {
          "x": 5
        }
      },
      {
        "line": 11,
        "step": 187,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 5
        }
      },
      {
        "line": 10,
        "step": 188,
        "action": "EXECUTE",
        "vars": {
          "x": 6
        }
      },
      {
        "line": 11,
        "step": 189,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 7
        }
      },
      {
        "line": 14,
        "step": 190,
        "action": "EXECUTE",
        "vars": {
          "final_profit[2][7]": 9
        }
      },
      {
        "line": 4,
        "step": 191,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 5,
        "step": 192,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 7,
        "step": 193,
        "action": "EXECUTE",
        "vars": {
          "final_profit[3][0]": 0
        }
      },
      {
        "line": 5,
        "step": 194,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 195,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 196,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 197,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 4
        }
      },
      {
        "line": 13,
        "step": 198,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 4
        }
      },
      {
        "line": 14,
        "step": 199,
        "action": "EXECUTE",
        "vars": {
          "final_profit[3][1]": 4
        }
      },
      {
        "line": 5,
        "step": 200,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 9,
        "step": 201,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 11,
        "step": 202,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 1
        }
      },
      {
        "line": 13,
        "step": 203,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 1
        }
      },
      {
        "line": 10,
        "step": 204,
        "action": "EXECUTE",
        "vars": {
          "x": 1
        }
      },
      {
        "line": 14,
        "step": 205,
        "action": "EXECUTE",
        "vars": {
          "final_profit[3][2]": 4
        }
      },
      {
        "line": 5,
        "step": 206,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 9,
        "step": 207,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 208,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 209,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 2
        }
      },
      {
        "line": 13,
        "step": 210,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 2
        }
      },
      {
        "line": 10,
        "step": "211~212",
        "action": "LOOP",
        "vars": {
          "x": "1→2"
        }
      },
      {
        "line": 11,
        "step": 213,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 5
        }
      },
      {
        "line": 13,
        "step": 214,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 5
        }
      },
      {
        "line": 14,
        "step": 215,
        "action": "EXECUTE",
        "vars": {
          "final_profit[3][3]": 5
        }
      },
      {
        "line": 5,
        "step": 216,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 9,
        "step": 217,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 218,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 219,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 6
        }
      },
      {
        "line": 13,
        "step": 220,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 6
        }
      },
      {
        "line": 10,
        "step": "221~222",
        "action": "LOOP",
        "vars": {
          "x": "1→2"
        }
      },
      {
        "line": 11,
        "step": 223,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 9
        }
      },
      {
        "line": 13,
        "step": 224,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 9
        }
      },
      {
        "line": 10,
        "step": 225,
        "action": "EXECUTE",
        "vars": {
          "x": 3
        }
      },
      {
        "line": 14,
        "step": 226,
        "action": "EXECUTE",
        "vars": {
          "final_profit[3][4]": 9
        }
      },
      {
        "line": 5,
        "step": 227,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 9,
        "step": 228,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 229,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 230,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 5
        }
      },
      {
        "line": 13,
        "step": 231,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 5
        }
      },
      {
        "line": 10,
        "step": "232~233",
        "action": "LOOP",
        "vars": {
          "x": "1→2"
        }
      },
      {
        "line": 11,
        "step": 234,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 8
        }
      },
      {
        "line": 13,
        "step": 235,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 8
        }
      },
      {
        "line": 10,
        "step": "236~237",
        "action": "LOOP",
        "vars": {
          "x": "3→4"
        }
      },
      {
        "line": 14,
        "step": 238,
        "action": "EXECUTE",
        "vars": {
          "final_profit[3][5]": 9
        }
      },
      {
        "line": 5,
        "step": 239,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 9,
        "step": 240,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 241,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 242,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 3
        }
      },
      {
        "line": 13,
        "step": 243,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 3
        }
      },
      {
        "line": 10,
        "step": "244~245",
        "action": "LOOP",
        "vars": {
          "x": "1→2"
        }
      },
      {
        "line": 11,
        "step": 246,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 6
        }
      },
      {
        "line": 13,
        "step": 247,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 6
        }
      },
      {
        "line": 10,
        "step": "248~250",
        "action": "LOOP",
        "vars": {
          "x": "3→5"
        }
      },
      {
        "line": 11,
        "step": 251,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 7
        }
      },
      {
        "line": 13,
        "step": 252,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 7
        }
      },
      {
        "line": 14,
        "step": 253,
        "action": "EXECUTE",
        "vars": {
          "final_profit[3][6]": 9
        }
      },
      {
        "line": 5,
        "step": 254,
        "action": "EXECUTE",
        "vars": {
          "j": 7
        }
      },
      {
        "line": 9,
        "step": 255,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 256,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 257,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 4
        }
      },
      {
        "line": 13,
        "step": 258,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 4
        }
      },
      {
        "line": 10,
        "step": "259~260",
        "action": "LOOP",
        "vars": {
          "x": "1→2"
        }
      },
      {
        "line": 11,
        "step": 261,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 7
        }
      },
      {
        "line": 13,
        "step": 262,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 7
        }
      },
      {
        "line": 10,
        "step": "263~265",
        "action": "LOOP",
        "vars": {
          "x": "3→5"
        }
      },
      {
        "line": 11,
        "step": 266,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 8
        }
      },
      {
        "line": 13,
        "step": 267,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 8
        }
      },
      {
        "line": 10,
        "step": 268,
        "action": "EXECUTE",
        "vars": {
          "x": 6
        }
      },
      {
        "line": 11,
        "step": 269,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 10
        }
      },
      {
        "line": 13,
        "step": 270,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 10
        }
      },
      {
        "line": 14,
        "step": 271,
        "action": "EXECUTE",
        "vars": {
          "final_profit[3][7]": 10
        }
      },
      {
        "line": 15,
        "step": 272,
        "action": "RETURN",
        "vars": {
          "__return__": 10
        }
      }
    ],
    "id": 1395,
    "task_id": 469,
    "exist_function": [
      "max_profit"
    ]
  },
  {
    "code": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]",
    "entry_point": "max_profit",
    "input": [
      [
        2,
        4,
        7,
        5,
        4,
        3,
        5
      ],
      2
    ],
    "output": 7,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "price": [
            2,
            4,
            7,
            5,
            4,
            3,
            5
          ],
          "k": 2
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "n": 7
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "final_profit": [
            [
              null,
              null,
              null,
              null,
              null,
              null,
              null
            ],
            [
              null,
              null,
              null,
              null,
              null,
              null,
              null
            ],
            [
              null,
              null,
              null,
              null,
              null,
              null,
              null
            ]
          ]
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 7,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "final_profit[0][0]": 0
        }
      },
      {
        "line": 5,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 7,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "final_profit[0][1]": 0
        }
      },
      {
        "line": 5,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 7,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "final_profit[0][2]": 0
        }
      },
      {
        "line": 5,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 7,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "final_profit[0][3]": 0
        }
      },
      {
        "line": 5,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 7,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "final_profit[0][4]": 0
        }
      },
      {
        "line": 5,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 7,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "final_profit[0][5]": 0
        }
      },
      {
        "line": 5,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 7,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "final_profit[0][6]": 0
        }
      },
      {
        "line": 4,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 5,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 7,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "final_profit[1][0]": 0
        }
      },
      {
        "line": 5,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 2
        }
      },
      {
        "line": 13,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 2
        }
      },
      {
        "line": 14,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "final_profit[1][1]": 2
        }
      },
      {
        "line": 5,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 9,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 11,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 5
        }
      },
      {
        "line": 13,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 5
        }
      },
      {
        "line": 10,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "x": 1
        }
      },
      {
        "line": 11,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 3
        }
      },
      {
        "line": 14,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "final_profit[1][2]": 5
        }
      },
      {
        "line": 5,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 9,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 13,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 3
        }
      },
      {
        "line": 10,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "x": 1
        }
      },
      {
        "line": 11,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 1
        }
      },
      {
        "line": 10,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "x": 2
        }
      },
      {
        "line": 11,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -2
        }
      },
      {
        "line": 14,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "final_profit[1][3]": 5
        }
      },
      {
        "line": 5,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 9,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 46,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 47,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 2
        }
      },
      {
        "line": 13,
        "step": 48,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 2
        }
      },
      {
        "line": 10,
        "step": 49,
        "action": "EXECUTE",
        "vars": {
          "x": 1
        }
      },
      {
        "line": 11,
        "step": 50,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 0
        }
      },
      {
        "line": 10,
        "step": 51,
        "action": "EXECUTE",
        "vars": {
          "x": 2
        }
      },
      {
        "line": 11,
        "step": 52,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -3
        }
      },
      {
        "line": 10,
        "step": 53,
        "action": "EXECUTE",
        "vars": {
          "x": 3
        }
      },
      {
        "line": 11,
        "step": 54,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -1
        }
      },
      {
        "line": 14,
        "step": 55,
        "action": "EXECUTE",
        "vars": {
          "final_profit[1][4]": 5
        }
      },
      {
        "line": 5,
        "step": 56,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 9,
        "step": 57,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 58,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 59,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 1
        }
      },
      {
        "line": 13,
        "step": 60,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 1
        }
      },
      {
        "line": 10,
        "step": 61,
        "action": "EXECUTE",
        "vars": {
          "x": 1
        }
      },
      {
        "line": 11,
        "step": 62,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -1
        }
      },
      {
        "line": 10,
        "step": 63,
        "action": "EXECUTE",
        "vars": {
          "x": 2
        }
      },
      {
        "line": 11,
        "step": 64,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -4
        }
      },
      {
        "line": 10,
        "step": 65,
        "action": "EXECUTE",
        "vars": {
          "x": 3
        }
      },
      {
        "line": 11,
        "step": 66,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -2
        }
      },
      {
        "line": 10,
        "step": 67,
        "action": "EXECUTE",
        "vars": {
          "x": 4
        }
      },
      {
        "line": 11,
        "step": 68,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -1
        }
      },
      {
        "line": 14,
        "step": 69,
        "action": "EXECUTE",
        "vars": {
          "final_profit[1][5]": 5
        }
      },
      {
        "line": 5,
        "step": 70,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 9,
        "step": 71,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 72,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 73,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 3
        }
      },
      {
        "line": 13,
        "step": 74,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 3
        }
      },
      {
        "line": 10,
        "step": 75,
        "action": "EXECUTE",
        "vars": {
          "x": 1
        }
      },
      {
        "line": 11,
        "step": 76,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 1
        }
      },
      {
        "line": 10,
        "step": 77,
        "action": "EXECUTE",
        "vars": {
          "x": 2
        }
      },
      {
        "line": 11,
        "step": 78,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -2
        }
      },
      {
        "line": 10,
        "step": 79,
        "action": "EXECUTE",
        "vars": {
          "x": 3
        }
      },
      {
        "line": 11,
        "step": 80,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 0
        }
      },
      {
        "line": 10,
        "step": 81,
        "action": "EXECUTE",
        "vars": {
          "x": 4
        }
      },
      {
        "line": 11,
        "step": 82,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 1
        }
      },
      {
        "line": 10,
        "step": 83,
        "action": "EXECUTE",
        "vars": {
          "x": 5
        }
      },
      {
        "line": 11,
        "step": 84,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 2
        }
      },
      {
        "line": 14,
        "step": 85,
        "action": "EXECUTE",
        "vars": {
          "final_profit[1][6]": 5
        }
      },
      {
        "line": 4,
        "step": 86,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 5,
        "step": 87,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 7,
        "step": 88,
        "action": "EXECUTE",
        "vars": {
          "final_profit[2][0]": 0
        }
      },
      {
        "line": 5,
        "step": 89,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 90,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 91,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 13,
        "step": 92,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 2
        }
      },
      {
        "line": 14,
        "step": 93,
        "action": "EXECUTE",
        "vars": {
          "final_profit[2][1]": 2
        }
      },
      {
        "line": 5,
        "step": 94,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 9,
        "step": 95,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 11,
        "step": 96,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 5
        }
      },
      {
        "line": 13,
        "step": 97,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 5
        }
      },
      {
        "line": 10,
        "step": 98,
        "action": "EXECUTE",
        "vars": {
          "x": 1
        }
      },
      {
        "line": 14,
        "step": 99,
        "action": "EXECUTE",
        "vars": {
          "final_profit[2][2]": 5
        }
      },
      {
        "line": 5,
        "step": 100,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 9,
        "step": 101,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 102,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 103,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 3
        }
      },
      {
        "line": 13,
        "step": 104,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 3
        }
      },
      {
        "line": 10,
        "step": "105~106",
        "action": "LOOP",
        "vars": {
          "x": "1→2"
        }
      },
      {
        "line": 14,
        "step": 107,
        "action": "EXECUTE",
        "vars": {
          "final_profit[2][3]": 5
        }
      },
      {
        "line": 5,
        "step": 108,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 9,
        "step": 109,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 110,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 111,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 2
        }
      },
      {
        "line": 13,
        "step": 112,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 2
        }
      },
      {
        "line": 10,
        "step": "113~115",
        "action": "LOOP",
        "vars": {
          "x": "1→3"
        }
      },
      {
        "line": 11,
        "step": 116,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 4
        }
      },
      {
        "line": 13,
        "step": 117,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 4
        }
      },
      {
        "line": 14,
        "step": 118,
        "action": "EXECUTE",
        "vars": {
          "final_profit[2][4]": 5
        }
      },
      {
        "line": 5,
        "step": 119,
        "action": "EXECUTE",
        "vars": {
          "j": 5
        }
      },
      {
        "line": 9,
        "step": 120,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 121,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 122,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 1
        }
      },
      {
        "line": 13,
        "step": 123,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 1
        }
      },
      {
        "line": 10,
        "step": "124~126",
        "action": "LOOP",
        "vars": {
          "x": "1→3"
        }
      },
      {
        "line": 11,
        "step": 127,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 3
        }
      },
      {
        "line": 13,
        "step": 128,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 3
        }
      },
      {
        "line": 10,
        "step": 129,
        "action": "EXECUTE",
        "vars": {
          "x": 4
        }
      },
      {
        "line": 11,
        "step": 130,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 4
        }
      },
      {
        "line": 13,
        "step": 131,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 4
        }
      },
      {
        "line": 14,
        "step": 132,
        "action": "EXECUTE",
        "vars": {
          "final_profit[2][5]": 5
        }
      },
      {
        "line": 5,
        "step": 133,
        "action": "EXECUTE",
        "vars": {
          "j": 6
        }
      },
      {
        "line": 9,
        "step": 134,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 135,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 136,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 3
        }
      },
      {
        "line": 13,
        "step": 137,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 3
        }
      },
      {
        "line": 10,
        "step": "138~140",
        "action": "LOOP",
        "vars": {
          "x": "1→3"
        }
      },
      {
        "line": 11,
        "step": 141,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 5
        }
      },
      {
        "line": 13,
        "step": 142,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 5
        }
      },
      {
        "line": 10,
        "step": 143,
        "action": "EXECUTE",
        "vars": {
          "x": 4
        }
      },
      {
        "line": 11,
        "step": 144,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 6
        }
      },
      {
        "line": 13,
        "step": 145,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 6
        }
      },
      {
        "line": 10,
        "step": 146,
        "action": "EXECUTE",
        "vars": {
          "x": 5
        }
      },
      {
        "line": 11,
        "step": 147,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 7
        }
      },
      {
        "line": 13,
        "step": 148,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 7
        }
      },
      {
        "line": 14,
        "step": 149,
        "action": "EXECUTE",
        "vars": {
          "final_profit[2][6]": 7
        }
      },
      {
        "line": 15,
        "step": 150,
        "action": "RETURN",
        "vars": {
          "__return__": 7
        }
      }
    ],
    "id": 1396,
    "task_id": 469,
    "exist_function": [
      "max_profit"
    ]
  },
  {
    "code": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]",
    "entry_point": "max_profit",
    "input": [
      [
        10,
        6,
        8,
        4,
        2
      ],
      2
    ],
    "output": 2,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "price": [
            10,
            6,
            8,
            4,
            2
          ],
          "k": 2
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "n": 5
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "final_profit": [
            [
              null,
              null,
              null,
              null,
              null
            ],
            [
              null,
              null,
              null,
              null,
              null
            ],
            [
              null,
              null,
              null,
              null,
              null
            ]
          ]
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 7,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "final_profit[0][0]": 0
        }
      },
      {
        "line": 5,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 7,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "final_profit[0][1]": 0
        }
      },
      {
        "line": 5,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 7,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "final_profit[0][2]": 0
        }
      },
      {
        "line": 5,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 7,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "final_profit[0][3]": 0
        }
      },
      {
        "line": 5,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 7,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "final_profit[0][4]": 0
        }
      },
      {
        "line": 4,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 5,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 7,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "final_profit[1][0]": 0
        }
      },
      {
        "line": 5,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 9,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -4
        }
      },
      {
        "line": 14,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "final_profit[1][1]": 0
        }
      },
      {
        "line": 5,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 11,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -2
        }
      },
      {
        "line": 10,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "x": 1
        }
      },
      {
        "line": 11,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 2
        }
      },
      {
        "line": 13,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 2
        }
      },
      {
        "line": 14,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "final_profit[1][2]": 2
        }
      },
      {
        "line": 5,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 9,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -6
        }
      },
      {
        "line": 10,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "x": 1
        }
      },
      {
        "line": 11,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -2
        }
      },
      {
        "line": 10,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "x": 2
        }
      },
      {
        "line": 11,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -4
        }
      },
      {
        "line": 14,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "final_profit[1][3]": 2
        }
      },
      {
        "line": 5,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 10,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -8
        }
      },
      {
        "line": 10,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "x": 1
        }
      },
      {
        "line": 11,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -4
        }
      },
      {
        "line": 10,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "x": 2
        }
      },
      {
        "line": 11,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -6
        }
      },
      {
        "line": 10,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "x": 3
        }
      },
      {
        "line": 11,
        "step": 46,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -2
        }
      },
      {
        "line": 14,
        "step": 47,
        "action": "EXECUTE",
        "vars": {
          "final_profit[1][4]": 2
        }
      },
      {
        "line": 4,
        "step": 48,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 5,
        "step": 49,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 7,
        "step": 50,
        "action": "EXECUTE",
        "vars": {
          "final_profit[2][0]": 0
        }
      },
      {
        "line": 5,
        "step": 51,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 10,
        "step": 52,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 53,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -4
        }
      },
      {
        "line": 14,
        "step": 54,
        "action": "EXECUTE",
        "vars": {
          "final_profit[2][1]": 0
        }
      },
      {
        "line": 5,
        "step": 55,
        "action": "EXECUTE",
        "vars": {
          "j": 2
        }
      },
      {
        "line": 11,
        "step": 56,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -2
        }
      },
      {
        "line": 10,
        "step": 57,
        "action": "EXECUTE",
        "vars": {
          "x": 1
        }
      },
      {
        "line": 11,
        "step": 58,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 2
        }
      },
      {
        "line": 13,
        "step": 59,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 2
        }
      },
      {
        "line": 14,
        "step": 60,
        "action": "EXECUTE",
        "vars": {
          "final_profit[2][2]": 2
        }
      },
      {
        "line": 5,
        "step": 61,
        "action": "EXECUTE",
        "vars": {
          "j": 3
        }
      },
      {
        "line": 9,
        "step": 62,
        "action": "EXECUTE",
        "vars": {
          "max_so_far": 0
        }
      },
      {
        "line": 10,
        "step": 63,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 64,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -6
        }
      },
      {
        "line": 10,
        "step": 65,
        "action": "EXECUTE",
        "vars": {
          "x": 1
        }
      },
      {
        "line": 11,
        "step": 66,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -2
        }
      },
      {
        "line": 10,
        "step": 67,
        "action": "EXECUTE",
        "vars": {
          "x": 2
        }
      },
      {
        "line": 14,
        "step": 68,
        "action": "EXECUTE",
        "vars": {
          "final_profit[2][3]": 2
        }
      },
      {
        "line": 5,
        "step": 69,
        "action": "EXECUTE",
        "vars": {
          "j": 4
        }
      },
      {
        "line": 10,
        "step": 70,
        "action": "EXECUTE",
        "vars": {
          "x": 0
        }
      },
      {
        "line": 11,
        "step": 71,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -8
        }
      },
      {
        "line": 10,
        "step": 72,
        "action": "EXECUTE",
        "vars": {
          "x": 1
        }
      },
      {
        "line": 11,
        "step": 73,
        "action": "EXECUTE",
        "vars": {
          "curr_price": -4
        }
      },
      {
        "line": 10,
        "step": "74~75",
        "action": "LOOP",
        "vars": {
          "x": "2→3"
        }
      },
      {
        "line": 11,
        "step": 76,
        "action": "EXECUTE",
        "vars": {
          "curr_price": 0
        }
      },
      {
        "line": 14,
        "step": 77,
        "action": "EXECUTE",
        "vars": {
          "final_profit[2][4]": 2
        }
      },
      {
        "line": 15,
        "step": 78,
        "action": "RETURN",
        "vars": {
          "__return__": 2
        }
      }
    ],
    "id": 1397,
    "task_id": 469,
    "exist_function": [
      "max_profit"
    ]
  },
  {
    "code": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n",
    "entry_point": "find_remainder",
    "input": [
      [
        100,
        10,
        5,
        25,
        35,
        14
      ],
      6,
      11
    ],
    "output": 9,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "arr": [
            100,
            10,
            5,
            25,
            35,
            14
          ],
          "lens": 6,
          "n": 11
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "mul": 1
        }
      },
      {
        "line": 3,
        "step": "3~4",
        "action": "LOOP",
        "vars": {
          "i": "0→1"
        }
      },
      {
        "line": 4,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "mul": 10
        }
      },
      {
        "line": 3,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 4,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "mul": 6
        }
      },
      {
        "line": 3,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 4,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "mul": 7
        }
      },
      {
        "line": 3,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 4,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "mul": 3
        }
      },
      {
        "line": 3,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 4,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "mul": 9
        }
      },
      {
        "line": 5,
        "step": 14,
        "action": "RETURN",
        "vars": {
          "__return__": 9
        }
      }
    ],
    "id": 1401,
    "task_id": 471,
    "exist_function": [
      "find_remainder"
    ]
  },
  {
    "code": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter",
    "entry_point": "sort_counter",
    "input": [
      {
        "Math": 81,
        "Physics": 83,
        "Chemistry": 87
      }
    ],
    "output": [
      "('Chemistry', 87)",
      "('Physics', 83)",
      "('Math', 81)"
    ],
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "dict1": {
            "Math": 81,
            "Physics": 83,
            "Chemistry": 87
          }
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "x": {
            "Math": 81,
            "Physics": 83,
            "Chemistry": 87
          }
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "sort_counter": [
            "('Chemistry', 87)",
            "('Physics', 83)",
            "('Math', 81)"
          ]
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": [
            "('Chemistry', 87)",
            "('Physics', 83)",
            "('Math', 81)"
          ]
        }
      }
    ],
    "id": 1413,
    "task_id": 475,
    "exist_function": [
      "sort_counter"
    ]
  },
  {
    "code": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter",
    "entry_point": "sort_counter",
    "input": [
      {
        "Math": 400,
        "Physics": 300,
        "Chemistry": 250
      }
    ],
    "output": [
      "('Math', 400)",
      "('Physics', 300)",
      "('Chemistry', 250)"
    ],
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "dict1": {
            "Math": 400,
            "Physics": 300,
            "Chemistry": 250
          }
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "x": {
            "Math": 400,
            "Physics": 300,
            "Chemistry": 250
          }
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "sort_counter": [
            "('Math', 400)",
            "('Physics', 300)",
            "('Chemistry', 250)"
          ]
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": [
            "('Math', 400)",
            "('Physics', 300)",
            "('Chemistry', 250)"
          ]
        }
      }
    ],
    "id": 1414,
    "task_id": 475,
    "exist_function": [
      "sort_counter"
    ]
  },
  {
    "code": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter",
    "entry_point": "sort_counter",
    "input": [
      {
        "Math": 900,
        "Physics": 1000,
        "Chemistry": 1250
      }
    ],
    "output": [
      "('Chemistry', 1250)",
      "('Physics', 1000)",
      "('Math', 900)"
    ],
    "traces": [
      {
        "line": 2,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "dict1": {
            "Math": 900,
            "Physics": 1000,
            "Chemistry": 1250
          }
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "x": {
            "Math": 900,
            "Physics": 1000,
            "Chemistry": 1250
          }
        }
      },
      {
        "line": 4,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "sort_counter": [
            "('Chemistry', 1250)",
            "('Physics', 1000)",
            "('Math', 900)"
          ]
        }
      },
      {
        "line": 5,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": [
            "('Chemistry', 1250)",
            "('Physics', 1000)",
            "('Math', 900)"
          ]
        }
      }
    ],
    "id": 1415,
    "task_id": 475,
    "exist_function": [
      "sort_counter"
    ]
  },
  {
    "code": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n)",
    "entry_point": "first_Digit",
    "input": [
      123
    ],
    "output": 1,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 123
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "n": 12.3
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "n": 1.23
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": 1
        }
      }
    ],
    "id": 1425,
    "task_id": 479,
    "exist_function": [
      "first_Digit"
    ]
  },
  {
    "code": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n)",
    "entry_point": "first_Digit",
    "input": [
      456
    ],
    "output": 4,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "n": 456
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "n": 45.6
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "n": 4.5600000000000005
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": 4
        }
      }
    ],
    "id": 1426,
    "task_id": 479,
    "exist_function": [
      "first_Digit"
    ]
  },
  {
    "code": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch",
    "entry_point": "get_max_occuring_char",
    "input": [
      "data"
    ],
    "output": "a",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "str1": "data"
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "ASCII_SIZE": 256
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "ctr": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "max": -1
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "ch": ""
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": "d"
        }
      },
      {
        "line": 7,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "ctr[100]": 1
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": "a"
        }
      },
      {
        "line": 7,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "ctr[97]": 1
        }
      },
      {
        "line": 6,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "i": "t"
        }
      },
      {
        "line": 7,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "ctr[116]": 1
        }
      },
      {
        "line": 6,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "i": "a"
        }
      },
      {
        "line": 7,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "ctr[97]": 2
        }
      },
      {
        "line": 8,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "i": "d"
        }
      },
      {
        "line": 10,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "max": 1
        }
      },
      {
        "line": 11,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "ch": "d"
        }
      },
      {
        "line": 8,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "i": "a"
        }
      },
      {
        "line": 10,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "max": 2
        }
      },
      {
        "line": 11,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "ch": "a"
        }
      },
      {
        "line": 8,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "i": "t"
        }
      },
      {
        "line": 8,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "i": "a"
        }
      },
      {
        "line": 12,
        "step": 22,
        "action": "RETURN",
        "vars": {
          "__return__": "a"
        }
      }
    ],
    "id": 1428,
    "task_id": 480,
    "exist_function": [
      "get_max_occuring_char"
    ]
  },
  {
    "code": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch",
    "entry_point": "get_max_occuring_char",
    "input": [
      "create"
    ],
    "output": "e",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "str1": "create"
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "ASCII_SIZE": 256
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "ctr": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "max": -1
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "ch": ""
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": "c"
        }
      },
      {
        "line": 7,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "ctr[99]": 1
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": "r"
        }
      },
      {
        "line": 7,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "ctr[114]": 1
        }
      },
      {
        "line": 6,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "i": "e"
        }
      },
      {
        "line": 7,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "ctr[101]": 1
        }
      },
      {
        "line": 6,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "i": "a"
        }
      },
      {
        "line": 7,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "ctr[97]": 1
        }
      },
      {
        "line": 6,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "i": "t"
        }
      },
      {
        "line": 7,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "ctr[116]": 1
        }
      },
      {
        "line": 6,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "i": "e"
        }
      },
      {
        "line": 7,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "ctr[101]": 2
        }
      },
      {
        "line": 8,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "i": "c"
        }
      },
      {
        "line": 10,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "max": 1
        }
      },
      {
        "line": 11,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "ch": "c"
        }
      },
      {
        "line": 8,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "i": "r"
        }
      },
      {
        "line": 8,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "i": "e"
        }
      },
      {
        "line": 10,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "max": 2
        }
      },
      {
        "line": 11,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "ch": "e"
        }
      },
      {
        "line": 8,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "i": "a"
        }
      },
      {
        "line": 8,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "i": "t"
        }
      },
      {
        "line": 8,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "i": "e"
        }
      },
      {
        "line": 12,
        "step": 28,
        "action": "RETURN",
        "vars": {
          "__return__": "e"
        }
      }
    ],
    "id": 1429,
    "task_id": 480,
    "exist_function": [
      "get_max_occuring_char"
    ]
  },
  {
    "code": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch",
    "entry_point": "get_max_occuring_char",
    "input": [
      "brilliant girl"
    ],
    "output": "i",
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "str1": "brilliant girl"
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "ASCII_SIZE": 256
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "ctr": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
          ]
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "max": -1
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "ch": ""
        }
      },
      {
        "line": 6,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": "b"
        }
      },
      {
        "line": 7,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "ctr[98]": 1
        }
      },
      {
        "line": 6,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": "r"
        }
      },
      {
        "line": 7,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "ctr[114]": 1
        }
      },
      {
        "line": 6,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "i": "i"
        }
      },
      {
        "line": 7,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "ctr[105]": 1
        }
      },
      {
        "line": 6,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "i": "l"
        }
      },
      {
        "line": 7,
        "step": "13~14",
        "action": "LOOP",
        "vars": {
          "ctr[108]": "1→2"
        }
      },
      {
        "line": 6,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "i": "i"
        }
      },
      {
        "line": 7,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "ctr[105]": 2
        }
      },
      {
        "line": 6,
        "step": 17,
        "action": "EXECUTE",
        "vars": {
          "i": "a"
        }
      },
      {
        "line": 7,
        "step": 18,
        "action": "EXECUTE",
        "vars": {
          "ctr[97]": 1
        }
      },
      {
        "line": 6,
        "step": 19,
        "action": "EXECUTE",
        "vars": {
          "i": "n"
        }
      },
      {
        "line": 7,
        "step": 20,
        "action": "EXECUTE",
        "vars": {
          "ctr[110]": 1
        }
      },
      {
        "line": 6,
        "step": 21,
        "action": "EXECUTE",
        "vars": {
          "i": "t"
        }
      },
      {
        "line": 7,
        "step": 22,
        "action": "EXECUTE",
        "vars": {
          "ctr[116]": 1
        }
      },
      {
        "line": 6,
        "step": 23,
        "action": "EXECUTE",
        "vars": {
          "i": " "
        }
      },
      {
        "line": 7,
        "step": 24,
        "action": "EXECUTE",
        "vars": {
          "ctr[32]": 1
        }
      },
      {
        "line": 6,
        "step": 25,
        "action": "EXECUTE",
        "vars": {
          "i": "g"
        }
      },
      {
        "line": 7,
        "step": 26,
        "action": "EXECUTE",
        "vars": {
          "ctr[103]": 1
        }
      },
      {
        "line": 6,
        "step": 27,
        "action": "EXECUTE",
        "vars": {
          "i": "i"
        }
      },
      {
        "line": 7,
        "step": 28,
        "action": "EXECUTE",
        "vars": {
          "ctr[105]": 3
        }
      },
      {
        "line": 6,
        "step": 29,
        "action": "EXECUTE",
        "vars": {
          "i": "r"
        }
      },
      {
        "line": 7,
        "step": 30,
        "action": "EXECUTE",
        "vars": {
          "ctr[114]": 2
        }
      },
      {
        "line": 6,
        "step": 31,
        "action": "EXECUTE",
        "vars": {
          "i": "l"
        }
      },
      {
        "line": 7,
        "step": 32,
        "action": "EXECUTE",
        "vars": {
          "ctr[108]": 3
        }
      },
      {
        "line": 8,
        "step": 33,
        "action": "EXECUTE",
        "vars": {
          "i": "b"
        }
      },
      {
        "line": 10,
        "step": 34,
        "action": "EXECUTE",
        "vars": {
          "max": 1
        }
      },
      {
        "line": 11,
        "step": 35,
        "action": "EXECUTE",
        "vars": {
          "ch": "b"
        }
      },
      {
        "line": 8,
        "step": 36,
        "action": "EXECUTE",
        "vars": {
          "i": "r"
        }
      },
      {
        "line": 10,
        "step": 37,
        "action": "EXECUTE",
        "vars": {
          "max": 2
        }
      },
      {
        "line": 11,
        "step": 38,
        "action": "EXECUTE",
        "vars": {
          "ch": "r"
        }
      },
      {
        "line": 8,
        "step": 39,
        "action": "EXECUTE",
        "vars": {
          "i": "i"
        }
      },
      {
        "line": 10,
        "step": 40,
        "action": "EXECUTE",
        "vars": {
          "max": 3
        }
      },
      {
        "line": 11,
        "step": 41,
        "action": "EXECUTE",
        "vars": {
          "ch": "i"
        }
      },
      {
        "line": 8,
        "step": 42,
        "action": "EXECUTE",
        "vars": {
          "i": "l"
        }
      },
      {
        "line": 8,
        "step": 43,
        "action": "EXECUTE",
        "vars": {
          "i": "i"
        }
      },
      {
        "line": 8,
        "step": 44,
        "action": "EXECUTE",
        "vars": {
          "i": "a"
        }
      },
      {
        "line": 8,
        "step": 45,
        "action": "EXECUTE",
        "vars": {
          "i": "n"
        }
      },
      {
        "line": 8,
        "step": 46,
        "action": "EXECUTE",
        "vars": {
          "i": "t"
        }
      },
      {
        "line": 8,
        "step": 47,
        "action": "EXECUTE",
        "vars": {
          "i": " "
        }
      },
      {
        "line": 8,
        "step": 48,
        "action": "EXECUTE",
        "vars": {
          "i": "g"
        }
      },
      {
        "line": 8,
        "step": 49,
        "action": "EXECUTE",
        "vars": {
          "i": "i"
        }
      },
      {
        "line": 8,
        "step": 50,
        "action": "EXECUTE",
        "vars": {
          "i": "r"
        }
      },
      {
        "line": 8,
        "step": 51,
        "action": "EXECUTE",
        "vars": {
          "i": "l"
        }
      },
      {
        "line": 12,
        "step": 52,
        "action": "RETURN",
        "vars": {
          "__return__": "i"
        }
      }
    ],
    "id": 1430,
    "task_id": 480,
    "exist_function": [
      "get_max_occuring_char"
    ]
  },
  {
    "code": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])",
    "entry_point": "is_subset_sum",
    "input": [
      [
        3,
        34,
        4,
        12,
        5,
        2
      ],
      6,
      9
    ],
    "output": true,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "set": [
            3,
            34,
            4,
            12,
            5,
            2
          ],
          "n": 2,
          "sum": 0
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "RETURN",
        "vars": {
          "__return__": true
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "n": 2,
          "sum": 0
        }
      },
      {
        "line": 8,
        "step": 3,
        "action": "RETURN",
        "vars": {
          "__return__": true
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "n": 2,
          "sum": 0
        }
      },
      {
        "line": 7,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": true
        }
      },
      {
        "line": 3,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "n": 2,
          "sum": 0
        }
      },
      {
        "line": 8,
        "step": 5,
        "action": "RETURN",
        "vars": {
          "__return__": true
        }
      },
      {
        "line": 3,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "n": 2,
          "sum": 0
        }
      },
      {
        "line": 8,
        "step": 6,
        "action": "RETURN",
        "vars": {
          "__return__": true
        }
      }
    ],
    "id": 1431,
    "task_id": 481,
    "exist_function": [
      "is_subset_sum"
    ]
  },
  {
    "code": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])",
    "entry_point": "is_subset_sum",
    "input": [
      [
        3,
        34,
        4,
        12,
        5,
        2
      ],
      6,
      15
    ],
    "output": true,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "set": [
            3,
            34,
            4,
            12,
            5,
            2
          ],
          "n": 0,
          "sum": 0
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "RETURN",
        "vars": {
          "__return__": true
        }
      },
      {
        "line": 3,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "n": 0,
          "sum": 0
        }
      },
      {
        "line": 8,
        "step": 3,
        "action": "RETURN",
        "vars": {
          "__return__": true
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "n": 0,
          "sum": 0
        }
      },
      {
        "line": 7,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": true
        }
      },
      {
        "line": 3,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "n": 0,
          "sum": 0
        }
      },
      {
        "line": 7,
        "step": 5,
        "action": "RETURN",
        "vars": {
          "__return__": true
        }
      },
      {
        "line": 3,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "n": 0,
          "sum": 0
        }
      },
      {
        "line": 8,
        "step": 6,
        "action": "RETURN",
        "vars": {
          "__return__": true
        }
      },
      {
        "line": 3,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "n": 0,
          "sum": 0
        }
      },
      {
        "line": 8,
        "step": 7,
        "action": "RETURN",
        "vars": {
          "__return__": true
        }
      },
      {
        "line": 3,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "n": 0,
          "sum": 0
        }
      },
      {
        "line": 8,
        "step": 8,
        "action": "RETURN",
        "vars": {
          "__return__": true
        }
      }
    ],
    "id": 1433,
    "task_id": 481,
    "exist_function": [
      "is_subset_sum"
    ]
  },
  {
    "code": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i",
    "entry_point": "first_Factorial_Divisible_Number",
    "input": [
      10
    ],
    "output": 5,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "x": 10
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "fact": 1
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "fact": 2
        }
      },
      {
        "line": 4,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 5,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "fact": 6
        }
      },
      {
        "line": 4,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 5,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "fact": 24
        }
      },
      {
        "line": 4,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 5,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "fact": 120
        }
      },
      {
        "line": 8,
        "step": 12,
        "action": "RETURN",
        "vars": {
          "__return__": 5
        }
      }
    ],
    "id": 1437,
    "task_id": 483,
    "exist_function": [
      "first_Factorial_Divisible_Number"
    ]
  },
  {
    "code": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i",
    "entry_point": "first_Factorial_Divisible_Number",
    "input": [
      15
    ],
    "output": 5,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "x": 15
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "fact": 1
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "fact": 2
        }
      },
      {
        "line": 4,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 5,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "fact": 6
        }
      },
      {
        "line": 4,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 5,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "fact": 24
        }
      },
      {
        "line": 4,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 5,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "fact": 120
        }
      },
      {
        "line": 8,
        "step": 12,
        "action": "RETURN",
        "vars": {
          "__return__": 5
        }
      }
    ],
    "id": 1438,
    "task_id": 483,
    "exist_function": [
      "first_Factorial_Divisible_Number"
    ]
  },
  {
    "code": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i",
    "entry_point": "first_Factorial_Divisible_Number",
    "input": [
      5
    ],
    "output": 4,
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "x": 5
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "fact": 1
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 5,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "fact": 2
        }
      },
      {
        "line": 4,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 5,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "fact": 6
        }
      },
      {
        "line": 4,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 5,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "fact": 24
        }
      },
      {
        "line": 8,
        "step": 10,
        "action": "RETURN",
        "vars": {
          "__return__": 4
        }
      }
    ],
    "id": 1439,
    "task_id": 483,
    "exist_function": [
      "first_Factorial_Divisible_Number"
    ]
  },
  {
    "code": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1",
    "entry_point": "largest_palindrome",
    "input": [
      [
        1,
        232,
        54545,
        999991
      ],
      4
    ],
    "output": 54545,
    "traces": [
      {
        "line": 13,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "A": [
            1,
            232,
            54545,
            999991
          ],
          "n": 4
        }
      },
      {
        "line": 15,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 15,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 17,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": 54545
        }
      }
    ],
    "id": 1443,
    "task_id": 485,
    "exist_function": [
      "is_palindrome",
      "largest_palindrome"
    ]
  },
  {
    "code": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1",
    "entry_point": "largest_palindrome",
    "input": [
      [
        1,
        2,
        3,
        4,
        5,
        50
      ],
      6
    ],
    "output": 5,
    "traces": [
      {
        "line": 13,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "A": [
            1,
            2,
            3,
            4,
            5,
            50
          ],
          "n": 6
        }
      },
      {
        "line": 15,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "i": 5
        }
      },
      {
        "line": 15,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 17,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": 5
        }
      }
    ],
    "id": 1444,
    "task_id": 485,
    "exist_function": [
      "is_palindrome",
      "largest_palindrome"
    ]
  },
  {
    "code": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1",
    "entry_point": "largest_palindrome",
    "input": [
      [
        1,
        3,
        7,
        9,
        45
      ],
      5
    ],
    "output": 9,
    "traces": [
      {
        "line": 13,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "A": [
            1,
            3,
            7,
            9,
            45
          ],
          "n": 5
        }
      },
      {
        "line": 15,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "i": 4
        }
      },
      {
        "line": 15,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 3
        }
      },
      {
        "line": 17,
        "step": 4,
        "action": "RETURN",
        "vars": {
          "__return__": 9
        }
      }
    ],
    "id": 1445,
    "task_id": 485,
    "exist_function": [
      "is_palindrome",
      "largest_palindrome"
    ]
  },
  {
    "code": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup",
    "entry_point": "sort_tuple",
    "input": [
      [
        "(2, 1)",
        "(3, 2)",
        "(1, 3)"
      ]
    ],
    "output": [
      "(2, 1)",
      "(3, 2)",
      "(1, 3)"
    ],
    "traces": [
      {
        "line": 1,
        "step": 1,
        "action": "INPUT",
        "vars": {
          "tup": [
            "(1, 3)",
            "(3, 2)",
            "(2, 1)"
          ]
        }
      },
      {
        "line": 2,
        "step": 2,
        "action": "EXECUTE",
        "vars": {
          "lst": 3
        }
      },
      {
        "line": 3,
        "step": 3,
        "action": "EXECUTE",
        "vars": {
          "i": 0
        }
      },
      {
        "line": 4,
        "step": 4,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 6,
        "step": 5,
        "action": "EXECUTE",
        "vars": {
          "temp": "(1, 3)"
        }
      },
      {
        "line": 7,
        "step": 6,
        "action": "EXECUTE",
        "vars": {
          "tup[0][1]": 2,
          "tup[0][0]": 3
        }
      },
      {
        "line": 8,
        "step": 7,
        "action": "EXECUTE",
        "vars": {
          "tup[1][1]": 3,
          "tup[1][0]": 1
        }
      },
      {
        "line": 4,
        "step": 8,
        "action": "EXECUTE",
        "vars": {
          "j": 1
        }
      },
      {
        "line": 7,
        "step": 9,
        "action": "EXECUTE",
        "vars": {
          "tup[1][1]": 1,
          "tup[1][0]": 2
        }
      },
      {
        "line": 8,
        "step": 10,
        "action": "EXECUTE",
        "vars": {
          "tup[2][1]": 3,
          "tup[2][0]": 1
        }
      },
      {
        "line": 3,
        "step": 11,
        "action": "EXECUTE",
        "vars": {
          "i": 1
        }
      },
      {
        "line": 4,
        "step": 12,
        "action": "EXECUTE",
        "vars": {
          "j": 0
        }
      },
      {
        "line": 6,
        "step": 13,
        "action": "EXECUTE",
        "vars": {
          "temp[1]": 2,
          "temp[0]": 3
        }
      },
      {
        "line": 7,
        "step": 14,
        "action": "EXECUTE",
        "vars": {
          "tup[0][1]": 1,
          "tup[0][0]": 2
        }
      },
      {
        "line": 8,
        "step": 15,
        "action": "EXECUTE",
        "vars": {
          "tup[1][1]": 2,
          "tup[1][0]": 3
        }
      },
      {
        "line": 3,
        "step": 16,
        "action": "EXECUTE",
        "vars": {
          "i": 2
        }
      },
      {
        "line": 9,
        "step": 17,
        "action": "RETURN",
        "vars": {
          "__return__": [
            "(2, 1)",
            "(3, 2)",
            "(1, 3)"
          ]
        }
      }
    ],
    "id": 1446,
    "task_id": 487,
    "exist_function": [
      "sort_tuple"
    ]
  }
]